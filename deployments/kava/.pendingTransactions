{
  "0x72929b3874dacf2332274571c59f983fd772c7050b535eed96c8cb1cc25fcfba": {
    "name": "ComptrollerImpl",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "Comptroller",
      "sourceName": "contracts/Comptroller.sol",
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "string",
              "name": "action",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "pauseState",
              "type": "bool"
            }
          ],
          "name": "ActionPaused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "action",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "pauseState",
              "type": "bool"
            }
          ],
          "name": "ActionPaused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldCompAccrued",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newCompAccrued",
              "type": "uint256"
            }
          ],
          "name": "CompAccruedAdjusted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newSpeed",
              "type": "uint256"
            }
          ],
          "name": "CompBorrowSpeedUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "CompGranted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldCompReceivable",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newCompReceivable",
              "type": "uint256"
            }
          ],
          "name": "CompReceivableUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newSpeed",
              "type": "uint256"
            }
          ],
          "name": "CompSupplySpeedUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "contributor",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newSpeed",
              "type": "uint256"
            }
          ],
          "name": "ContributorCompSpeedUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "compDelta",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "compBorrowIndex",
              "type": "uint256"
            }
          ],
          "name": "DistributedBorrowerComp",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "supplier",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "compDelta",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "compSupplyIndex",
              "type": "uint256"
            }
          ],
          "name": "DistributedSupplierComp",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "error",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "info",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "detail",
              "type": "uint256"
            }
          ],
          "name": "Failure",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "MarketEntered",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "MarketExited",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            }
          ],
          "name": "MarketListed",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newBorrowCap",
              "type": "uint256"
            }
          ],
          "name": "NewBorrowCap",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "oldBorrowCapGuardian",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "newBorrowCapGuardian",
              "type": "address"
            }
          ],
          "name": "NewBorrowCapGuardian",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldCloseFactorMantissa",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newCloseFactorMantissa",
              "type": "uint256"
            }
          ],
          "name": "NewCloseFactor",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldCollateralFactorMantissa",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newCollateralFactorMantissa",
              "type": "uint256"
            }
          ],
          "name": "NewCollateralFactor",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldLiquidationIncentiveMantissa",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newLiquidationIncentiveMantissa",
              "type": "uint256"
            }
          ],
          "name": "NewLiquidationIncentive",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "oldPauseGuardian",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "newPauseGuardian",
              "type": "address"
            }
          ],
          "name": "NewPauseGuardian",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "contract PriceOracle",
              "name": "oldPriceOracle",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "contract PriceOracle",
              "name": "newPriceOracle",
              "type": "address"
            }
          ],
          "name": "NewPriceOracle",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "contract Unitroller",
              "name": "unitroller",
              "type": "address"
            }
          ],
          "name": "_become",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "_borrowGuardianPaused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "_grantComp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "_mintGuardianPaused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newBorrowCapGuardian",
              "type": "address"
            }
          ],
          "name": "_setBorrowCapGuardian",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "_setBorrowPaused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newCloseFactorMantissa",
              "type": "uint256"
            }
          ],
          "name": "_setCloseFactor",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "newCollateralFactorMantissa",
              "type": "uint256"
            }
          ],
          "name": "_setCollateralFactor",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract CToken[]",
              "name": "cTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "supplySpeeds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "borrowSpeeds",
              "type": "uint256[]"
            }
          ],
          "name": "_setCompSpeeds",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "contributor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "compSpeed",
              "type": "uint256"
            }
          ],
          "name": "_setContributorCompSpeed",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newLiquidationIncentiveMantissa",
              "type": "uint256"
            }
          ],
          "name": "_setLiquidationIncentive",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract CToken[]",
              "name": "cTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "newBorrowCaps",
              "type": "uint256[]"
            }
          ],
          "name": "_setMarketBorrowCaps",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "_setMintPaused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newPauseGuardian",
              "type": "address"
            }
          ],
          "name": "_setPauseGuardian",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract PriceOracle",
              "name": "newOracle",
              "type": "address"
            }
          ],
          "name": "_setPriceOracle",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "_setSeizePaused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "_setTransferPaused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            }
          ],
          "name": "_supportMarket",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "accountAssets",
          "outputs": [
            {
              "internalType": "contract CToken",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "admin",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "allMarkets",
          "outputs": [
            {
              "internalType": "contract CToken",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmount",
              "type": "uint256"
            }
          ],
          "name": "borrowAllowed",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "borrowCapGuardian",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "borrowCaps",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "borrowGuardianPaused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmount",
              "type": "uint256"
            }
          ],
          "name": "borrowVerify",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            }
          ],
          "name": "checkMembership",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "holder",
              "type": "address"
            },
            {
              "internalType": "contract CToken[]",
              "name": "cTokens",
              "type": "address[]"
            }
          ],
          "name": "claimComp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "holders",
              "type": "address[]"
            },
            {
              "internalType": "contract CToken[]",
              "name": "cTokens",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "borrowers",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "suppliers",
              "type": "bool"
            }
          ],
          "name": "claimComp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "holder",
              "type": "address"
            }
          ],
          "name": "claimComp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "closeFactorMantissa",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "compAccrued",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "compBorrowSpeeds",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "compBorrowState",
          "outputs": [
            {
              "internalType": "uint224",
              "name": "index",
              "type": "uint224"
            },
            {
              "internalType": "uint32",
              "name": "block",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "compBorrowerIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "compContributorSpeeds",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "compInitialIndex",
          "outputs": [
            {
              "internalType": "uint224",
              "name": "",
              "type": "uint224"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "compRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "compReceivable",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "compSpeeds",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "compSupplierIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "compSupplySpeeds",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "compSupplyState",
          "outputs": [
            {
              "internalType": "uint224",
              "name": "index",
              "type": "uint224"
            },
            {
              "internalType": "uint32",
              "name": "block",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "comptrollerImplementation",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "cTokens",
              "type": "address[]"
            }
          ],
          "name": "enterMarkets",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cTokenAddress",
              "type": "address"
            }
          ],
          "name": "exitMarket",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "affectedUsers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "name": "fixBadAccruals",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "getAccountLiquidity",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getAllMarkets",
          "outputs": [
            {
              "internalType": "contract CToken[]",
              "name": "",
              "type": "address[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "getAssetsIn",
          "outputs": [
            {
              "internalType": "contract CToken[]",
              "name": "",
              "type": "address[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getBlockNumber",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getCompAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenModify",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "redeemTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmount",
              "type": "uint256"
            }
          ],
          "name": "getHypotheticalAccountLiquidity",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "isComptroller",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract CToken",
              "name": "cToken",
              "type": "address"
            }
          ],
          "name": "isDeprecated",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "lastContributorBlock",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cTokenBorrowed",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenCollateral",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "liquidator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "repayAmount",
              "type": "uint256"
            }
          ],
          "name": "liquidateBorrowAllowed",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cTokenBorrowed",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenCollateral",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "liquidator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "actualRepayAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "seizeTokens",
              "type": "uint256"
            }
          ],
          "name": "liquidateBorrowVerify",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cTokenBorrowed",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenCollateral",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "actualRepayAmount",
              "type": "uint256"
            }
          ],
          "name": "liquidateCalculateSeizeTokens",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "liquidationIncentiveMantissa",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "markets",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isComped",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "maxAssets",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "minter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "mintAmount",
              "type": "uint256"
            }
          ],
          "name": "mintAllowed",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "mintGuardianPaused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "minter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "actualMintAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintTokens",
              "type": "uint256"
            }
          ],
          "name": "mintVerify",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "oracle",
          "outputs": [
            {
              "internalType": "contract PriceOracle",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pauseGuardian",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pendingAdmin",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pendingComptrollerImplementation",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "proposal65FixExecuted",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "redeemer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "redeemTokens",
              "type": "uint256"
            }
          ],
          "name": "redeemAllowed",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "redeemer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "redeemAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redeemTokens",
              "type": "uint256"
            }
          ],
          "name": "redeemVerify",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "repayAmount",
              "type": "uint256"
            }
          ],
          "name": "repayBorrowAllowed",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "actualRepayAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowerIndex",
              "type": "uint256"
            }
          ],
          "name": "repayBorrowVerify",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cTokenCollateral",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenBorrowed",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "liquidator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "seizeTokens",
              "type": "uint256"
            }
          ],
          "name": "seizeAllowed",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "seizeGuardianPaused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cTokenCollateral",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenBorrowed",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "liquidator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "seizeTokens",
              "type": "uint256"
            }
          ],
          "name": "seizeVerify",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "src",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dst",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "transferTokens",
              "type": "uint256"
            }
          ],
          "name": "transferAllowed",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "transferGuardianPaused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "src",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dst",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "transferTokens",
              "type": "uint256"
            }
          ],
          "name": "transferVerify",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "contributor",
              "type": "address"
            }
          ],
          "name": "updateContributorRewards",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561543b806100326000396000f3fe608060405234801561001057600080fd5b506004361061048a5760003560e01c8063731f0c2b11610262578063b21be7fd11610151578063dce15449116100ce578063e9af029211610092578063e9af029214610c04578063eabe7d9114610c17578063ede4edd014610c2a578063f00a7a9214610c3d578063f4a433c014610c4a578063f851a44014610c6a57600080fd5b8063dce1544914610bae578063dcfbc0c714610bc1578063e4028eee14610bd4578063e6653f3d14610be7578063e875544614610bfb57600080fd5b8063c488847b11610115578063c488847b14610b15578063ca0af04314610b3d578063cc7ebdc414610b68578063d02f735114610b88578063da3d454c14610b9b57600080fd5b8063b21be7fd14610a84578063bb82aa5e14610aaf578063bdcdc25814610ac2578063bea6b8b814610ad5578063c299823814610af557600080fd5b806394b2294b116101df578063a8b43948116101a3578063a8b4394814610a2c578063aa90075414610a3f578063abfceffc14610a48578063ac0b0bb714610a68578063b0772d0b14610a7c57600080fd5b806394b2294b146109a9578063986ab838146109b25780639d1b5a0a146109d2578063a76b3fda146109ec578063a7f0e231146109ff57600080fd5b80638c57804e116102265780638c57804e146108b75780638e8f294b146108ef5780638ebf636414610942578063929fe9a11461095557806394543c151461099657600080fd5b8063731f0c2b1461083a578063741b25251461085d5780637dc0d1d01461087057806385b7beb81461088357806387f76303146108a357600080fd5b80634a5844321161037e5780635ec88c79116102fb5780636a56947e116102bf5780636a56947e1461077f5780636aa875b51461078d5780636b79c38d146107ad5780636d154ea5146108095780636d35bf911461082c57600080fd5b80635ec88c79146107205780635f5af1aa146107335780635fc7e71e14610746578063607ef6c1146107595780636810dfa61461076c57600080fd5b806351dff9891161034257806351dff989146106c157806352d84d1e146106d457806355ee1fe1146106e7578063598ee1cb146106fa5780635c7786051461070d57600080fd5b80634a584432146106445780634ada90af146106645780634e79238f1461066d5780634ef4c3e11461069b5780634fd42e17146106ae57600080fd5b8063267822471161040c5780633bcf7ec1116103d05780633bcf7ec1146105ed5780633c94786f1461060057806341c728b91461061457806342cbb15c1461062857806347ef3b3b1461062e57600080fd5b8063267822471461058e57806327efe3cb146105a15780632d70db78146105b4578063317b0b77146105c7578063391957d7146105da57600080fd5b80631d7b33d7116104535780631d7b33d7146104fa5780631ededc911461052857806321af45691461053d57806324008a621461056857806324a3d6221461057b57600080fd5b80627e3dd21461048f57806316b95e8f146104ac57806318c882a5146104c15780631c3db2e0146104d45780631d504dc6146104e7575b600080fd5b610497600181565b60405190151581526020015b60405180910390f35b6104bf6104ba366004614a3c565b610c7d565b005b6104976104cf366004614acb565b610f26565b6104bf6104e2366004614be3565b61105f565b6104bf6104f5366004614c33565b6110c2565b61051a610508366004614c33565b600f6020526000908152604090205481565b6040519081526020016104a3565b6104bf610536366004614c50565b5050505050565b601554610550906001600160a01b031681565b6040516001600160a01b0390911681526020016104a3565b61051a610576366004614cab565b611240565b600a54610550906001600160a01b031681565b600154610550906001600160a01b031681565b6104bf6105af366004614cfc565b6112fe565b6104976105c2366004614d28565b6113f5565b61051a6105d5366004614d45565b6114e5565b6104bf6105e8366004614c33565b61158c565b6104976105fb366004614acb565b611656565b600a5461049790600160a01b900460ff1681565b6104bf610622366004614d5e565b50505050565b4261051a565b6104bf61063c366004614da4565b505050505050565b61051a610652366004614c33565b60166020526000908152604090205481565b61051a60065481565b61068061067b366004614d5e565b611780565b604080519384526020840192909252908201526060016104a3565b61051a6106a9366004614e12565b6117c0565b61051a6106bc366004614d45565b611861565b6104bf6106cf366004614d5e565b6118be565b6105506106e2366004614d45565b61190d565b61051a6106f5366004614c33565b611937565b6104bf610708366004614cfc565b6119b0565b6104bf61071b366004614e12565b505050565b61068061072e366004614c33565b611aa4565b61051a610741366004614c33565b611adf565b61051a610754366004614e53565b611b58565b6104bf610767366004614a3c565b611d27565b6104bf61077a366004614f1b565b611f05565b6104bf610622366004614cab565b61051a61079b366004614c33565b601a6020526000908152604090205481565b6107e56107bb366004614c33565b6010602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604080516001600160e01b03909316835263ffffffff9091166020830152016104a3565b610497610817366004614c33565b600c6020526000908152604090205460ff1681565b6104bf610536366004614e53565b610497610848366004614c33565b600b6020526000908152604090205460ff1681565b6104bf61086b366004614c33565b61218f565b600454610550906001600160a01b031681565b61051a610891366004614c33565b601c6020526000908152604090205481565b600a5461049790600160b01b900460ff1681565b6107e56108c5366004614c33565b6011602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b6109236108fd366004614c33565b60096020526000908152604090208054600182015460039092015460ff91821692911683565b60408051931515845260208401929092521515908201526060016104a3565b610497610950366004614d28565b61223b565b610497610963366004614fa4565b6001600160a01b038082166000908152600960209081526040808320938616835260029093019052205460ff1692915050565b6104976109a4366004614c33565b612322565b61051a60075481565b61051a6109c0366004614c33565b60176020526000908152604090205481565b73d86c8d4279ccafbec840c782bcc50d201f277419610550565b61051a6109fa366004614c33565b6123e1565b610a146a0c097ce7bc90715b34b9f160241b81565b6040516001600160e01b0390911681526020016104a3565b6104bf610a3a36600461502d565b612513565b61051a600e5481565b610a5b610a56366004614c33565b612648565b6040516104a391906150b5565b600a5461049790600160b81b900460ff1681565b610a5b6126be565b61051a610a92366004614fa4565b601260209081526000928352604080842090915290825290205481565b600254610550906001600160a01b031681565b61051a610ad0366004614cab565b612720565b61051a610ae3366004614c33565b60186020526000908152604090205481565b610b08610b03366004615102565b6127ab565b6040516104a39190615137565b610b28610b23366004614e12565b612873565b604080519283526020830191909152016104a3565b61051a610b4b366004614fa4565b601360209081526000928352604080842090915290825290205481565b61051a610b76366004614c33565b60146020526000908152604090205481565b61051a610b96366004614e53565b612a91565b61051a610ba9366004614e12565b612c38565b610550610bbc366004614cfc565b613008565b600354610550906001600160a01b031681565b61051a610be2366004614cfc565b613040565b600a5461049790600160a81b900460ff1681565b61051a60055481565b6104bf610c12366004614c33565b6131d2565b61051a610c25366004614e12565b613236565b61051a610c38366004614c33565b613271565b601b546104979060ff1681565b61051a610c58366004614c33565b60196020526000908152604090205481565b600054610550906001600160a01b031681565b6000546001600160a01b03163314610ce65760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b60648201526084015b60405180910390fd5b601b5460ff1615610d485760405162461bcd60e51b815260206004820152602660248201527f416c72656164792065786563757465642074686973206f6e652d6f66662066756044820152653731ba34b7b760d11b6064820152608401610cdd565b828114610d875760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081a5b9c1d5d609a1b6044820152606401610cdd565b60008060008060005b87811015610f0e57888882818110610daa57610daa61516f565b9050602002016020810190610dbf9190614c33565b6001600160a01b0381166000908152601460205260409020549095509350868682818110610def57610def61516f565b90506020020135925083831115610e93576000610e0c858561519b565b6001600160a01b0387166000908152601c6020526040812054919250610e3282846135d7565b6001600160a01b0389166000818152601c6020908152604091829020849055815186815290810184905292935090917f17fea09d9a7ca41b2f9f9118f18f44848a62e9c70d55dd4385131eb2cf1b7e47910160405180910390a28695505050505b8215610efe57610ea384846135e3565b6001600160a01b038616600081815260146020908152604091829020849055815188815290810184905292945090917f4a5c134e28b537a76546993ea37f3b60d9190476df7356d3842aa40902e20f04910160405180910390a25b610f07816151b2565b9050610d90565b5050601b805460ff1916600117905550505050505050565b6001600160a01b03821660009081526009602052604081205460ff16610f5e5760405162461bcd60e51b8152600401610cdd906151cd565b600a546001600160a01b0316331480610f8157506000546001600160a01b031633145b610f9d5760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b0316331480610fb857506001821515145b610fd45760405162461bcd60e51b8152600401610cdd9061525c565b6001600160a01b0383166000818152600c6020908152604091829020805460ff19168615159081179091558251938452606091840182905260069184019190915265426f72726f7760d01b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a0015b60405180910390a150805b92915050565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106110955761109561516f565b60200260200101906001600160a01b031690816001600160a01b03168152505061071b8183600180611f05565b806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611100573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611124919061528c565b6001600160a01b0316336001600160a01b0316146111945760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676560448201526620627261696e7360c81b6064820152608401610cdd565b806001600160a01b031663c1e803346040518163ffffffff1660e01b81526004016020604051808303816000875af11580156111d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f891906152a9565b1561123d5760405162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b6044820152606401610cdd565b50565b6001600160a01b03841660009081526009602052604081205460ff16611268575060096112f6565b60006040518060200160405280876001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d791906152a9565b905290506112e586826135ef565b6112f08685836137e2565b60009150505b949350505050565b611306613962565b6113525760405162461bcd60e51b815260206004820152601960248201527f6f6e6c792061646d696e2063616e206772616e7420636f6d70000000000000006044820152606401610cdd565b600061135e838361398b565b905080156113ae5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420636f6d7020666f72206772616e7400000000006044820152606401610cdd565b604080516001600160a01b0385168152602081018490527f98b2f82a3a07f223a0be64b3d0f47711c64dccd1feafb94aa28156b38cd9695c910160405180910390a1505050565b600a546000906001600160a01b031633148061141b57506000546001600160a01b031633145b6114375760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b031633148061145257506001821515145b61146e5760405162461bcd60e51b8152600401610cdd9061525c565b600a8054831515600160b81b0260ff60b81b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906114d99084906040808252600590820152645365697a6560d81b6060820152901515602082015260800190565b60405180910390a15090565b600080546001600160a01b031633146115405760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792061646d696e2063616e2073657420636c6f736520666163746f72006044820152606401610cdd565b600580549083905560408051828152602081018590527f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd991015b60405180910390a160005b9392505050565b6000546001600160a01b031633146115f55760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792061646d696e2063616e2073657420626f72726f772063617020677560448201526530b93234b0b760d11b6064820152608401610cdd565b601580546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527feda98690e518e9a05f8ec6837663e188211b2da8f4906648b323f2c1d4434e29910160405180910390a15050565b6001600160a01b03821660009081526009602052604081205460ff1661168e5760405162461bcd60e51b8152600401610cdd906151cd565b600a546001600160a01b03163314806116b157506000546001600160a01b031633145b6116cd5760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b03163314806116e857506001821515145b6117045760405162461bcd60e51b8152600401610cdd9061525c565b6001600160a01b0383166000818152600b6020908152604091829020805460ff19168615159081179091558251938452606091840182905260049184019190915263135a5b9d60e21b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a00161104e565b6000806000806000806117958a8a8a8a613ab0565b9250925092508260118111156117ad576117ad6152c2565b95509093509150505b9450945094915050565b6001600160a01b0383166000908152600b602052604081205460ff161561181a5760405162461bcd60e51b815260206004820152600e60248201526d1b5a5b9d081a5cc81c185d5cd95960921b6044820152606401610cdd565b6001600160a01b03841660009081526009602052604090205460ff166118445760095b9050611585565b61184d84613dde565b6118578484613f56565b6000949350505050565b600080546001600160a01b03163314611880576110596001600b6140f4565b600680549083905560408051828152602081018590527faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec1316910161157a565b801580156118cc5750600082115b156106225760405162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b6044820152606401610cdd565b600d818154811061191d57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546001600160a01b0316331461195657611059600160106140f4565b600480546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e22910161157a565b6119b8613962565b611a045760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792061646d696e2063616e2073657420636f6d702073706565640000006044820152606401610cdd565b611a0d8261218f565b80611a30576001600160a01b038216600090815260186020526040812055611a4b565b426001600160a01b0383166000908152601860205260409020555b6001600160a01b03821660008181526017602052604090819020839055517f386537fa92edc3319af95f1f904dcf1900021e4f3f4e08169a577a09076e66b390611a989084815260200190565b60405180910390a25050565b600080600080600080611abb876000806000613ab0565b925092509250826011811115611ad357611ad36152c2565b97919650945092505050565b600080546001600160a01b03163314611afe57611059600160136140f4565b600a80546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e910161157a565b6001600160a01b03851660009081526009602052604081205460ff161580611b9957506001600160a01b03851660009081526009602052604090205460ff16155b15611ba85760095b9050611d1e565b6040516395dd919360e01b81526001600160a01b038481166004830152600091908816906395dd919390602401602060405180830381865afa158015611bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1691906152a9565b9050611c2187612322565b15611c8c5782811015611c875760405162461bcd60e51b815260206004820152602860248201527f43616e206e6f74207265706179206d6f7265207468616e2074686520746f74616044820152676c20626f72726f7760c01b6064820152608401610cdd565b611d18565b600080611c988661416d565b91935090915060009050826011811115611cb457611cb46152c2565b14611cd557816011811115611ccb57611ccb6152c2565b9350505050611d1e565b80611ce1576003611ccb565b6000611cfd60405180602001604052806005548152508561418d565b905080861115611d14576011945050505050611d1e565b5050505b60009150505b95945050505050565b6000546001600160a01b0316331480611d4a57506015546001600160a01b031633145b611db45760405162461bcd60e51b815260206004820152603560248201527f6f6e6c792061646d696e206f7220626f72726f772063617020677561726469616044820152746e2063616e2073657420626f72726f77206361707360581b6064820152608401610cdd565b82818115801590611dc457508082145b611e005760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610cdd565b60005b82811015611efc57848482818110611e1d57611e1d61516f565b9050602002013560166000898985818110611e3a57611e3a61516f565b9050602002016020810190611e4f9190614c33565b6001600160a01b03168152602081019190915260400160002055868682818110611e7b57611e7b61516f565b9050602002016020810190611e909190614c33565b6001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f6868684818110611ecc57611ecc61516f565b90506020020135604051611ee291815260200190565b60405180910390a280611ef4816151b2565b915050611e03565b50505050505050565b60005b83518110156120cc576000848281518110611f2557611f2561516f565b6020908102919091018101516001600160a01b0381166000908152600990925260409091205490915060ff16611f955760405162461bcd60e51b81526020600482015260156024820152741b585c9ad95d081b5d5cdd081899481b1a5cdd1959605a1b6044820152606401610cdd565b600184151514156120625760006040518060200160405280836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200f91906152a9565b9052905061201d82826135ef565b60005b875181101561205f5761204d8389838151811061203f5761203f61516f565b6020026020010151846137e2565b80612057816151b2565b915050612020565b50505b600183151514156120b95761207681613dde565b60005b86518110156120b7576120a5828883815181106120985761209861516f565b6020026020010151613f56565b806120af816151b2565b915050612079565b505b50806120c4816151b2565b915050611f08565b5060005b84518110156105365761213a8582815181106120ee576120ee61516f565b60200260200101516014600088858151811061210c5761210c61516f565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205461398b565b601460008784815181106121505761215061516f565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080612187906151b2565b9150506120d0565b6001600160a01b0381166000908152601760209081526040808320546018909252822054909142916121c29083906135e3565b90506000811180156121d45750600083115b156106225760006121e582856141a5565b6001600160a01b0386166000908152601460205260408120549192509061220c90836135d7565b6001600160a01b0387166000908152601460209081526040808320939093556018905220849055505050505050565b600a546000906001600160a01b031633148061226157506000546001600160a01b031633145b61227d5760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b031633148061229857506001821515145b6122b45760405162461bcd60e51b8152600401610cdd9061525c565b600a8054831515600160b01b0260ff60b01b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906114d99084906040808252600890820152672a3930b739b332b960c11b6060820152901515602082015260800190565b6001600160a01b03811660009081526009602052604081206001015415801561236857506001600160a01b0382166000908152600c602052604090205460ff1615156001145b80156110595750816001600160a01b031663173b99046040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d191906152a9565b670de0b6b3a76400001492915050565b600080546001600160a01b0316331461240057611059600160126140f4565b6001600160a01b03821660009081526009602052604090205460ff161561242d57611059600a60116140f4565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561246b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248f91906152d8565b506001600160a01b03821660009081526009602052604081208054600160ff19918216811783556003830180549092169091558101919091556124d1836141b1565b6124da8361429a565b6040516001600160a01b03841681527fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f9060200161157a565b61251b613962565b6125675760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792061646d696e2063616e2073657420636f6d702073706565640000006044820152606401610cdd565b82518251811480156125795750815181145b6125d75760405162461bcd60e51b815260206004820152602960248201527f436f6d7074726f6c6c65723a3a5f736574436f6d7053706565647320696e76616044820152681b1a59081a5b9c1d5d60ba1b6064820152608401610cdd565b60005b81811015610536576126388582815181106125f7576125f761516f565b60200260200101518583815181106126115761261161516f565b602002602001015185848151811061262b5761262b61516f565b6020026020010151614356565b612641816151b2565b90506125da565b6001600160a01b03811660009081526008602090815260408083208054825181850281018501909352808352606094938301828280156126b157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612693575b5093979650505050505050565b6060600d80548060200260200160405190810160405280929190818152602001828054801561271657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116126f8575b5050505050905090565b600a54600090600160b01b900460ff16156127725760405162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c881a5cc81c185d5cd95960721b6044820152606401610cdd565b600061277f868685614535565b9050801561278e5790506112f6565b61279786613dde565b6127a18686613f56565b6112f08685613f56565b805160609060008167ffffffffffffffff8111156127cb576127cb614b04565b6040519080825280602002602001820160405280156127f4578160200160208202803683370190505b50905060005b8281101561286b5760008582815181106128165761281661516f565b6020026020010151905061282a81336145ed565b601181111561283b5761283b6152c2565b83838151811061284d5761284d61516f565b60209081029190910101525080612863816151b2565b9150506127fa565b509392505050565b6004805460405163fc57d4df60e01b81526001600160a01b03868116938201939093526000928392839291169063fc57d4df90602401602060405180830381865afa1580156128c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ea91906152a9565b6004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935292935060009291169063fc57d4df90602401602060405180830381865afa15801561293c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296091906152a9565b905081158061296d575080155b1561298157600d6000935093505050612a89565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e591906152a9565b905060006129ff6040518060200160405280600081525090565b604080516020808201835260008083528351808301855290815283518083018552600654815284519283019094528882529192612a3b916146e2565b9250612a636040518060200160405280888152506040518060200160405280888152506146e2565b9150612a6f838361472a565b9050612a7b818b61418d565b600099509750505050505050505b935093915050565b600a54600090600160b81b900460ff1615612ae05760405162461bcd60e51b815260206004820152600f60248201526e1cd95a5e99481a5cc81c185d5cd959608a1b6044820152606401610cdd565b6001600160a01b03861660009081526009602052604090205460ff161580612b2157506001600160a01b03851660009081526009602052604090205460ff16155b15612b2d576009611ba1565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8f919061528c565b6001600160a01b0316866001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfa919061528c565b6001600160a01b031614612c0f576002611ba1565b612c1886613dde565b612c228684613f56565b612c2c8685613f56565b60009695505050505050565b6001600160a01b0383166000908152600c602052604081205460ff1615612c945760405162461bcd60e51b815260206004820152601060248201526f189bdc9c9bddc81a5cc81c185d5cd95960821b6044820152606401610cdd565b6001600160a01b03841660009081526009602052604090205460ff16612cbb57600961183d565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff16612db857336001600160a01b03851614612d3c5760405162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba1031329031aa37b5b2b760591b6044820152606401610cdd565b6000612d4833856145ed565b90506000816011811115612d5e57612d5e6152c2565b14612d7d57806011811115612d7557612d756152c2565b915050611585565b6001600160a01b038086166000908152600960209081526040808320938816835260029093019052205460ff16612db657612db66152f5565b505b6004805460405163fc57d4df60e01b81526001600160a01b038781169382019390935291169063fc57d4df90602401602060405180830381865afa158015612e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2891906152a9565b612e3357600d61183d565b6001600160a01b0384166000908152601660205260409020548015612f18576000856001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb691906152a9565b90506000612ec482866135d7565b9050828110612f155760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f77206361702072656163686564000000000000006044820152606401610cdd565b50505b600080612f288688600088613ab0565b91935090915060009050826011811115612f4457612f446152c2565b14612f6557816011811115612f5b57612f5b6152c2565b9350505050611585565b8015612f72576004612f5b565b60006040518060200160405280896001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe191906152a9565b90529050612fef88826135ef565b612ffa8888836137e2565b600098975050505050505050565b6008602052816000526040600020818154811061302457600080fd5b6000918252602090912001546001600160a01b03169150829050565b600080546001600160a01b031633146130665761305f600160066140f4565b9050611059565b6001600160a01b0383166000908152600960205260409020805460ff1661309b57613093600960076140f4565b915050611059565b60408051602080820183528582528251908101909252670c7d713b49da00008252906130c981835190511090565b156130e4576130da600660086140f4565b9350505050611059565b841580159061316057506004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935291169063fc57d4df90602401602060405180830381865afa15801561313a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315e91906152a9565b155b15613171576130da600d60096140f4565b60018301805490869055604080516001600160a01b0389168152602081018390529081018790527f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59060600160405180910390a16000979650505050505050565b61123d81600d80548060200260200160405190810160405280929190818152602001828054801561322c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161320e575b505050505061105f565b600080613244858585614535565b90508015613253579050611585565b61325c85613dde565b6132668585613f56565b600095945050505050565b6040516361bfb47160e11b815233600482015260009082908290819081906001600160a01b0385169063c37f68e290602401608060405180830381865afa1580156132c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e4919061530b565b50925092509250826000146133495760405162461bcd60e51b815260206004820152602560248201527f657869744d61726b65743a206765744163636f756e74536e617073686f742066604482015264185a5b195960da1b6064820152608401610cdd565b80156133655761335b600c60026140f4565b9695505050505050565b6000613372873385614535565b9050801561339257613387600e600383614764565b979650505050505050565b6001600160a01b0385166000908152600960209081526040808320338452600281019092529091205460ff166133d057600098975050505050505050565b3360009081526002820160209081526040808320805460ff19169055600882528083208054825181850281018501909352808352919290919083018282801561344257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613424575b5050835193945083925060009150505b828110156134a757896001600160a01b03168482815181106134765761347661516f565b60200260200101516001600160a01b03161415613495578091506134a7565b8061349f816151b2565b915050613452565b508181106134b7576134b76152f5565b336000908152600860205260409020805481906134d69060019061519b565b815481106134e6576134e661516f565b9060005260206000200160009054906101000a90046001600160a01b03168183815481106135165761351661516f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080548061355457613554615341565b600082815260209020810160001990810180546001600160a01b03191690550190556040517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d906135bd908c9033906001600160a01b0392831681529116602082015260400190565b60405180910390a160009c9b505050505050505050505050565b60006115858284615357565b6000611585828461519b565b6001600160a01b038216600090815260116020908152604080832060199092528220549091613654425b6040518060400160405280601c81526020017f626c6f636b206e756d62657220657863656564732033322062697473000000008152506147dc565b83549091506000906136769063ffffffff80851691600160e01b9004166135e3565b90506000811180156136885750600083115b156137b75760006136fa876001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f491906152a9565b8761480c565b9050600061370883866141a5565b905060008083116137285760405180602001604052806000815250613732565b613732828461482a565b604080516020810190915288546001600160e01b031681529091506137959061375b9083614865565b5160408051808201909152601a81527f6e657720696e64657820657863656564732032323420626974730000000000006020820152614891565b6001600160e01b0316600160e01b63ffffffff8716021787555061063c915050565b801561063c57835463ffffffff8316600160e01b026001600160e01b03909116178455505050505050565b6001600160a01b03838116600090815260116020908152604080832080546013845282852095881685529490925290912080546001600160e01b039093169081905590918015801561384257506a0c097ce7bc90715b34b9f160241b8210155b1561385857506a0c097ce7bc90715b34b9f160241b5b6000604051806020016040528061386f85856135e3565b90526040516395dd919360e01b81526001600160a01b0388811660048301529192506000916138c291908a16906395dd919390602401602060405180830381865afa1580156136d0573d6000803e3d6000fd5b905060006138d082846148b8565b6001600160a01b038916600090815260146020526040812054919250906138f790836135d7565b6001600160a01b038a811660008181526014602090815260409182902085905581518781529081018b90529394509092918d16917f1fc3ecc087d8d2d15e23d0032af5a47059c3892d003d8e139fdcb6bb327c99a6910160405180910390a350505050505050505050565b600080546001600160a01b031633148061398657506002546001600160a01b031633145b905090565b60008073d86c8d4279ccafbec840c782bcc50d201f2774196040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156139ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1191906152a9565b9050600084118015613a235750808411155b15613aa75760405163a9059cbb60e01b81526001600160a01b0386811660048301526024820186905283169063a9059cbb906044016020604051808303816000875af1158015613a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a9b91906152d8565b50600092505050611059565b50919392505050565b6000806000613abd61494e565b6001600160a01b038816600090815260086020908152604080832080548251818502810185019093528083528493830182828015613b2457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b06575b5050505050905060005b8151811015613d88576000828281518110613b4b57613b4b61516f565b60209081029190910101516040516361bfb47160e11b81526001600160a01b038e811660048301529192509082169063c37f68e290602401608060405180830381865afa158015613ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc4919061530b565b60808901526060880152604087015293508315613bf057600f60008097509750975050505050506117b6565b60408051602080820183526001600160a01b0384811660008181526009845285902060010154845260c08a01939093528351808301855260808a0151815260e08a015260048054855163fc57d4df60e01b815291820194909452935192169263fc57d4df92602480830193928290030181865afa158015613c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9991906152a9565b60a08601819052613cb957600d60008097509750975050505050506117b6565b604080516020810190915260a0860151815261010086015260c085015160e0860151613cf391613ce8916146e2565b8661010001516146e2565b610120860181905260408601518651613d0d9291906148e1565b855261010085015160608601516020870151613d2a9291906148e1565b60208601526001600160a01b03818116908c161415613d7557613d578561012001518b87602001516148e1565b60208601819052610100860151613d6f918b906148e1565b60208601525b5080613d80816151b2565b915050613b2e565b50602083015183511115613db95760208301518351600091613da99161519b565b60009550955095505050506117b6565b60008084600001518560200151613dd0919061519b565b9550955095505050506117b6565b6001600160a01b0381166000908152601060209081526040808320601a9092528220549091613e0c42613619565b8354909150600090613e2e9063ffffffff80851691600160e01b9004166135e3565b9050600081118015613e405750600083115b15613f2c576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea991906152a9565b90506000613eb783866141a5565b90506000808311613ed75760405180602001604052806000815250613ee1565b613ee1828461482a565b604080516020810190915288546001600160e01b03168152909150613f0a9061375b9083614865565b6001600160e01b0316600160e01b63ffffffff87160217875550610536915050565b801561053657835463ffffffff8316600160e01b026001600160e01b039091161784555050505050565b6001600160a01b03828116600090815260106020908152604080832080546012845282852095871685529490925290912080546001600160e01b0390931690819055909180158015613fb657506a0c097ce7bc90715b34b9f160241b8210155b15613fcc57506a0c097ce7bc90715b34b9f160241b5b60006040518060200160405280613fe385856135e3565b90526040516370a0823160e01b81526001600160a01b0387811660048301529192506000918816906370a0823190602401602060405180830381865afa158015614031573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061405591906152a9565b9050600061406382846148b8565b6001600160a01b0388166000908152601460205260408120549192509061408a90836135d7565b6001600160a01b0389811660008181526014602090815260409182902085905581518781529081018b90529394509092918c16917f2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a910160405180910390a3505050505050505050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836011811115614129576141296152c2565b83601381111561413b5761413b6152c2565b60408051928352602083019190915260009082015260600160405180910390a1826011811115611585576115856152c2565b6000806000614180846000806000613ab0565b9250925092509193909250565b60008061419a8484614902565b90506112f68161492a565b6000611585828461536f565b60005b600d5481101561424757816001600160a01b0316600d82815481106141db576141db61516f565b6000918252602090912001546001600160a01b031614156142355760405162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08185b1c9958591e48185919195960621b6044820152606401610cdd565b8061423f816151b2565b9150506141b4565b50600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0392909216919091179055565b60006142a542613619565b6001600160a01b03831660009081526010602090815260408083206011909252909120815492935090916001600160e01b03166142fb5781546001600160e01b0319166a0c097ce7bc90715b34b9f160241b1782555b80546001600160e01b03166143295780546001600160e01b0319166a0c097ce7bc90715b34b9f160241b1781555b805463ffffffff909316600160e01b026001600160e01b0393841681179091558154909216909117905550565b6001600160a01b0383166000908152600960205260409020805460ff166143bf5760405162461bcd60e51b815260206004820152601960248201527f636f6d70206d61726b6574206973206e6f74206c6973746564000000000000006044820152606401610cdd565b6001600160a01b0384166000908152601a6020526040902054831461443d576143e784613dde565b6001600160a01b0384166000818152601a602052604090819020859055517fdeafccd0c0b768b2529f7dcbbe58e155d6023059150b7490ed4535cc3744b92d906144349086815260200190565b60405180910390a25b6001600160a01b03841660009081526019602052604090205482146106225760006040518060200160405280866001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144cb91906152a9565b905290506144d985826135ef565b6001600160a01b03851660008181526019602052604090819020859055517f20af8e791cc98f74b2d7a391c80980ca8e5aebf3d4060bf581997b6acae2e537906145269086815260200190565b60405180910390a25050505050565b6001600160a01b03831660009081526009602052604081205460ff1661455c57600961183d565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff1661459457600061183d565b6000806145a48587866000613ab0565b919350909150600090508260118111156145c0576145c06152c2565b146145e0578160118111156145d7576145d76152c2565b92505050611585565b8015612c2c5760046145d7565b6001600160a01b0382166000908152600960205260408120805460ff16614618576009915050611059565b6001600160a01b038316600090815260028201602052604090205460ff1615156001141561464a576000915050611059565b6001600160a01b03838116600081815260028401602090815260408083208054600160ff199091168117909155600883528184208054918201815584529282902090920180546001600160a01b031916948916948517905581519384528301919091527f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5910160405180910390a15060009392505050565b6040805160208101909152600081526040518060200160405280670de0b6b3a7640000614717866000015186600001516141a5565b614721919061538e565b90529392505050565b604080516020810190915260008152604051806020016040528061472161475d8660000151670de0b6b3a76400006141a5565b8551614942565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0846011811115614799576147996152c2565b8460138111156147ab576147ab6152c2565b604080519283526020830191909152810184905260600160405180910390a18360118111156112f6576112f66152c2565b60008164010000000084106148045760405162461bcd60e51b8152600401610cdd91906153b0565b509192915050565b600061158561482384670de0b6b3a76400006141a5565b8351614942565b604080516020810190915260008152604051806020016040528061472161485f866a0c097ce7bc90715b34b9f160241b6141a5565b85614942565b6040805160208101909152600081526040518060200160405280614721856000015185600001516135d7565b600081600160e01b84106148045760405162461bcd60e51b8152600401610cdd91906153b0565b60006a0c097ce7bc90715b34b9f160241b6148d78484600001516141a5565b611585919061538e565b6000806148ee8585614902565b9050611d1e6148fc8261492a565b846135d7565b60408051602081019091526000815260405180602001604052806147218560000151856141a5565b805160009061105990670de0b6b3a76400009061538e565b6000611585828461538e565b60405180610140016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200161499a6040518060200160405280600081525090565b81526020016149b56040518060200160405280600081525090565b81526020016149d06040518060200160405280600081525090565b81526020016149eb6040518060200160405280600081525090565b905290565b60008083601f840112614a0257600080fd5b50813567ffffffffffffffff811115614a1a57600080fd5b6020830191508360208260051b8501011115614a3557600080fd5b9250929050565b60008060008060408587031215614a5257600080fd5b843567ffffffffffffffff80821115614a6a57600080fd5b614a76888389016149f0565b90965094506020870135915080821115614a8f57600080fd5b50614a9c878288016149f0565b95989497509550505050565b6001600160a01b038116811461123d57600080fd5b801515811461123d57600080fd5b60008060408385031215614ade57600080fd5b8235614ae981614aa8565b91506020830135614af981614abd565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614b4357614b43614b04565b604052919050565b600067ffffffffffffffff821115614b6557614b65614b04565b5060051b60200190565b600082601f830112614b8057600080fd5b81356020614b95614b9083614b4b565b614b1a565b82815260059290921b84018101918181019086841115614bb457600080fd5b8286015b84811015614bd8578035614bcb81614aa8565b8352918301918301614bb8565b509695505050505050565b60008060408385031215614bf657600080fd5b8235614c0181614aa8565b9150602083013567ffffffffffffffff811115614c1d57600080fd5b614c2985828601614b6f565b9150509250929050565b600060208284031215614c4557600080fd5b813561158581614aa8565b600080600080600060a08688031215614c6857600080fd5b8535614c7381614aa8565b94506020860135614c8381614aa8565b93506040860135614c9381614aa8565b94979396509394606081013594506080013592915050565b60008060008060808587031215614cc157600080fd5b8435614ccc81614aa8565b93506020850135614cdc81614aa8565b92506040850135614cec81614aa8565b9396929550929360600135925050565b60008060408385031215614d0f57600080fd5b8235614d1a81614aa8565b946020939093013593505050565b600060208284031215614d3a57600080fd5b813561158581614abd565b600060208284031215614d5757600080fd5b5035919050565b60008060008060808587031215614d7457600080fd5b8435614d7f81614aa8565b93506020850135614d8f81614aa8565b93969395505050506040820135916060013590565b60008060008060008060c08789031215614dbd57600080fd5b8635614dc881614aa8565b95506020870135614dd881614aa8565b94506040870135614de881614aa8565b93506060870135614df881614aa8565b9598949750929560808101359460a0909101359350915050565b600080600060608486031215614e2757600080fd5b8335614e3281614aa8565b92506020840135614e4281614aa8565b929592945050506040919091013590565b600080600080600060a08688031215614e6b57600080fd5b8535614e7681614aa8565b94506020860135614e8681614aa8565b93506040860135614e9681614aa8565b92506060860135614ea681614aa8565b949793965091946080013592915050565b600082601f830112614ec857600080fd5b81356020614ed8614b9083614b4b565b82815260059290921b84018101918181019086841115614ef757600080fd5b8286015b84811015614bd8578035614f0e81614aa8565b8352918301918301614efb565b60008060008060808587031215614f3157600080fd5b843567ffffffffffffffff80821115614f4957600080fd5b614f5588838901614eb7565b95506020870135915080821115614f6b57600080fd5b50614f7887828801614b6f565b9350506040850135614f8981614abd565b91506060850135614f9981614abd565b939692955090935050565b60008060408385031215614fb757600080fd5b8235614fc281614aa8565b91506020830135614af981614aa8565b600082601f830112614fe357600080fd5b81356020614ff3614b9083614b4b565b82815260059290921b8401810191818101908684111561501257600080fd5b8286015b84811015614bd85780358352918301918301615016565b60008060006060848603121561504257600080fd5b833567ffffffffffffffff8082111561505a57600080fd5b61506687838801614b6f565b9450602086013591508082111561507c57600080fd5b61508887838801614fd2565b9350604086013591508082111561509e57600080fd5b506150ab86828701614fd2565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156150f65783516001600160a01b0316835292840192918401916001016150d1565b50909695505050505050565b60006020828403121561511457600080fd5b813567ffffffffffffffff81111561512b57600080fd5b6112f684828501614eb7565b6020808252825182820181905260009190848201906040850190845b818110156150f657835183529284019291840191600101615153565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156151ad576151ad615185565b500390565b60006000198214156151c6576151c6615185565b5060010190565b60208082526028908201527f63616e6e6f742070617573652061206d61726b65742074686174206973206e6f6040820152671d081b1a5cdd195960c21b606082015260800190565b60208082526027908201527f6f6e6c7920706175736520677561726469616e20616e642061646d696e2063616040820152666e20706175736560c81b606082015260800190565b6020808252601690820152756f6e6c792061646d696e2063616e20756e706175736560501b604082015260600190565b60006020828403121561529e57600080fd5b815161158581614aa8565b6000602082840312156152bb57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156152ea57600080fd5b815161158581614abd565b634e487b7160e01b600052600160045260246000fd5b6000806000806080858703121561532157600080fd5b505082516020840151604085015160609095015191969095509092509050565b634e487b7160e01b600052603160045260246000fd5b6000821982111561536a5761536a615185565b500190565b600081600019048311821515161561538957615389615185565b500290565b6000826153ab57634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b818110156153dd578581018301518582016040015282016153c1565b818111156153ef576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220e8ebe49b2e7b498ccb9b786dc415308a311b4018cfe83d434e848377b0108e7964736f6c634300080a0033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061048a5760003560e01c8063731f0c2b11610262578063b21be7fd11610151578063dce15449116100ce578063e9af029211610092578063e9af029214610c04578063eabe7d9114610c17578063ede4edd014610c2a578063f00a7a9214610c3d578063f4a433c014610c4a578063f851a44014610c6a57600080fd5b8063dce1544914610bae578063dcfbc0c714610bc1578063e4028eee14610bd4578063e6653f3d14610be7578063e875544614610bfb57600080fd5b8063c488847b11610115578063c488847b14610b15578063ca0af04314610b3d578063cc7ebdc414610b68578063d02f735114610b88578063da3d454c14610b9b57600080fd5b8063b21be7fd14610a84578063bb82aa5e14610aaf578063bdcdc25814610ac2578063bea6b8b814610ad5578063c299823814610af557600080fd5b806394b2294b116101df578063a8b43948116101a3578063a8b4394814610a2c578063aa90075414610a3f578063abfceffc14610a48578063ac0b0bb714610a68578063b0772d0b14610a7c57600080fd5b806394b2294b146109a9578063986ab838146109b25780639d1b5a0a146109d2578063a76b3fda146109ec578063a7f0e231146109ff57600080fd5b80638c57804e116102265780638c57804e146108b75780638e8f294b146108ef5780638ebf636414610942578063929fe9a11461095557806394543c151461099657600080fd5b8063731f0c2b1461083a578063741b25251461085d5780637dc0d1d01461087057806385b7beb81461088357806387f76303146108a357600080fd5b80634a5844321161037e5780635ec88c79116102fb5780636a56947e116102bf5780636a56947e1461077f5780636aa875b51461078d5780636b79c38d146107ad5780636d154ea5146108095780636d35bf911461082c57600080fd5b80635ec88c79146107205780635f5af1aa146107335780635fc7e71e14610746578063607ef6c1146107595780636810dfa61461076c57600080fd5b806351dff9891161034257806351dff989146106c157806352d84d1e146106d457806355ee1fe1146106e7578063598ee1cb146106fa5780635c7786051461070d57600080fd5b80634a584432146106445780634ada90af146106645780634e79238f1461066d5780634ef4c3e11461069b5780634fd42e17146106ae57600080fd5b8063267822471161040c5780633bcf7ec1116103d05780633bcf7ec1146105ed5780633c94786f1461060057806341c728b91461061457806342cbb15c1461062857806347ef3b3b1461062e57600080fd5b8063267822471461058e57806327efe3cb146105a15780632d70db78146105b4578063317b0b77146105c7578063391957d7146105da57600080fd5b80631d7b33d7116104535780631d7b33d7146104fa5780631ededc911461052857806321af45691461053d57806324008a621461056857806324a3d6221461057b57600080fd5b80627e3dd21461048f57806316b95e8f146104ac57806318c882a5146104c15780631c3db2e0146104d45780631d504dc6146104e7575b600080fd5b610497600181565b60405190151581526020015b60405180910390f35b6104bf6104ba366004614a3c565b610c7d565b005b6104976104cf366004614acb565b610f26565b6104bf6104e2366004614be3565b61105f565b6104bf6104f5366004614c33565b6110c2565b61051a610508366004614c33565b600f6020526000908152604090205481565b6040519081526020016104a3565b6104bf610536366004614c50565b5050505050565b601554610550906001600160a01b031681565b6040516001600160a01b0390911681526020016104a3565b61051a610576366004614cab565b611240565b600a54610550906001600160a01b031681565b600154610550906001600160a01b031681565b6104bf6105af366004614cfc565b6112fe565b6104976105c2366004614d28565b6113f5565b61051a6105d5366004614d45565b6114e5565b6104bf6105e8366004614c33565b61158c565b6104976105fb366004614acb565b611656565b600a5461049790600160a01b900460ff1681565b6104bf610622366004614d5e565b50505050565b4261051a565b6104bf61063c366004614da4565b505050505050565b61051a610652366004614c33565b60166020526000908152604090205481565b61051a60065481565b61068061067b366004614d5e565b611780565b604080519384526020840192909252908201526060016104a3565b61051a6106a9366004614e12565b6117c0565b61051a6106bc366004614d45565b611861565b6104bf6106cf366004614d5e565b6118be565b6105506106e2366004614d45565b61190d565b61051a6106f5366004614c33565b611937565b6104bf610708366004614cfc565b6119b0565b6104bf61071b366004614e12565b505050565b61068061072e366004614c33565b611aa4565b61051a610741366004614c33565b611adf565b61051a610754366004614e53565b611b58565b6104bf610767366004614a3c565b611d27565b6104bf61077a366004614f1b565b611f05565b6104bf610622366004614cab565b61051a61079b366004614c33565b601a6020526000908152604090205481565b6107e56107bb366004614c33565b6010602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604080516001600160e01b03909316835263ffffffff9091166020830152016104a3565b610497610817366004614c33565b600c6020526000908152604090205460ff1681565b6104bf610536366004614e53565b610497610848366004614c33565b600b6020526000908152604090205460ff1681565b6104bf61086b366004614c33565b61218f565b600454610550906001600160a01b031681565b61051a610891366004614c33565b601c6020526000908152604090205481565b600a5461049790600160b01b900460ff1681565b6107e56108c5366004614c33565b6011602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b6109236108fd366004614c33565b60096020526000908152604090208054600182015460039092015460ff91821692911683565b60408051931515845260208401929092521515908201526060016104a3565b610497610950366004614d28565b61223b565b610497610963366004614fa4565b6001600160a01b038082166000908152600960209081526040808320938616835260029093019052205460ff1692915050565b6104976109a4366004614c33565b612322565b61051a60075481565b61051a6109c0366004614c33565b60176020526000908152604090205481565b73d86c8d4279ccafbec840c782bcc50d201f277419610550565b61051a6109fa366004614c33565b6123e1565b610a146a0c097ce7bc90715b34b9f160241b81565b6040516001600160e01b0390911681526020016104a3565b6104bf610a3a36600461502d565b612513565b61051a600e5481565b610a5b610a56366004614c33565b612648565b6040516104a391906150b5565b600a5461049790600160b81b900460ff1681565b610a5b6126be565b61051a610a92366004614fa4565b601260209081526000928352604080842090915290825290205481565b600254610550906001600160a01b031681565b61051a610ad0366004614cab565b612720565b61051a610ae3366004614c33565b60186020526000908152604090205481565b610b08610b03366004615102565b6127ab565b6040516104a39190615137565b610b28610b23366004614e12565b612873565b604080519283526020830191909152016104a3565b61051a610b4b366004614fa4565b601360209081526000928352604080842090915290825290205481565b61051a610b76366004614c33565b60146020526000908152604090205481565b61051a610b96366004614e53565b612a91565b61051a610ba9366004614e12565b612c38565b610550610bbc366004614cfc565b613008565b600354610550906001600160a01b031681565b61051a610be2366004614cfc565b613040565b600a5461049790600160a81b900460ff1681565b61051a60055481565b6104bf610c12366004614c33565b6131d2565b61051a610c25366004614e12565b613236565b61051a610c38366004614c33565b613271565b601b546104979060ff1681565b61051a610c58366004614c33565b60196020526000908152604090205481565b600054610550906001600160a01b031681565b6000546001600160a01b03163314610ce65760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b60648201526084015b60405180910390fd5b601b5460ff1615610d485760405162461bcd60e51b815260206004820152602660248201527f416c72656164792065786563757465642074686973206f6e652d6f66662066756044820152653731ba34b7b760d11b6064820152608401610cdd565b828114610d875760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081a5b9c1d5d609a1b6044820152606401610cdd565b60008060008060005b87811015610f0e57888882818110610daa57610daa61516f565b9050602002016020810190610dbf9190614c33565b6001600160a01b0381166000908152601460205260409020549095509350868682818110610def57610def61516f565b90506020020135925083831115610e93576000610e0c858561519b565b6001600160a01b0387166000908152601c6020526040812054919250610e3282846135d7565b6001600160a01b0389166000818152601c6020908152604091829020849055815186815290810184905292935090917f17fea09d9a7ca41b2f9f9118f18f44848a62e9c70d55dd4385131eb2cf1b7e47910160405180910390a28695505050505b8215610efe57610ea384846135e3565b6001600160a01b038616600081815260146020908152604091829020849055815188815290810184905292945090917f4a5c134e28b537a76546993ea37f3b60d9190476df7356d3842aa40902e20f04910160405180910390a25b610f07816151b2565b9050610d90565b5050601b805460ff1916600117905550505050505050565b6001600160a01b03821660009081526009602052604081205460ff16610f5e5760405162461bcd60e51b8152600401610cdd906151cd565b600a546001600160a01b0316331480610f8157506000546001600160a01b031633145b610f9d5760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b0316331480610fb857506001821515145b610fd45760405162461bcd60e51b8152600401610cdd9061525c565b6001600160a01b0383166000818152600c6020908152604091829020805460ff19168615159081179091558251938452606091840182905260069184019190915265426f72726f7760d01b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a0015b60405180910390a150805b92915050565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106110955761109561516f565b60200260200101906001600160a01b031690816001600160a01b03168152505061071b8183600180611f05565b806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611100573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611124919061528c565b6001600160a01b0316336001600160a01b0316146111945760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676560448201526620627261696e7360c81b6064820152608401610cdd565b806001600160a01b031663c1e803346040518163ffffffff1660e01b81526004016020604051808303816000875af11580156111d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f891906152a9565b1561123d5760405162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b6044820152606401610cdd565b50565b6001600160a01b03841660009081526009602052604081205460ff16611268575060096112f6565b60006040518060200160405280876001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d791906152a9565b905290506112e586826135ef565b6112f08685836137e2565b60009150505b949350505050565b611306613962565b6113525760405162461bcd60e51b815260206004820152601960248201527f6f6e6c792061646d696e2063616e206772616e7420636f6d70000000000000006044820152606401610cdd565b600061135e838361398b565b905080156113ae5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420636f6d7020666f72206772616e7400000000006044820152606401610cdd565b604080516001600160a01b0385168152602081018490527f98b2f82a3a07f223a0be64b3d0f47711c64dccd1feafb94aa28156b38cd9695c910160405180910390a1505050565b600a546000906001600160a01b031633148061141b57506000546001600160a01b031633145b6114375760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b031633148061145257506001821515145b61146e5760405162461bcd60e51b8152600401610cdd9061525c565b600a8054831515600160b81b0260ff60b81b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906114d99084906040808252600590820152645365697a6560d81b6060820152901515602082015260800190565b60405180910390a15090565b600080546001600160a01b031633146115405760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792061646d696e2063616e2073657420636c6f736520666163746f72006044820152606401610cdd565b600580549083905560408051828152602081018590527f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd991015b60405180910390a160005b9392505050565b6000546001600160a01b031633146115f55760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792061646d696e2063616e2073657420626f72726f772063617020677560448201526530b93234b0b760d11b6064820152608401610cdd565b601580546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527feda98690e518e9a05f8ec6837663e188211b2da8f4906648b323f2c1d4434e29910160405180910390a15050565b6001600160a01b03821660009081526009602052604081205460ff1661168e5760405162461bcd60e51b8152600401610cdd906151cd565b600a546001600160a01b03163314806116b157506000546001600160a01b031633145b6116cd5760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b03163314806116e857506001821515145b6117045760405162461bcd60e51b8152600401610cdd9061525c565b6001600160a01b0383166000818152600b6020908152604091829020805460ff19168615159081179091558251938452606091840182905260049184019190915263135a5b9d60e21b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a00161104e565b6000806000806000806117958a8a8a8a613ab0565b9250925092508260118111156117ad576117ad6152c2565b95509093509150505b9450945094915050565b6001600160a01b0383166000908152600b602052604081205460ff161561181a5760405162461bcd60e51b815260206004820152600e60248201526d1b5a5b9d081a5cc81c185d5cd95960921b6044820152606401610cdd565b6001600160a01b03841660009081526009602052604090205460ff166118445760095b9050611585565b61184d84613dde565b6118578484613f56565b6000949350505050565b600080546001600160a01b03163314611880576110596001600b6140f4565b600680549083905560408051828152602081018590527faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec1316910161157a565b801580156118cc5750600082115b156106225760405162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b6044820152606401610cdd565b600d818154811061191d57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546001600160a01b0316331461195657611059600160106140f4565b600480546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e22910161157a565b6119b8613962565b611a045760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792061646d696e2063616e2073657420636f6d702073706565640000006044820152606401610cdd565b611a0d8261218f565b80611a30576001600160a01b038216600090815260186020526040812055611a4b565b426001600160a01b0383166000908152601860205260409020555b6001600160a01b03821660008181526017602052604090819020839055517f386537fa92edc3319af95f1f904dcf1900021e4f3f4e08169a577a09076e66b390611a989084815260200190565b60405180910390a25050565b600080600080600080611abb876000806000613ab0565b925092509250826011811115611ad357611ad36152c2565b97919650945092505050565b600080546001600160a01b03163314611afe57611059600160136140f4565b600a80546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e910161157a565b6001600160a01b03851660009081526009602052604081205460ff161580611b9957506001600160a01b03851660009081526009602052604090205460ff16155b15611ba85760095b9050611d1e565b6040516395dd919360e01b81526001600160a01b038481166004830152600091908816906395dd919390602401602060405180830381865afa158015611bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1691906152a9565b9050611c2187612322565b15611c8c5782811015611c875760405162461bcd60e51b815260206004820152602860248201527f43616e206e6f74207265706179206d6f7265207468616e2074686520746f74616044820152676c20626f72726f7760c01b6064820152608401610cdd565b611d18565b600080611c988661416d565b91935090915060009050826011811115611cb457611cb46152c2565b14611cd557816011811115611ccb57611ccb6152c2565b9350505050611d1e565b80611ce1576003611ccb565b6000611cfd60405180602001604052806005548152508561418d565b905080861115611d14576011945050505050611d1e565b5050505b60009150505b95945050505050565b6000546001600160a01b0316331480611d4a57506015546001600160a01b031633145b611db45760405162461bcd60e51b815260206004820152603560248201527f6f6e6c792061646d696e206f7220626f72726f772063617020677561726469616044820152746e2063616e2073657420626f72726f77206361707360581b6064820152608401610cdd565b82818115801590611dc457508082145b611e005760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610cdd565b60005b82811015611efc57848482818110611e1d57611e1d61516f565b9050602002013560166000898985818110611e3a57611e3a61516f565b9050602002016020810190611e4f9190614c33565b6001600160a01b03168152602081019190915260400160002055868682818110611e7b57611e7b61516f565b9050602002016020810190611e909190614c33565b6001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f6868684818110611ecc57611ecc61516f565b90506020020135604051611ee291815260200190565b60405180910390a280611ef4816151b2565b915050611e03565b50505050505050565b60005b83518110156120cc576000848281518110611f2557611f2561516f565b6020908102919091018101516001600160a01b0381166000908152600990925260409091205490915060ff16611f955760405162461bcd60e51b81526020600482015260156024820152741b585c9ad95d081b5d5cdd081899481b1a5cdd1959605a1b6044820152606401610cdd565b600184151514156120625760006040518060200160405280836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200f91906152a9565b9052905061201d82826135ef565b60005b875181101561205f5761204d8389838151811061203f5761203f61516f565b6020026020010151846137e2565b80612057816151b2565b915050612020565b50505b600183151514156120b95761207681613dde565b60005b86518110156120b7576120a5828883815181106120985761209861516f565b6020026020010151613f56565b806120af816151b2565b915050612079565b505b50806120c4816151b2565b915050611f08565b5060005b84518110156105365761213a8582815181106120ee576120ee61516f565b60200260200101516014600088858151811061210c5761210c61516f565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205461398b565b601460008784815181106121505761215061516f565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080612187906151b2565b9150506120d0565b6001600160a01b0381166000908152601760209081526040808320546018909252822054909142916121c29083906135e3565b90506000811180156121d45750600083115b156106225760006121e582856141a5565b6001600160a01b0386166000908152601460205260408120549192509061220c90836135d7565b6001600160a01b0387166000908152601460209081526040808320939093556018905220849055505050505050565b600a546000906001600160a01b031633148061226157506000546001600160a01b031633145b61227d5760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b031633148061229857506001821515145b6122b45760405162461bcd60e51b8152600401610cdd9061525c565b600a8054831515600160b01b0260ff60b01b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906114d99084906040808252600890820152672a3930b739b332b960c11b6060820152901515602082015260800190565b6001600160a01b03811660009081526009602052604081206001015415801561236857506001600160a01b0382166000908152600c602052604090205460ff1615156001145b80156110595750816001600160a01b031663173b99046040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d191906152a9565b670de0b6b3a76400001492915050565b600080546001600160a01b0316331461240057611059600160126140f4565b6001600160a01b03821660009081526009602052604090205460ff161561242d57611059600a60116140f4565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561246b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248f91906152d8565b506001600160a01b03821660009081526009602052604081208054600160ff19918216811783556003830180549092169091558101919091556124d1836141b1565b6124da8361429a565b6040516001600160a01b03841681527fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f9060200161157a565b61251b613962565b6125675760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792061646d696e2063616e2073657420636f6d702073706565640000006044820152606401610cdd565b82518251811480156125795750815181145b6125d75760405162461bcd60e51b815260206004820152602960248201527f436f6d7074726f6c6c65723a3a5f736574436f6d7053706565647320696e76616044820152681b1a59081a5b9c1d5d60ba1b6064820152608401610cdd565b60005b81811015610536576126388582815181106125f7576125f761516f565b60200260200101518583815181106126115761261161516f565b602002602001015185848151811061262b5761262b61516f565b6020026020010151614356565b612641816151b2565b90506125da565b6001600160a01b03811660009081526008602090815260408083208054825181850281018501909352808352606094938301828280156126b157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612693575b5093979650505050505050565b6060600d80548060200260200160405190810160405280929190818152602001828054801561271657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116126f8575b5050505050905090565b600a54600090600160b01b900460ff16156127725760405162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c881a5cc81c185d5cd95960721b6044820152606401610cdd565b600061277f868685614535565b9050801561278e5790506112f6565b61279786613dde565b6127a18686613f56565b6112f08685613f56565b805160609060008167ffffffffffffffff8111156127cb576127cb614b04565b6040519080825280602002602001820160405280156127f4578160200160208202803683370190505b50905060005b8281101561286b5760008582815181106128165761281661516f565b6020026020010151905061282a81336145ed565b601181111561283b5761283b6152c2565b83838151811061284d5761284d61516f565b60209081029190910101525080612863816151b2565b9150506127fa565b509392505050565b6004805460405163fc57d4df60e01b81526001600160a01b03868116938201939093526000928392839291169063fc57d4df90602401602060405180830381865afa1580156128c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ea91906152a9565b6004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935292935060009291169063fc57d4df90602401602060405180830381865afa15801561293c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296091906152a9565b905081158061296d575080155b1561298157600d6000935093505050612a89565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e591906152a9565b905060006129ff6040518060200160405280600081525090565b604080516020808201835260008083528351808301855290815283518083018552600654815284519283019094528882529192612a3b916146e2565b9250612a636040518060200160405280888152506040518060200160405280888152506146e2565b9150612a6f838361472a565b9050612a7b818b61418d565b600099509750505050505050505b935093915050565b600a54600090600160b81b900460ff1615612ae05760405162461bcd60e51b815260206004820152600f60248201526e1cd95a5e99481a5cc81c185d5cd959608a1b6044820152606401610cdd565b6001600160a01b03861660009081526009602052604090205460ff161580612b2157506001600160a01b03851660009081526009602052604090205460ff16155b15612b2d576009611ba1565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8f919061528c565b6001600160a01b0316866001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfa919061528c565b6001600160a01b031614612c0f576002611ba1565b612c1886613dde565b612c228684613f56565b612c2c8685613f56565b60009695505050505050565b6001600160a01b0383166000908152600c602052604081205460ff1615612c945760405162461bcd60e51b815260206004820152601060248201526f189bdc9c9bddc81a5cc81c185d5cd95960821b6044820152606401610cdd565b6001600160a01b03841660009081526009602052604090205460ff16612cbb57600961183d565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff16612db857336001600160a01b03851614612d3c5760405162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba1031329031aa37b5b2b760591b6044820152606401610cdd565b6000612d4833856145ed565b90506000816011811115612d5e57612d5e6152c2565b14612d7d57806011811115612d7557612d756152c2565b915050611585565b6001600160a01b038086166000908152600960209081526040808320938816835260029093019052205460ff16612db657612db66152f5565b505b6004805460405163fc57d4df60e01b81526001600160a01b038781169382019390935291169063fc57d4df90602401602060405180830381865afa158015612e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2891906152a9565b612e3357600d61183d565b6001600160a01b0384166000908152601660205260409020548015612f18576000856001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb691906152a9565b90506000612ec482866135d7565b9050828110612f155760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f77206361702072656163686564000000000000006044820152606401610cdd565b50505b600080612f288688600088613ab0565b91935090915060009050826011811115612f4457612f446152c2565b14612f6557816011811115612f5b57612f5b6152c2565b9350505050611585565b8015612f72576004612f5b565b60006040518060200160405280896001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe191906152a9565b90529050612fef88826135ef565b612ffa8888836137e2565b600098975050505050505050565b6008602052816000526040600020818154811061302457600080fd5b6000918252602090912001546001600160a01b03169150829050565b600080546001600160a01b031633146130665761305f600160066140f4565b9050611059565b6001600160a01b0383166000908152600960205260409020805460ff1661309b57613093600960076140f4565b915050611059565b60408051602080820183528582528251908101909252670c7d713b49da00008252906130c981835190511090565b156130e4576130da600660086140f4565b9350505050611059565b841580159061316057506004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935291169063fc57d4df90602401602060405180830381865afa15801561313a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315e91906152a9565b155b15613171576130da600d60096140f4565b60018301805490869055604080516001600160a01b0389168152602081018390529081018790527f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59060600160405180910390a16000979650505050505050565b61123d81600d80548060200260200160405190810160405280929190818152602001828054801561322c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161320e575b505050505061105f565b600080613244858585614535565b90508015613253579050611585565b61325c85613dde565b6132668585613f56565b600095945050505050565b6040516361bfb47160e11b815233600482015260009082908290819081906001600160a01b0385169063c37f68e290602401608060405180830381865afa1580156132c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e4919061530b565b50925092509250826000146133495760405162461bcd60e51b815260206004820152602560248201527f657869744d61726b65743a206765744163636f756e74536e617073686f742066604482015264185a5b195960da1b6064820152608401610cdd565b80156133655761335b600c60026140f4565b9695505050505050565b6000613372873385614535565b9050801561339257613387600e600383614764565b979650505050505050565b6001600160a01b0385166000908152600960209081526040808320338452600281019092529091205460ff166133d057600098975050505050505050565b3360009081526002820160209081526040808320805460ff19169055600882528083208054825181850281018501909352808352919290919083018282801561344257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613424575b5050835193945083925060009150505b828110156134a757896001600160a01b03168482815181106134765761347661516f565b60200260200101516001600160a01b03161415613495578091506134a7565b8061349f816151b2565b915050613452565b508181106134b7576134b76152f5565b336000908152600860205260409020805481906134d69060019061519b565b815481106134e6576134e661516f565b9060005260206000200160009054906101000a90046001600160a01b03168183815481106135165761351661516f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080548061355457613554615341565b600082815260209020810160001990810180546001600160a01b03191690550190556040517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d906135bd908c9033906001600160a01b0392831681529116602082015260400190565b60405180910390a160009c9b505050505050505050505050565b60006115858284615357565b6000611585828461519b565b6001600160a01b038216600090815260116020908152604080832060199092528220549091613654425b6040518060400160405280601c81526020017f626c6f636b206e756d62657220657863656564732033322062697473000000008152506147dc565b83549091506000906136769063ffffffff80851691600160e01b9004166135e3565b90506000811180156136885750600083115b156137b75760006136fa876001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f491906152a9565b8761480c565b9050600061370883866141a5565b905060008083116137285760405180602001604052806000815250613732565b613732828461482a565b604080516020810190915288546001600160e01b031681529091506137959061375b9083614865565b5160408051808201909152601a81527f6e657720696e64657820657863656564732032323420626974730000000000006020820152614891565b6001600160e01b0316600160e01b63ffffffff8716021787555061063c915050565b801561063c57835463ffffffff8316600160e01b026001600160e01b03909116178455505050505050565b6001600160a01b03838116600090815260116020908152604080832080546013845282852095881685529490925290912080546001600160e01b039093169081905590918015801561384257506a0c097ce7bc90715b34b9f160241b8210155b1561385857506a0c097ce7bc90715b34b9f160241b5b6000604051806020016040528061386f85856135e3565b90526040516395dd919360e01b81526001600160a01b0388811660048301529192506000916138c291908a16906395dd919390602401602060405180830381865afa1580156136d0573d6000803e3d6000fd5b905060006138d082846148b8565b6001600160a01b038916600090815260146020526040812054919250906138f790836135d7565b6001600160a01b038a811660008181526014602090815260409182902085905581518781529081018b90529394509092918d16917f1fc3ecc087d8d2d15e23d0032af5a47059c3892d003d8e139fdcb6bb327c99a6910160405180910390a350505050505050505050565b600080546001600160a01b031633148061398657506002546001600160a01b031633145b905090565b60008073d86c8d4279ccafbec840c782bcc50d201f2774196040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156139ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1191906152a9565b9050600084118015613a235750808411155b15613aa75760405163a9059cbb60e01b81526001600160a01b0386811660048301526024820186905283169063a9059cbb906044016020604051808303816000875af1158015613a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a9b91906152d8565b50600092505050611059565b50919392505050565b6000806000613abd61494e565b6001600160a01b038816600090815260086020908152604080832080548251818502810185019093528083528493830182828015613b2457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b06575b5050505050905060005b8151811015613d88576000828281518110613b4b57613b4b61516f565b60209081029190910101516040516361bfb47160e11b81526001600160a01b038e811660048301529192509082169063c37f68e290602401608060405180830381865afa158015613ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc4919061530b565b60808901526060880152604087015293508315613bf057600f60008097509750975050505050506117b6565b60408051602080820183526001600160a01b0384811660008181526009845285902060010154845260c08a01939093528351808301855260808a0151815260e08a015260048054855163fc57d4df60e01b815291820194909452935192169263fc57d4df92602480830193928290030181865afa158015613c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9991906152a9565b60a08601819052613cb957600d60008097509750975050505050506117b6565b604080516020810190915260a0860151815261010086015260c085015160e0860151613cf391613ce8916146e2565b8661010001516146e2565b610120860181905260408601518651613d0d9291906148e1565b855261010085015160608601516020870151613d2a9291906148e1565b60208601526001600160a01b03818116908c161415613d7557613d578561012001518b87602001516148e1565b60208601819052610100860151613d6f918b906148e1565b60208601525b5080613d80816151b2565b915050613b2e565b50602083015183511115613db95760208301518351600091613da99161519b565b60009550955095505050506117b6565b60008084600001518560200151613dd0919061519b565b9550955095505050506117b6565b6001600160a01b0381166000908152601060209081526040808320601a9092528220549091613e0c42613619565b8354909150600090613e2e9063ffffffff80851691600160e01b9004166135e3565b9050600081118015613e405750600083115b15613f2c576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea991906152a9565b90506000613eb783866141a5565b90506000808311613ed75760405180602001604052806000815250613ee1565b613ee1828461482a565b604080516020810190915288546001600160e01b03168152909150613f0a9061375b9083614865565b6001600160e01b0316600160e01b63ffffffff87160217875550610536915050565b801561053657835463ffffffff8316600160e01b026001600160e01b039091161784555050505050565b6001600160a01b03828116600090815260106020908152604080832080546012845282852095871685529490925290912080546001600160e01b0390931690819055909180158015613fb657506a0c097ce7bc90715b34b9f160241b8210155b15613fcc57506a0c097ce7bc90715b34b9f160241b5b60006040518060200160405280613fe385856135e3565b90526040516370a0823160e01b81526001600160a01b0387811660048301529192506000918816906370a0823190602401602060405180830381865afa158015614031573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061405591906152a9565b9050600061406382846148b8565b6001600160a01b0388166000908152601460205260408120549192509061408a90836135d7565b6001600160a01b0389811660008181526014602090815260409182902085905581518781529081018b90529394509092918c16917f2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a910160405180910390a3505050505050505050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836011811115614129576141296152c2565b83601381111561413b5761413b6152c2565b60408051928352602083019190915260009082015260600160405180910390a1826011811115611585576115856152c2565b6000806000614180846000806000613ab0565b9250925092509193909250565b60008061419a8484614902565b90506112f68161492a565b6000611585828461536f565b60005b600d5481101561424757816001600160a01b0316600d82815481106141db576141db61516f565b6000918252602090912001546001600160a01b031614156142355760405162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08185b1c9958591e48185919195960621b6044820152606401610cdd565b8061423f816151b2565b9150506141b4565b50600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0392909216919091179055565b60006142a542613619565b6001600160a01b03831660009081526010602090815260408083206011909252909120815492935090916001600160e01b03166142fb5781546001600160e01b0319166a0c097ce7bc90715b34b9f160241b1782555b80546001600160e01b03166143295780546001600160e01b0319166a0c097ce7bc90715b34b9f160241b1781555b805463ffffffff909316600160e01b026001600160e01b0393841681179091558154909216909117905550565b6001600160a01b0383166000908152600960205260409020805460ff166143bf5760405162461bcd60e51b815260206004820152601960248201527f636f6d70206d61726b6574206973206e6f74206c6973746564000000000000006044820152606401610cdd565b6001600160a01b0384166000908152601a6020526040902054831461443d576143e784613dde565b6001600160a01b0384166000818152601a602052604090819020859055517fdeafccd0c0b768b2529f7dcbbe58e155d6023059150b7490ed4535cc3744b92d906144349086815260200190565b60405180910390a25b6001600160a01b03841660009081526019602052604090205482146106225760006040518060200160405280866001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144cb91906152a9565b905290506144d985826135ef565b6001600160a01b03851660008181526019602052604090819020859055517f20af8e791cc98f74b2d7a391c80980ca8e5aebf3d4060bf581997b6acae2e537906145269086815260200190565b60405180910390a25050505050565b6001600160a01b03831660009081526009602052604081205460ff1661455c57600961183d565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff1661459457600061183d565b6000806145a48587866000613ab0565b919350909150600090508260118111156145c0576145c06152c2565b146145e0578160118111156145d7576145d76152c2565b92505050611585565b8015612c2c5760046145d7565b6001600160a01b0382166000908152600960205260408120805460ff16614618576009915050611059565b6001600160a01b038316600090815260028201602052604090205460ff1615156001141561464a576000915050611059565b6001600160a01b03838116600081815260028401602090815260408083208054600160ff199091168117909155600883528184208054918201815584529282902090920180546001600160a01b031916948916948517905581519384528301919091527f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5910160405180910390a15060009392505050565b6040805160208101909152600081526040518060200160405280670de0b6b3a7640000614717866000015186600001516141a5565b614721919061538e565b90529392505050565b604080516020810190915260008152604051806020016040528061472161475d8660000151670de0b6b3a76400006141a5565b8551614942565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0846011811115614799576147996152c2565b8460138111156147ab576147ab6152c2565b604080519283526020830191909152810184905260600160405180910390a18360118111156112f6576112f66152c2565b60008164010000000084106148045760405162461bcd60e51b8152600401610cdd91906153b0565b509192915050565b600061158561482384670de0b6b3a76400006141a5565b8351614942565b604080516020810190915260008152604051806020016040528061472161485f866a0c097ce7bc90715b34b9f160241b6141a5565b85614942565b6040805160208101909152600081526040518060200160405280614721856000015185600001516135d7565b600081600160e01b84106148045760405162461bcd60e51b8152600401610cdd91906153b0565b60006a0c097ce7bc90715b34b9f160241b6148d78484600001516141a5565b611585919061538e565b6000806148ee8585614902565b9050611d1e6148fc8261492a565b846135d7565b60408051602081019091526000815260405180602001604052806147218560000151856141a5565b805160009061105990670de0b6b3a76400009061538e565b6000611585828461538e565b60405180610140016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200161499a6040518060200160405280600081525090565b81526020016149b56040518060200160405280600081525090565b81526020016149d06040518060200160405280600081525090565b81526020016149eb6040518060200160405280600081525090565b905290565b60008083601f840112614a0257600080fd5b50813567ffffffffffffffff811115614a1a57600080fd5b6020830191508360208260051b8501011115614a3557600080fd5b9250929050565b60008060008060408587031215614a5257600080fd5b843567ffffffffffffffff80821115614a6a57600080fd5b614a76888389016149f0565b90965094506020870135915080821115614a8f57600080fd5b50614a9c878288016149f0565b95989497509550505050565b6001600160a01b038116811461123d57600080fd5b801515811461123d57600080fd5b60008060408385031215614ade57600080fd5b8235614ae981614aa8565b91506020830135614af981614abd565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614b4357614b43614b04565b604052919050565b600067ffffffffffffffff821115614b6557614b65614b04565b5060051b60200190565b600082601f830112614b8057600080fd5b81356020614b95614b9083614b4b565b614b1a565b82815260059290921b84018101918181019086841115614bb457600080fd5b8286015b84811015614bd8578035614bcb81614aa8565b8352918301918301614bb8565b509695505050505050565b60008060408385031215614bf657600080fd5b8235614c0181614aa8565b9150602083013567ffffffffffffffff811115614c1d57600080fd5b614c2985828601614b6f565b9150509250929050565b600060208284031215614c4557600080fd5b813561158581614aa8565b600080600080600060a08688031215614c6857600080fd5b8535614c7381614aa8565b94506020860135614c8381614aa8565b93506040860135614c9381614aa8565b94979396509394606081013594506080013592915050565b60008060008060808587031215614cc157600080fd5b8435614ccc81614aa8565b93506020850135614cdc81614aa8565b92506040850135614cec81614aa8565b9396929550929360600135925050565b60008060408385031215614d0f57600080fd5b8235614d1a81614aa8565b946020939093013593505050565b600060208284031215614d3a57600080fd5b813561158581614abd565b600060208284031215614d5757600080fd5b5035919050565b60008060008060808587031215614d7457600080fd5b8435614d7f81614aa8565b93506020850135614d8f81614aa8565b93969395505050506040820135916060013590565b60008060008060008060c08789031215614dbd57600080fd5b8635614dc881614aa8565b95506020870135614dd881614aa8565b94506040870135614de881614aa8565b93506060870135614df881614aa8565b9598949750929560808101359460a0909101359350915050565b600080600060608486031215614e2757600080fd5b8335614e3281614aa8565b92506020840135614e4281614aa8565b929592945050506040919091013590565b600080600080600060a08688031215614e6b57600080fd5b8535614e7681614aa8565b94506020860135614e8681614aa8565b93506040860135614e9681614aa8565b92506060860135614ea681614aa8565b949793965091946080013592915050565b600082601f830112614ec857600080fd5b81356020614ed8614b9083614b4b565b82815260059290921b84018101918181019086841115614ef757600080fd5b8286015b84811015614bd8578035614f0e81614aa8565b8352918301918301614efb565b60008060008060808587031215614f3157600080fd5b843567ffffffffffffffff80821115614f4957600080fd5b614f5588838901614eb7565b95506020870135915080821115614f6b57600080fd5b50614f7887828801614b6f565b9350506040850135614f8981614abd565b91506060850135614f9981614abd565b939692955090935050565b60008060408385031215614fb757600080fd5b8235614fc281614aa8565b91506020830135614af981614aa8565b600082601f830112614fe357600080fd5b81356020614ff3614b9083614b4b565b82815260059290921b8401810191818101908684111561501257600080fd5b8286015b84811015614bd85780358352918301918301615016565b60008060006060848603121561504257600080fd5b833567ffffffffffffffff8082111561505a57600080fd5b61506687838801614b6f565b9450602086013591508082111561507c57600080fd5b61508887838801614fd2565b9350604086013591508082111561509e57600080fd5b506150ab86828701614fd2565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156150f65783516001600160a01b0316835292840192918401916001016150d1565b50909695505050505050565b60006020828403121561511457600080fd5b813567ffffffffffffffff81111561512b57600080fd5b6112f684828501614eb7565b6020808252825182820181905260009190848201906040850190845b818110156150f657835183529284019291840191600101615153565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156151ad576151ad615185565b500390565b60006000198214156151c6576151c6615185565b5060010190565b60208082526028908201527f63616e6e6f742070617573652061206d61726b65742074686174206973206e6f6040820152671d081b1a5cdd195960c21b606082015260800190565b60208082526027908201527f6f6e6c7920706175736520677561726469616e20616e642061646d696e2063616040820152666e20706175736560c81b606082015260800190565b6020808252601690820152756f6e6c792061646d696e2063616e20756e706175736560501b604082015260600190565b60006020828403121561529e57600080fd5b815161158581614aa8565b6000602082840312156152bb57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156152ea57600080fd5b815161158581614abd565b634e487b7160e01b600052600160045260246000fd5b6000806000806080858703121561532157600080fd5b505082516020840151604085015160609095015191969095509092509050565b634e487b7160e01b600052603160045260246000fd5b6000821982111561536a5761536a615185565b500190565b600081600019048311821515161561538957615389615185565b500290565b6000826153ab57634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b818110156153dd578581018301518582016040015282016153c1565b818111156153ef576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220e8ebe49b2e7b498ccb9b786dc415308a311b4018cfe83d434e848377b0108e7964736f6c634300080a0033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "author": "Compound",
        "kind": "dev",
        "methods": {
          "_grantComp(address,uint256)": {
            "details": "Note: If there is not enough COMP, we do not perform the transfer all.",
            "params": {
              "amount": "The amount of COMP to (possibly) transfer",
              "recipient": "The address of the recipient to transfer COMP to"
            }
          },
          "_setBorrowCapGuardian(address)": {
            "params": {
              "newBorrowCapGuardian": "The address of the new Borrow Cap Guardian"
            }
          },
          "_setCloseFactor(uint256)": {
            "details": "Admin function to set closeFactor",
            "params": {
              "newCloseFactorMantissa": "New close factor, scaled by 1e18"
            },
            "returns": {
              "_0": "uint 0=success, otherwise a failure"
            }
          },
          "_setCollateralFactor(address,uint256)": {
            "details": "Admin function to set per-market collateralFactor",
            "params": {
              "cToken": "The market to set the factor on",
              "newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18"
            },
            "returns": {
              "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
            }
          },
          "_setCompSpeeds(address[],uint256[],uint256[])": {
            "params": {
              "borrowSpeeds": "New borrow-side COMP speed for the corresponding market.",
              "cTokens": "The markets whose COMP speed to update.",
              "supplySpeeds": "New supply-side COMP speed for the corresponding market."
            }
          },
          "_setContributorCompSpeed(address,uint256)": {
            "params": {
              "compSpeed": "New COMP speed for contributor",
              "contributor": "The contributor whose COMP speed to update"
            }
          },
          "_setLiquidationIncentive(uint256)": {
            "details": "Admin function to set liquidationIncentive",
            "params": {
              "newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18"
            },
            "returns": {
              "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
            }
          },
          "_setMarketBorrowCaps(address[],uint256[])": {
            "details": "Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.",
            "params": {
              "cTokens": "The addresses of the markets (tokens) to change the borrow caps for",
              "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing."
            }
          },
          "_setPauseGuardian(address)": {
            "params": {
              "newPauseGuardian": "The address of the new Pause Guardian"
            },
            "returns": {
              "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
            }
          },
          "_setPriceOracle(address)": {
            "details": "Admin function to set a new price oracle",
            "returns": {
              "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
            }
          },
          "_supportMarket(address)": {
            "details": "Admin function to set isListed and add support for the market",
            "params": {
              "cToken": "The address of the market (token) to list"
            },
            "returns": {
              "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
            }
          },
          "borrowAllowed(address,address,uint256)": {
            "params": {
              "borrowAmount": "The amount of underlying the account would borrow",
              "borrower": "The account which would borrow the asset",
              "cToken": "The market to verify the borrow against"
            },
            "returns": {
              "_0": "0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
            }
          },
          "borrowVerify(address,address,uint256)": {
            "params": {
              "borrowAmount": "The amount of the underlying asset requested to borrow",
              "borrower": "The address borrowing the underlying",
              "cToken": "Asset whose underlying is being borrowed"
            }
          },
          "checkMembership(address,address)": {
            "params": {
              "account": "The address of the account to check",
              "cToken": "The cToken to check"
            },
            "returns": {
              "_0": "True if the account is in the asset, otherwise false."
            }
          },
          "claimComp(address)": {
            "params": {
              "holder": "The address to claim COMP for"
            }
          },
          "claimComp(address,address[])": {
            "params": {
              "cTokens": "The list of markets to claim COMP in",
              "holder": "The address to claim COMP for"
            }
          },
          "claimComp(address[],address[],bool,bool)": {
            "params": {
              "borrowers": "Whether or not to claim COMP earned by borrowing",
              "cTokens": "The list of markets to claim COMP in",
              "holders": "The addresses to claim COMP for",
              "suppliers": "Whether or not to claim COMP earned by supplying"
            }
          },
          "enterMarkets(address[])": {
            "params": {
              "cTokens": "The list of addresses of the cToken markets to be enabled"
            },
            "returns": {
              "_0": "Success indicator for whether each corresponding market was entered"
            }
          },
          "exitMarket(address)": {
            "details": "Sender must not have an outstanding borrow balance in the asset,  or be providing necessary collateral for an outstanding borrow.",
            "params": {
              "cTokenAddress": "The address of the asset to be removed"
            },
            "returns": {
              "_0": "Whether or not the account successfully exited the market"
            }
          },
          "getAccountLiquidity(address)": {
            "returns": {
              "_0": "(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)"
            }
          },
          "getAllMarkets()": {
            "details": "The automatic getter may be used to access an individual market.",
            "returns": {
              "_0": "The list of market addresses"
            }
          },
          "getAssetsIn(address)": {
            "params": {
              "account": "The address of the account to pull assets for"
            },
            "returns": {
              "_0": "A dynamic list with the assets the account has entered"
            }
          },
          "getCompAddress()": {
            "returns": {
              "_0": "The address of MARE"
            }
          },
          "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
            "params": {
              "account": "The account to determine liquidity for",
              "borrowAmount": "The amount of underlying to hypothetically borrow",
              "cTokenModify": "The market to hypothetically redeem/borrow in",
              "redeemTokens": "The number of tokens to hypothetically redeem"
            },
            "returns": {
              "_0": "(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,          hypothetical account shortfall below collateral requirements)"
            }
          },
          "isDeprecated(address)": {
            "details": "All borrows in a deprecated cToken market can be immediately liquidated",
            "params": {
              "cToken": "The market to check if deprecated"
            }
          },
          "liquidateBorrowAllowed(address,address,address,address,uint256)": {
            "params": {
              "borrower": "The address of the borrower",
              "cTokenBorrowed": "Asset which was borrowed by the borrower",
              "cTokenCollateral": "Asset which was used as collateral and will be seized",
              "liquidator": "The address repaying the borrow and seizing the collateral",
              "repayAmount": "The amount of underlying being repaid"
            }
          },
          "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
            "params": {
              "actualRepayAmount": "The amount of underlying being repaid",
              "borrower": "The address of the borrower",
              "cTokenBorrowed": "Asset which was borrowed by the borrower",
              "cTokenCollateral": "Asset which was used as collateral and will be seized",
              "liquidator": "The address repaying the borrow and seizing the collateral"
            }
          },
          "liquidateCalculateSeizeTokens(address,address,uint256)": {
            "details": "Used in liquidation (called in cToken.liquidateBorrowFresh)",
            "params": {
              "actualRepayAmount": "The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens",
              "cTokenBorrowed": "The address of the borrowed cToken",
              "cTokenCollateral": "The address of the collateral cToken"
            },
            "returns": {
              "_0": "(errorCode, number of cTokenCollateral tokens to be seized in a liquidation)"
            }
          },
          "mintAllowed(address,address,uint256)": {
            "params": {
              "cToken": "The market to verify the mint against",
              "mintAmount": "The amount of underlying being supplied to the market in exchange for tokens",
              "minter": "The account which would get the minted tokens"
            },
            "returns": {
              "_0": "0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
            }
          },
          "mintVerify(address,address,uint256,uint256)": {
            "params": {
              "actualMintAmount": "The amount of the underlying asset being minted",
              "cToken": "Asset being minted",
              "mintTokens": "The number of tokens being minted",
              "minter": "The address minting the tokens"
            }
          },
          "redeemAllowed(address,address,uint256)": {
            "params": {
              "cToken": "The market to verify the redeem against",
              "redeemTokens": "The number of cTokens to exchange for the underlying asset in the market",
              "redeemer": "The account which would redeem the tokens"
            },
            "returns": {
              "_0": "0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
            }
          },
          "redeemVerify(address,address,uint256,uint256)": {
            "params": {
              "cToken": "Asset being redeemed",
              "redeemAmount": "The amount of the underlying asset being redeemed",
              "redeemTokens": "The number of tokens being redeemed",
              "redeemer": "The address redeeming the tokens"
            }
          },
          "repayBorrowAllowed(address,address,address,uint256)": {
            "params": {
              "borrower": "The account which would borrowed the asset",
              "cToken": "The market to verify the repay against",
              "payer": "The account which would repay the asset",
              "repayAmount": "The amount of the underlying asset the account would repay"
            },
            "returns": {
              "_0": "0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
            }
          },
          "repayBorrowVerify(address,address,address,uint256,uint256)": {
            "params": {
              "actualRepayAmount": "The amount of underlying being repaid",
              "borrower": "The address of the borrower",
              "cToken": "Asset being repaid",
              "payer": "The address repaying the borrow"
            }
          },
          "seizeAllowed(address,address,address,address,uint256)": {
            "params": {
              "borrower": "The address of the borrower",
              "cTokenBorrowed": "Asset which was borrowed by the borrower",
              "cTokenCollateral": "Asset which was used as collateral and will be seized",
              "liquidator": "The address repaying the borrow and seizing the collateral",
              "seizeTokens": "The number of collateral tokens to seize"
            }
          },
          "seizeVerify(address,address,address,address,uint256)": {
            "params": {
              "borrower": "The address of the borrower",
              "cTokenBorrowed": "Asset which was borrowed by the borrower",
              "cTokenCollateral": "Asset which was used as collateral and will be seized",
              "liquidator": "The address repaying the borrow and seizing the collateral",
              "seizeTokens": "The number of collateral tokens to seize"
            }
          },
          "transferAllowed(address,address,address,uint256)": {
            "params": {
              "cToken": "The market to verify the transfer against",
              "dst": "The account which receives the tokens",
              "src": "The account which sources the tokens",
              "transferTokens": "The number of cTokens to transfer"
            },
            "returns": {
              "_0": "0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
            }
          },
          "transferVerify(address,address,address,uint256)": {
            "params": {
              "cToken": "Asset being transferred",
              "dst": "The account which receives the tokens",
              "src": "The account which sources the tokens",
              "transferTokens": "The number of cTokens to transfer"
            }
          },
          "updateContributorRewards(address)": {
            "params": {
              "contributor": "The address to calculate contributor rewards for"
            }
          }
        },
        "title": "Compound's Comptroller Contract",
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_2899": {
              "entryPoint": null,
              "id": 2899,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [],
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561543b806100326000396000f3fe608060405234801561001057600080fd5b506004361061048a5760003560e01c8063731f0c2b11610262578063b21be7fd11610151578063dce15449116100ce578063e9af029211610092578063e9af029214610c04578063eabe7d9114610c17578063ede4edd014610c2a578063f00a7a9214610c3d578063f4a433c014610c4a578063f851a44014610c6a57600080fd5b8063dce1544914610bae578063dcfbc0c714610bc1578063e4028eee14610bd4578063e6653f3d14610be7578063e875544614610bfb57600080fd5b8063c488847b11610115578063c488847b14610b15578063ca0af04314610b3d578063cc7ebdc414610b68578063d02f735114610b88578063da3d454c14610b9b57600080fd5b8063b21be7fd14610a84578063bb82aa5e14610aaf578063bdcdc25814610ac2578063bea6b8b814610ad5578063c299823814610af557600080fd5b806394b2294b116101df578063a8b43948116101a3578063a8b4394814610a2c578063aa90075414610a3f578063abfceffc14610a48578063ac0b0bb714610a68578063b0772d0b14610a7c57600080fd5b806394b2294b146109a9578063986ab838146109b25780639d1b5a0a146109d2578063a76b3fda146109ec578063a7f0e231146109ff57600080fd5b80638c57804e116102265780638c57804e146108b75780638e8f294b146108ef5780638ebf636414610942578063929fe9a11461095557806394543c151461099657600080fd5b8063731f0c2b1461083a578063741b25251461085d5780637dc0d1d01461087057806385b7beb81461088357806387f76303146108a357600080fd5b80634a5844321161037e5780635ec88c79116102fb5780636a56947e116102bf5780636a56947e1461077f5780636aa875b51461078d5780636b79c38d146107ad5780636d154ea5146108095780636d35bf911461082c57600080fd5b80635ec88c79146107205780635f5af1aa146107335780635fc7e71e14610746578063607ef6c1146107595780636810dfa61461076c57600080fd5b806351dff9891161034257806351dff989146106c157806352d84d1e146106d457806355ee1fe1146106e7578063598ee1cb146106fa5780635c7786051461070d57600080fd5b80634a584432146106445780634ada90af146106645780634e79238f1461066d5780634ef4c3e11461069b5780634fd42e17146106ae57600080fd5b8063267822471161040c5780633bcf7ec1116103d05780633bcf7ec1146105ed5780633c94786f1461060057806341c728b91461061457806342cbb15c1461062857806347ef3b3b1461062e57600080fd5b8063267822471461058e57806327efe3cb146105a15780632d70db78146105b4578063317b0b77146105c7578063391957d7146105da57600080fd5b80631d7b33d7116104535780631d7b33d7146104fa5780631ededc911461052857806321af45691461053d57806324008a621461056857806324a3d6221461057b57600080fd5b80627e3dd21461048f57806316b95e8f146104ac57806318c882a5146104c15780631c3db2e0146104d45780631d504dc6146104e7575b600080fd5b610497600181565b60405190151581526020015b60405180910390f35b6104bf6104ba366004614a3c565b610c7d565b005b6104976104cf366004614acb565b610f26565b6104bf6104e2366004614be3565b61105f565b6104bf6104f5366004614c33565b6110c2565b61051a610508366004614c33565b600f6020526000908152604090205481565b6040519081526020016104a3565b6104bf610536366004614c50565b5050505050565b601554610550906001600160a01b031681565b6040516001600160a01b0390911681526020016104a3565b61051a610576366004614cab565b611240565b600a54610550906001600160a01b031681565b600154610550906001600160a01b031681565b6104bf6105af366004614cfc565b6112fe565b6104976105c2366004614d28565b6113f5565b61051a6105d5366004614d45565b6114e5565b6104bf6105e8366004614c33565b61158c565b6104976105fb366004614acb565b611656565b600a5461049790600160a01b900460ff1681565b6104bf610622366004614d5e565b50505050565b4261051a565b6104bf61063c366004614da4565b505050505050565b61051a610652366004614c33565b60166020526000908152604090205481565b61051a60065481565b61068061067b366004614d5e565b611780565b604080519384526020840192909252908201526060016104a3565b61051a6106a9366004614e12565b6117c0565b61051a6106bc366004614d45565b611861565b6104bf6106cf366004614d5e565b6118be565b6105506106e2366004614d45565b61190d565b61051a6106f5366004614c33565b611937565b6104bf610708366004614cfc565b6119b0565b6104bf61071b366004614e12565b505050565b61068061072e366004614c33565b611aa4565b61051a610741366004614c33565b611adf565b61051a610754366004614e53565b611b58565b6104bf610767366004614a3c565b611d27565b6104bf61077a366004614f1b565b611f05565b6104bf610622366004614cab565b61051a61079b366004614c33565b601a6020526000908152604090205481565b6107e56107bb366004614c33565b6010602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604080516001600160e01b03909316835263ffffffff9091166020830152016104a3565b610497610817366004614c33565b600c6020526000908152604090205460ff1681565b6104bf610536366004614e53565b610497610848366004614c33565b600b6020526000908152604090205460ff1681565b6104bf61086b366004614c33565b61218f565b600454610550906001600160a01b031681565b61051a610891366004614c33565b601c6020526000908152604090205481565b600a5461049790600160b01b900460ff1681565b6107e56108c5366004614c33565b6011602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b6109236108fd366004614c33565b60096020526000908152604090208054600182015460039092015460ff91821692911683565b60408051931515845260208401929092521515908201526060016104a3565b610497610950366004614d28565b61223b565b610497610963366004614fa4565b6001600160a01b038082166000908152600960209081526040808320938616835260029093019052205460ff1692915050565b6104976109a4366004614c33565b612322565b61051a60075481565b61051a6109c0366004614c33565b60176020526000908152604090205481565b73d86c8d4279ccafbec840c782bcc50d201f277419610550565b61051a6109fa366004614c33565b6123e1565b610a146a0c097ce7bc90715b34b9f160241b81565b6040516001600160e01b0390911681526020016104a3565b6104bf610a3a36600461502d565b612513565b61051a600e5481565b610a5b610a56366004614c33565b612648565b6040516104a391906150b5565b600a5461049790600160b81b900460ff1681565b610a5b6126be565b61051a610a92366004614fa4565b601260209081526000928352604080842090915290825290205481565b600254610550906001600160a01b031681565b61051a610ad0366004614cab565b612720565b61051a610ae3366004614c33565b60186020526000908152604090205481565b610b08610b03366004615102565b6127ab565b6040516104a39190615137565b610b28610b23366004614e12565b612873565b604080519283526020830191909152016104a3565b61051a610b4b366004614fa4565b601360209081526000928352604080842090915290825290205481565b61051a610b76366004614c33565b60146020526000908152604090205481565b61051a610b96366004614e53565b612a91565b61051a610ba9366004614e12565b612c38565b610550610bbc366004614cfc565b613008565b600354610550906001600160a01b031681565b61051a610be2366004614cfc565b613040565b600a5461049790600160a81b900460ff1681565b61051a60055481565b6104bf610c12366004614c33565b6131d2565b61051a610c25366004614e12565b613236565b61051a610c38366004614c33565b613271565b601b546104979060ff1681565b61051a610c58366004614c33565b60196020526000908152604090205481565b600054610550906001600160a01b031681565b6000546001600160a01b03163314610ce65760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b60648201526084015b60405180910390fd5b601b5460ff1615610d485760405162461bcd60e51b815260206004820152602660248201527f416c72656164792065786563757465642074686973206f6e652d6f66662066756044820152653731ba34b7b760d11b6064820152608401610cdd565b828114610d875760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081a5b9c1d5d609a1b6044820152606401610cdd565b60008060008060005b87811015610f0e57888882818110610daa57610daa61516f565b9050602002016020810190610dbf9190614c33565b6001600160a01b0381166000908152601460205260409020549095509350868682818110610def57610def61516f565b90506020020135925083831115610e93576000610e0c858561519b565b6001600160a01b0387166000908152601c6020526040812054919250610e3282846135d7565b6001600160a01b0389166000818152601c6020908152604091829020849055815186815290810184905292935090917f17fea09d9a7ca41b2f9f9118f18f44848a62e9c70d55dd4385131eb2cf1b7e47910160405180910390a28695505050505b8215610efe57610ea384846135e3565b6001600160a01b038616600081815260146020908152604091829020849055815188815290810184905292945090917f4a5c134e28b537a76546993ea37f3b60d9190476df7356d3842aa40902e20f04910160405180910390a25b610f07816151b2565b9050610d90565b5050601b805460ff1916600117905550505050505050565b6001600160a01b03821660009081526009602052604081205460ff16610f5e5760405162461bcd60e51b8152600401610cdd906151cd565b600a546001600160a01b0316331480610f8157506000546001600160a01b031633145b610f9d5760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b0316331480610fb857506001821515145b610fd45760405162461bcd60e51b8152600401610cdd9061525c565b6001600160a01b0383166000818152600c6020908152604091829020805460ff19168615159081179091558251938452606091840182905260069184019190915265426f72726f7760d01b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a0015b60405180910390a150805b92915050565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106110955761109561516f565b60200260200101906001600160a01b031690816001600160a01b03168152505061071b8183600180611f05565b806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611100573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611124919061528c565b6001600160a01b0316336001600160a01b0316146111945760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676560448201526620627261696e7360c81b6064820152608401610cdd565b806001600160a01b031663c1e803346040518163ffffffff1660e01b81526004016020604051808303816000875af11580156111d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f891906152a9565b1561123d5760405162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b6044820152606401610cdd565b50565b6001600160a01b03841660009081526009602052604081205460ff16611268575060096112f6565b60006040518060200160405280876001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d791906152a9565b905290506112e586826135ef565b6112f08685836137e2565b60009150505b949350505050565b611306613962565b6113525760405162461bcd60e51b815260206004820152601960248201527f6f6e6c792061646d696e2063616e206772616e7420636f6d70000000000000006044820152606401610cdd565b600061135e838361398b565b905080156113ae5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420636f6d7020666f72206772616e7400000000006044820152606401610cdd565b604080516001600160a01b0385168152602081018490527f98b2f82a3a07f223a0be64b3d0f47711c64dccd1feafb94aa28156b38cd9695c910160405180910390a1505050565b600a546000906001600160a01b031633148061141b57506000546001600160a01b031633145b6114375760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b031633148061145257506001821515145b61146e5760405162461bcd60e51b8152600401610cdd9061525c565b600a8054831515600160b81b0260ff60b81b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906114d99084906040808252600590820152645365697a6560d81b6060820152901515602082015260800190565b60405180910390a15090565b600080546001600160a01b031633146115405760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792061646d696e2063616e2073657420636c6f736520666163746f72006044820152606401610cdd565b600580549083905560408051828152602081018590527f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd991015b60405180910390a160005b9392505050565b6000546001600160a01b031633146115f55760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792061646d696e2063616e2073657420626f72726f772063617020677560448201526530b93234b0b760d11b6064820152608401610cdd565b601580546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527feda98690e518e9a05f8ec6837663e188211b2da8f4906648b323f2c1d4434e29910160405180910390a15050565b6001600160a01b03821660009081526009602052604081205460ff1661168e5760405162461bcd60e51b8152600401610cdd906151cd565b600a546001600160a01b03163314806116b157506000546001600160a01b031633145b6116cd5760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b03163314806116e857506001821515145b6117045760405162461bcd60e51b8152600401610cdd9061525c565b6001600160a01b0383166000818152600b6020908152604091829020805460ff19168615159081179091558251938452606091840182905260049184019190915263135a5b9d60e21b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a00161104e565b6000806000806000806117958a8a8a8a613ab0565b9250925092508260118111156117ad576117ad6152c2565b95509093509150505b9450945094915050565b6001600160a01b0383166000908152600b602052604081205460ff161561181a5760405162461bcd60e51b815260206004820152600e60248201526d1b5a5b9d081a5cc81c185d5cd95960921b6044820152606401610cdd565b6001600160a01b03841660009081526009602052604090205460ff166118445760095b9050611585565b61184d84613dde565b6118578484613f56565b6000949350505050565b600080546001600160a01b03163314611880576110596001600b6140f4565b600680549083905560408051828152602081018590527faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec1316910161157a565b801580156118cc5750600082115b156106225760405162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b6044820152606401610cdd565b600d818154811061191d57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546001600160a01b0316331461195657611059600160106140f4565b600480546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e22910161157a565b6119b8613962565b611a045760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792061646d696e2063616e2073657420636f6d702073706565640000006044820152606401610cdd565b611a0d8261218f565b80611a30576001600160a01b038216600090815260186020526040812055611a4b565b426001600160a01b0383166000908152601860205260409020555b6001600160a01b03821660008181526017602052604090819020839055517f386537fa92edc3319af95f1f904dcf1900021e4f3f4e08169a577a09076e66b390611a989084815260200190565b60405180910390a25050565b600080600080600080611abb876000806000613ab0565b925092509250826011811115611ad357611ad36152c2565b97919650945092505050565b600080546001600160a01b03163314611afe57611059600160136140f4565b600a80546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e910161157a565b6001600160a01b03851660009081526009602052604081205460ff161580611b9957506001600160a01b03851660009081526009602052604090205460ff16155b15611ba85760095b9050611d1e565b6040516395dd919360e01b81526001600160a01b038481166004830152600091908816906395dd919390602401602060405180830381865afa158015611bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1691906152a9565b9050611c2187612322565b15611c8c5782811015611c875760405162461bcd60e51b815260206004820152602860248201527f43616e206e6f74207265706179206d6f7265207468616e2074686520746f74616044820152676c20626f72726f7760c01b6064820152608401610cdd565b611d18565b600080611c988661416d565b91935090915060009050826011811115611cb457611cb46152c2565b14611cd557816011811115611ccb57611ccb6152c2565b9350505050611d1e565b80611ce1576003611ccb565b6000611cfd60405180602001604052806005548152508561418d565b905080861115611d14576011945050505050611d1e565b5050505b60009150505b95945050505050565b6000546001600160a01b0316331480611d4a57506015546001600160a01b031633145b611db45760405162461bcd60e51b815260206004820152603560248201527f6f6e6c792061646d696e206f7220626f72726f772063617020677561726469616044820152746e2063616e2073657420626f72726f77206361707360581b6064820152608401610cdd565b82818115801590611dc457508082145b611e005760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610cdd565b60005b82811015611efc57848482818110611e1d57611e1d61516f565b9050602002013560166000898985818110611e3a57611e3a61516f565b9050602002016020810190611e4f9190614c33565b6001600160a01b03168152602081019190915260400160002055868682818110611e7b57611e7b61516f565b9050602002016020810190611e909190614c33565b6001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f6868684818110611ecc57611ecc61516f565b90506020020135604051611ee291815260200190565b60405180910390a280611ef4816151b2565b915050611e03565b50505050505050565b60005b83518110156120cc576000848281518110611f2557611f2561516f565b6020908102919091018101516001600160a01b0381166000908152600990925260409091205490915060ff16611f955760405162461bcd60e51b81526020600482015260156024820152741b585c9ad95d081b5d5cdd081899481b1a5cdd1959605a1b6044820152606401610cdd565b600184151514156120625760006040518060200160405280836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200f91906152a9565b9052905061201d82826135ef565b60005b875181101561205f5761204d8389838151811061203f5761203f61516f565b6020026020010151846137e2565b80612057816151b2565b915050612020565b50505b600183151514156120b95761207681613dde565b60005b86518110156120b7576120a5828883815181106120985761209861516f565b6020026020010151613f56565b806120af816151b2565b915050612079565b505b50806120c4816151b2565b915050611f08565b5060005b84518110156105365761213a8582815181106120ee576120ee61516f565b60200260200101516014600088858151811061210c5761210c61516f565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205461398b565b601460008784815181106121505761215061516f565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080612187906151b2565b9150506120d0565b6001600160a01b0381166000908152601760209081526040808320546018909252822054909142916121c29083906135e3565b90506000811180156121d45750600083115b156106225760006121e582856141a5565b6001600160a01b0386166000908152601460205260408120549192509061220c90836135d7565b6001600160a01b0387166000908152601460209081526040808320939093556018905220849055505050505050565b600a546000906001600160a01b031633148061226157506000546001600160a01b031633145b61227d5760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b031633148061229857506001821515145b6122b45760405162461bcd60e51b8152600401610cdd9061525c565b600a8054831515600160b01b0260ff60b01b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906114d99084906040808252600890820152672a3930b739b332b960c11b6060820152901515602082015260800190565b6001600160a01b03811660009081526009602052604081206001015415801561236857506001600160a01b0382166000908152600c602052604090205460ff1615156001145b80156110595750816001600160a01b031663173b99046040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d191906152a9565b670de0b6b3a76400001492915050565b600080546001600160a01b0316331461240057611059600160126140f4565b6001600160a01b03821660009081526009602052604090205460ff161561242d57611059600a60116140f4565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561246b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248f91906152d8565b506001600160a01b03821660009081526009602052604081208054600160ff19918216811783556003830180549092169091558101919091556124d1836141b1565b6124da8361429a565b6040516001600160a01b03841681527fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f9060200161157a565b61251b613962565b6125675760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792061646d696e2063616e2073657420636f6d702073706565640000006044820152606401610cdd565b82518251811480156125795750815181145b6125d75760405162461bcd60e51b815260206004820152602960248201527f436f6d7074726f6c6c65723a3a5f736574436f6d7053706565647320696e76616044820152681b1a59081a5b9c1d5d60ba1b6064820152608401610cdd565b60005b81811015610536576126388582815181106125f7576125f761516f565b60200260200101518583815181106126115761261161516f565b602002602001015185848151811061262b5761262b61516f565b6020026020010151614356565b612641816151b2565b90506125da565b6001600160a01b03811660009081526008602090815260408083208054825181850281018501909352808352606094938301828280156126b157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612693575b5093979650505050505050565b6060600d80548060200260200160405190810160405280929190818152602001828054801561271657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116126f8575b5050505050905090565b600a54600090600160b01b900460ff16156127725760405162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c881a5cc81c185d5cd95960721b6044820152606401610cdd565b600061277f868685614535565b9050801561278e5790506112f6565b61279786613dde565b6127a18686613f56565b6112f08685613f56565b805160609060008167ffffffffffffffff8111156127cb576127cb614b04565b6040519080825280602002602001820160405280156127f4578160200160208202803683370190505b50905060005b8281101561286b5760008582815181106128165761281661516f565b6020026020010151905061282a81336145ed565b601181111561283b5761283b6152c2565b83838151811061284d5761284d61516f565b60209081029190910101525080612863816151b2565b9150506127fa565b509392505050565b6004805460405163fc57d4df60e01b81526001600160a01b03868116938201939093526000928392839291169063fc57d4df90602401602060405180830381865afa1580156128c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ea91906152a9565b6004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935292935060009291169063fc57d4df90602401602060405180830381865afa15801561293c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296091906152a9565b905081158061296d575080155b1561298157600d6000935093505050612a89565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e591906152a9565b905060006129ff6040518060200160405280600081525090565b604080516020808201835260008083528351808301855290815283518083018552600654815284519283019094528882529192612a3b916146e2565b9250612a636040518060200160405280888152506040518060200160405280888152506146e2565b9150612a6f838361472a565b9050612a7b818b61418d565b600099509750505050505050505b935093915050565b600a54600090600160b81b900460ff1615612ae05760405162461bcd60e51b815260206004820152600f60248201526e1cd95a5e99481a5cc81c185d5cd959608a1b6044820152606401610cdd565b6001600160a01b03861660009081526009602052604090205460ff161580612b2157506001600160a01b03851660009081526009602052604090205460ff16155b15612b2d576009611ba1565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8f919061528c565b6001600160a01b0316866001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfa919061528c565b6001600160a01b031614612c0f576002611ba1565b612c1886613dde565b612c228684613f56565b612c2c8685613f56565b60009695505050505050565b6001600160a01b0383166000908152600c602052604081205460ff1615612c945760405162461bcd60e51b815260206004820152601060248201526f189bdc9c9bddc81a5cc81c185d5cd95960821b6044820152606401610cdd565b6001600160a01b03841660009081526009602052604090205460ff16612cbb57600961183d565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff16612db857336001600160a01b03851614612d3c5760405162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba1031329031aa37b5b2b760591b6044820152606401610cdd565b6000612d4833856145ed565b90506000816011811115612d5e57612d5e6152c2565b14612d7d57806011811115612d7557612d756152c2565b915050611585565b6001600160a01b038086166000908152600960209081526040808320938816835260029093019052205460ff16612db657612db66152f5565b505b6004805460405163fc57d4df60e01b81526001600160a01b038781169382019390935291169063fc57d4df90602401602060405180830381865afa158015612e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2891906152a9565b612e3357600d61183d565b6001600160a01b0384166000908152601660205260409020548015612f18576000856001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb691906152a9565b90506000612ec482866135d7565b9050828110612f155760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f77206361702072656163686564000000000000006044820152606401610cdd565b50505b600080612f288688600088613ab0565b91935090915060009050826011811115612f4457612f446152c2565b14612f6557816011811115612f5b57612f5b6152c2565b9350505050611585565b8015612f72576004612f5b565b60006040518060200160405280896001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe191906152a9565b90529050612fef88826135ef565b612ffa8888836137e2565b600098975050505050505050565b6008602052816000526040600020818154811061302457600080fd5b6000918252602090912001546001600160a01b03169150829050565b600080546001600160a01b031633146130665761305f600160066140f4565b9050611059565b6001600160a01b0383166000908152600960205260409020805460ff1661309b57613093600960076140f4565b915050611059565b60408051602080820183528582528251908101909252670c7d713b49da00008252906130c981835190511090565b156130e4576130da600660086140f4565b9350505050611059565b841580159061316057506004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935291169063fc57d4df90602401602060405180830381865afa15801561313a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315e91906152a9565b155b15613171576130da600d60096140f4565b60018301805490869055604080516001600160a01b0389168152602081018390529081018790527f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59060600160405180910390a16000979650505050505050565b61123d81600d80548060200260200160405190810160405280929190818152602001828054801561322c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161320e575b505050505061105f565b600080613244858585614535565b90508015613253579050611585565b61325c85613dde565b6132668585613f56565b600095945050505050565b6040516361bfb47160e11b815233600482015260009082908290819081906001600160a01b0385169063c37f68e290602401608060405180830381865afa1580156132c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e4919061530b565b50925092509250826000146133495760405162461bcd60e51b815260206004820152602560248201527f657869744d61726b65743a206765744163636f756e74536e617073686f742066604482015264185a5b195960da1b6064820152608401610cdd565b80156133655761335b600c60026140f4565b9695505050505050565b6000613372873385614535565b9050801561339257613387600e600383614764565b979650505050505050565b6001600160a01b0385166000908152600960209081526040808320338452600281019092529091205460ff166133d057600098975050505050505050565b3360009081526002820160209081526040808320805460ff19169055600882528083208054825181850281018501909352808352919290919083018282801561344257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613424575b5050835193945083925060009150505b828110156134a757896001600160a01b03168482815181106134765761347661516f565b60200260200101516001600160a01b03161415613495578091506134a7565b8061349f816151b2565b915050613452565b508181106134b7576134b76152f5565b336000908152600860205260409020805481906134d69060019061519b565b815481106134e6576134e661516f565b9060005260206000200160009054906101000a90046001600160a01b03168183815481106135165761351661516f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080548061355457613554615341565b600082815260209020810160001990810180546001600160a01b03191690550190556040517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d906135bd908c9033906001600160a01b0392831681529116602082015260400190565b60405180910390a160009c9b505050505050505050505050565b60006115858284615357565b6000611585828461519b565b6001600160a01b038216600090815260116020908152604080832060199092528220549091613654425b6040518060400160405280601c81526020017f626c6f636b206e756d62657220657863656564732033322062697473000000008152506147dc565b83549091506000906136769063ffffffff80851691600160e01b9004166135e3565b90506000811180156136885750600083115b156137b75760006136fa876001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f491906152a9565b8761480c565b9050600061370883866141a5565b905060008083116137285760405180602001604052806000815250613732565b613732828461482a565b604080516020810190915288546001600160e01b031681529091506137959061375b9083614865565b5160408051808201909152601a81527f6e657720696e64657820657863656564732032323420626974730000000000006020820152614891565b6001600160e01b0316600160e01b63ffffffff8716021787555061063c915050565b801561063c57835463ffffffff8316600160e01b026001600160e01b03909116178455505050505050565b6001600160a01b03838116600090815260116020908152604080832080546013845282852095881685529490925290912080546001600160e01b039093169081905590918015801561384257506a0c097ce7bc90715b34b9f160241b8210155b1561385857506a0c097ce7bc90715b34b9f160241b5b6000604051806020016040528061386f85856135e3565b90526040516395dd919360e01b81526001600160a01b0388811660048301529192506000916138c291908a16906395dd919390602401602060405180830381865afa1580156136d0573d6000803e3d6000fd5b905060006138d082846148b8565b6001600160a01b038916600090815260146020526040812054919250906138f790836135d7565b6001600160a01b038a811660008181526014602090815260409182902085905581518781529081018b90529394509092918d16917f1fc3ecc087d8d2d15e23d0032af5a47059c3892d003d8e139fdcb6bb327c99a6910160405180910390a350505050505050505050565b600080546001600160a01b031633148061398657506002546001600160a01b031633145b905090565b60008073d86c8d4279ccafbec840c782bcc50d201f2774196040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156139ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1191906152a9565b9050600084118015613a235750808411155b15613aa75760405163a9059cbb60e01b81526001600160a01b0386811660048301526024820186905283169063a9059cbb906044016020604051808303816000875af1158015613a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a9b91906152d8565b50600092505050611059565b50919392505050565b6000806000613abd61494e565b6001600160a01b038816600090815260086020908152604080832080548251818502810185019093528083528493830182828015613b2457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b06575b5050505050905060005b8151811015613d88576000828281518110613b4b57613b4b61516f565b60209081029190910101516040516361bfb47160e11b81526001600160a01b038e811660048301529192509082169063c37f68e290602401608060405180830381865afa158015613ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc4919061530b565b60808901526060880152604087015293508315613bf057600f60008097509750975050505050506117b6565b60408051602080820183526001600160a01b0384811660008181526009845285902060010154845260c08a01939093528351808301855260808a0151815260e08a015260048054855163fc57d4df60e01b815291820194909452935192169263fc57d4df92602480830193928290030181865afa158015613c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9991906152a9565b60a08601819052613cb957600d60008097509750975050505050506117b6565b604080516020810190915260a0860151815261010086015260c085015160e0860151613cf391613ce8916146e2565b8661010001516146e2565b610120860181905260408601518651613d0d9291906148e1565b855261010085015160608601516020870151613d2a9291906148e1565b60208601526001600160a01b03818116908c161415613d7557613d578561012001518b87602001516148e1565b60208601819052610100860151613d6f918b906148e1565b60208601525b5080613d80816151b2565b915050613b2e565b50602083015183511115613db95760208301518351600091613da99161519b565b60009550955095505050506117b6565b60008084600001518560200151613dd0919061519b565b9550955095505050506117b6565b6001600160a01b0381166000908152601060209081526040808320601a9092528220549091613e0c42613619565b8354909150600090613e2e9063ffffffff80851691600160e01b9004166135e3565b9050600081118015613e405750600083115b15613f2c576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea991906152a9565b90506000613eb783866141a5565b90506000808311613ed75760405180602001604052806000815250613ee1565b613ee1828461482a565b604080516020810190915288546001600160e01b03168152909150613f0a9061375b9083614865565b6001600160e01b0316600160e01b63ffffffff87160217875550610536915050565b801561053657835463ffffffff8316600160e01b026001600160e01b039091161784555050505050565b6001600160a01b03828116600090815260106020908152604080832080546012845282852095871685529490925290912080546001600160e01b0390931690819055909180158015613fb657506a0c097ce7bc90715b34b9f160241b8210155b15613fcc57506a0c097ce7bc90715b34b9f160241b5b60006040518060200160405280613fe385856135e3565b90526040516370a0823160e01b81526001600160a01b0387811660048301529192506000918816906370a0823190602401602060405180830381865afa158015614031573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061405591906152a9565b9050600061406382846148b8565b6001600160a01b0388166000908152601460205260408120549192509061408a90836135d7565b6001600160a01b0389811660008181526014602090815260409182902085905581518781529081018b90529394509092918c16917f2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a910160405180910390a3505050505050505050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836011811115614129576141296152c2565b83601381111561413b5761413b6152c2565b60408051928352602083019190915260009082015260600160405180910390a1826011811115611585576115856152c2565b6000806000614180846000806000613ab0565b9250925092509193909250565b60008061419a8484614902565b90506112f68161492a565b6000611585828461536f565b60005b600d5481101561424757816001600160a01b0316600d82815481106141db576141db61516f565b6000918252602090912001546001600160a01b031614156142355760405162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08185b1c9958591e48185919195960621b6044820152606401610cdd565b8061423f816151b2565b9150506141b4565b50600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0392909216919091179055565b60006142a542613619565b6001600160a01b03831660009081526010602090815260408083206011909252909120815492935090916001600160e01b03166142fb5781546001600160e01b0319166a0c097ce7bc90715b34b9f160241b1782555b80546001600160e01b03166143295780546001600160e01b0319166a0c097ce7bc90715b34b9f160241b1781555b805463ffffffff909316600160e01b026001600160e01b0393841681179091558154909216909117905550565b6001600160a01b0383166000908152600960205260409020805460ff166143bf5760405162461bcd60e51b815260206004820152601960248201527f636f6d70206d61726b6574206973206e6f74206c6973746564000000000000006044820152606401610cdd565b6001600160a01b0384166000908152601a6020526040902054831461443d576143e784613dde565b6001600160a01b0384166000818152601a602052604090819020859055517fdeafccd0c0b768b2529f7dcbbe58e155d6023059150b7490ed4535cc3744b92d906144349086815260200190565b60405180910390a25b6001600160a01b03841660009081526019602052604090205482146106225760006040518060200160405280866001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144cb91906152a9565b905290506144d985826135ef565b6001600160a01b03851660008181526019602052604090819020859055517f20af8e791cc98f74b2d7a391c80980ca8e5aebf3d4060bf581997b6acae2e537906145269086815260200190565b60405180910390a25050505050565b6001600160a01b03831660009081526009602052604081205460ff1661455c57600961183d565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff1661459457600061183d565b6000806145a48587866000613ab0565b919350909150600090508260118111156145c0576145c06152c2565b146145e0578160118111156145d7576145d76152c2565b92505050611585565b8015612c2c5760046145d7565b6001600160a01b0382166000908152600960205260408120805460ff16614618576009915050611059565b6001600160a01b038316600090815260028201602052604090205460ff1615156001141561464a576000915050611059565b6001600160a01b03838116600081815260028401602090815260408083208054600160ff199091168117909155600883528184208054918201815584529282902090920180546001600160a01b031916948916948517905581519384528301919091527f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5910160405180910390a15060009392505050565b6040805160208101909152600081526040518060200160405280670de0b6b3a7640000614717866000015186600001516141a5565b614721919061538e565b90529392505050565b604080516020810190915260008152604051806020016040528061472161475d8660000151670de0b6b3a76400006141a5565b8551614942565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0846011811115614799576147996152c2565b8460138111156147ab576147ab6152c2565b604080519283526020830191909152810184905260600160405180910390a18360118111156112f6576112f66152c2565b60008164010000000084106148045760405162461bcd60e51b8152600401610cdd91906153b0565b509192915050565b600061158561482384670de0b6b3a76400006141a5565b8351614942565b604080516020810190915260008152604051806020016040528061472161485f866a0c097ce7bc90715b34b9f160241b6141a5565b85614942565b6040805160208101909152600081526040518060200160405280614721856000015185600001516135d7565b600081600160e01b84106148045760405162461bcd60e51b8152600401610cdd91906153b0565b60006a0c097ce7bc90715b34b9f160241b6148d78484600001516141a5565b611585919061538e565b6000806148ee8585614902565b9050611d1e6148fc8261492a565b846135d7565b60408051602081019091526000815260405180602001604052806147218560000151856141a5565b805160009061105990670de0b6b3a76400009061538e565b6000611585828461538e565b60405180610140016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200161499a6040518060200160405280600081525090565b81526020016149b56040518060200160405280600081525090565b81526020016149d06040518060200160405280600081525090565b81526020016149eb6040518060200160405280600081525090565b905290565b60008083601f840112614a0257600080fd5b50813567ffffffffffffffff811115614a1a57600080fd5b6020830191508360208260051b8501011115614a3557600080fd5b9250929050565b60008060008060408587031215614a5257600080fd5b843567ffffffffffffffff80821115614a6a57600080fd5b614a76888389016149f0565b90965094506020870135915080821115614a8f57600080fd5b50614a9c878288016149f0565b95989497509550505050565b6001600160a01b038116811461123d57600080fd5b801515811461123d57600080fd5b60008060408385031215614ade57600080fd5b8235614ae981614aa8565b91506020830135614af981614abd565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614b4357614b43614b04565b604052919050565b600067ffffffffffffffff821115614b6557614b65614b04565b5060051b60200190565b600082601f830112614b8057600080fd5b81356020614b95614b9083614b4b565b614b1a565b82815260059290921b84018101918181019086841115614bb457600080fd5b8286015b84811015614bd8578035614bcb81614aa8565b8352918301918301614bb8565b509695505050505050565b60008060408385031215614bf657600080fd5b8235614c0181614aa8565b9150602083013567ffffffffffffffff811115614c1d57600080fd5b614c2985828601614b6f565b9150509250929050565b600060208284031215614c4557600080fd5b813561158581614aa8565b600080600080600060a08688031215614c6857600080fd5b8535614c7381614aa8565b94506020860135614c8381614aa8565b93506040860135614c9381614aa8565b94979396509394606081013594506080013592915050565b60008060008060808587031215614cc157600080fd5b8435614ccc81614aa8565b93506020850135614cdc81614aa8565b92506040850135614cec81614aa8565b9396929550929360600135925050565b60008060408385031215614d0f57600080fd5b8235614d1a81614aa8565b946020939093013593505050565b600060208284031215614d3a57600080fd5b813561158581614abd565b600060208284031215614d5757600080fd5b5035919050565b60008060008060808587031215614d7457600080fd5b8435614d7f81614aa8565b93506020850135614d8f81614aa8565b93969395505050506040820135916060013590565b60008060008060008060c08789031215614dbd57600080fd5b8635614dc881614aa8565b95506020870135614dd881614aa8565b94506040870135614de881614aa8565b93506060870135614df881614aa8565b9598949750929560808101359460a0909101359350915050565b600080600060608486031215614e2757600080fd5b8335614e3281614aa8565b92506020840135614e4281614aa8565b929592945050506040919091013590565b600080600080600060a08688031215614e6b57600080fd5b8535614e7681614aa8565b94506020860135614e8681614aa8565b93506040860135614e9681614aa8565b92506060860135614ea681614aa8565b949793965091946080013592915050565b600082601f830112614ec857600080fd5b81356020614ed8614b9083614b4b565b82815260059290921b84018101918181019086841115614ef757600080fd5b8286015b84811015614bd8578035614f0e81614aa8565b8352918301918301614efb565b60008060008060808587031215614f3157600080fd5b843567ffffffffffffffff80821115614f4957600080fd5b614f5588838901614eb7565b95506020870135915080821115614f6b57600080fd5b50614f7887828801614b6f565b9350506040850135614f8981614abd565b91506060850135614f9981614abd565b939692955090935050565b60008060408385031215614fb757600080fd5b8235614fc281614aa8565b91506020830135614af981614aa8565b600082601f830112614fe357600080fd5b81356020614ff3614b9083614b4b565b82815260059290921b8401810191818101908684111561501257600080fd5b8286015b84811015614bd85780358352918301918301615016565b60008060006060848603121561504257600080fd5b833567ffffffffffffffff8082111561505a57600080fd5b61506687838801614b6f565b9450602086013591508082111561507c57600080fd5b61508887838801614fd2565b9350604086013591508082111561509e57600080fd5b506150ab86828701614fd2565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156150f65783516001600160a01b0316835292840192918401916001016150d1565b50909695505050505050565b60006020828403121561511457600080fd5b813567ffffffffffffffff81111561512b57600080fd5b6112f684828501614eb7565b6020808252825182820181905260009190848201906040850190845b818110156150f657835183529284019291840191600101615153565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156151ad576151ad615185565b500390565b60006000198214156151c6576151c6615185565b5060010190565b60208082526028908201527f63616e6e6f742070617573652061206d61726b65742074686174206973206e6f6040820152671d081b1a5cdd195960c21b606082015260800190565b60208082526027908201527f6f6e6c7920706175736520677561726469616e20616e642061646d696e2063616040820152666e20706175736560c81b606082015260800190565b6020808252601690820152756f6e6c792061646d696e2063616e20756e706175736560501b604082015260600190565b60006020828403121561529e57600080fd5b815161158581614aa8565b6000602082840312156152bb57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156152ea57600080fd5b815161158581614abd565b634e487b7160e01b600052600160045260246000fd5b6000806000806080858703121561532157600080fd5b505082516020840151604085015160609095015191969095509092509050565b634e487b7160e01b600052603160045260246000fd5b6000821982111561536a5761536a615185565b500190565b600081600019048311821515161561538957615389615185565b500290565b6000826153ab57634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b818110156153dd578581018301518582016040015282016153c1565b818111156153ef576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220e8ebe49b2e7b498ccb9b786dc415308a311b4018cfe83d434e848377b0108e7964736f6c634300080a0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x543B DUP1 PUSH2 0x32 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x48A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x731F0C2B GT PUSH2 0x262 JUMPI DUP1 PUSH4 0xB21BE7FD GT PUSH2 0x151 JUMPI DUP1 PUSH4 0xDCE15449 GT PUSH2 0xCE JUMPI DUP1 PUSH4 0xE9AF0292 GT PUSH2 0x92 JUMPI DUP1 PUSH4 0xE9AF0292 EQ PUSH2 0xC04 JUMPI DUP1 PUSH4 0xEABE7D91 EQ PUSH2 0xC17 JUMPI DUP1 PUSH4 0xEDE4EDD0 EQ PUSH2 0xC2A JUMPI DUP1 PUSH4 0xF00A7A92 EQ PUSH2 0xC3D JUMPI DUP1 PUSH4 0xF4A433C0 EQ PUSH2 0xC4A JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0xC6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xDCE15449 EQ PUSH2 0xBAE JUMPI DUP1 PUSH4 0xDCFBC0C7 EQ PUSH2 0xBC1 JUMPI DUP1 PUSH4 0xE4028EEE EQ PUSH2 0xBD4 JUMPI DUP1 PUSH4 0xE6653F3D EQ PUSH2 0xBE7 JUMPI DUP1 PUSH4 0xE8755446 EQ PUSH2 0xBFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC488847B GT PUSH2 0x115 JUMPI DUP1 PUSH4 0xC488847B EQ PUSH2 0xB15 JUMPI DUP1 PUSH4 0xCA0AF043 EQ PUSH2 0xB3D JUMPI DUP1 PUSH4 0xCC7EBDC4 EQ PUSH2 0xB68 JUMPI DUP1 PUSH4 0xD02F7351 EQ PUSH2 0xB88 JUMPI DUP1 PUSH4 0xDA3D454C EQ PUSH2 0xB9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB21BE7FD EQ PUSH2 0xA84 JUMPI DUP1 PUSH4 0xBB82AA5E EQ PUSH2 0xAAF JUMPI DUP1 PUSH4 0xBDCDC258 EQ PUSH2 0xAC2 JUMPI DUP1 PUSH4 0xBEA6B8B8 EQ PUSH2 0xAD5 JUMPI DUP1 PUSH4 0xC2998238 EQ PUSH2 0xAF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x94B2294B GT PUSH2 0x1DF JUMPI DUP1 PUSH4 0xA8B43948 GT PUSH2 0x1A3 JUMPI DUP1 PUSH4 0xA8B43948 EQ PUSH2 0xA2C JUMPI DUP1 PUSH4 0xAA900754 EQ PUSH2 0xA3F JUMPI DUP1 PUSH4 0xABFCEFFC EQ PUSH2 0xA48 JUMPI DUP1 PUSH4 0xAC0B0BB7 EQ PUSH2 0xA68 JUMPI DUP1 PUSH4 0xB0772D0B EQ PUSH2 0xA7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x94B2294B EQ PUSH2 0x9A9 JUMPI DUP1 PUSH4 0x986AB838 EQ PUSH2 0x9B2 JUMPI DUP1 PUSH4 0x9D1B5A0A EQ PUSH2 0x9D2 JUMPI DUP1 PUSH4 0xA76B3FDA EQ PUSH2 0x9EC JUMPI DUP1 PUSH4 0xA7F0E231 EQ PUSH2 0x9FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8C57804E GT PUSH2 0x226 JUMPI DUP1 PUSH4 0x8C57804E EQ PUSH2 0x8B7 JUMPI DUP1 PUSH4 0x8E8F294B EQ PUSH2 0x8EF JUMPI DUP1 PUSH4 0x8EBF6364 EQ PUSH2 0x942 JUMPI DUP1 PUSH4 0x929FE9A1 EQ PUSH2 0x955 JUMPI DUP1 PUSH4 0x94543C15 EQ PUSH2 0x996 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x731F0C2B EQ PUSH2 0x83A JUMPI DUP1 PUSH4 0x741B2525 EQ PUSH2 0x85D JUMPI DUP1 PUSH4 0x7DC0D1D0 EQ PUSH2 0x870 JUMPI DUP1 PUSH4 0x85B7BEB8 EQ PUSH2 0x883 JUMPI DUP1 PUSH4 0x87F76303 EQ PUSH2 0x8A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4A584432 GT PUSH2 0x37E JUMPI DUP1 PUSH4 0x5EC88C79 GT PUSH2 0x2FB JUMPI DUP1 PUSH4 0x6A56947E GT PUSH2 0x2BF JUMPI DUP1 PUSH4 0x6A56947E EQ PUSH2 0x77F JUMPI DUP1 PUSH4 0x6AA875B5 EQ PUSH2 0x78D JUMPI DUP1 PUSH4 0x6B79C38D EQ PUSH2 0x7AD JUMPI DUP1 PUSH4 0x6D154EA5 EQ PUSH2 0x809 JUMPI DUP1 PUSH4 0x6D35BF91 EQ PUSH2 0x82C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5EC88C79 EQ PUSH2 0x720 JUMPI DUP1 PUSH4 0x5F5AF1AA EQ PUSH2 0x733 JUMPI DUP1 PUSH4 0x5FC7E71E EQ PUSH2 0x746 JUMPI DUP1 PUSH4 0x607EF6C1 EQ PUSH2 0x759 JUMPI DUP1 PUSH4 0x6810DFA6 EQ PUSH2 0x76C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x51DFF989 GT PUSH2 0x342 JUMPI DUP1 PUSH4 0x51DFF989 EQ PUSH2 0x6C1 JUMPI DUP1 PUSH4 0x52D84D1E EQ PUSH2 0x6D4 JUMPI DUP1 PUSH4 0x55EE1FE1 EQ PUSH2 0x6E7 JUMPI DUP1 PUSH4 0x598EE1CB EQ PUSH2 0x6FA JUMPI DUP1 PUSH4 0x5C778605 EQ PUSH2 0x70D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4A584432 EQ PUSH2 0x644 JUMPI DUP1 PUSH4 0x4ADA90AF EQ PUSH2 0x664 JUMPI DUP1 PUSH4 0x4E79238F EQ PUSH2 0x66D JUMPI DUP1 PUSH4 0x4EF4C3E1 EQ PUSH2 0x69B JUMPI DUP1 PUSH4 0x4FD42E17 EQ PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x26782247 GT PUSH2 0x40C JUMPI DUP1 PUSH4 0x3BCF7EC1 GT PUSH2 0x3D0 JUMPI DUP1 PUSH4 0x3BCF7EC1 EQ PUSH2 0x5ED JUMPI DUP1 PUSH4 0x3C94786F EQ PUSH2 0x600 JUMPI DUP1 PUSH4 0x41C728B9 EQ PUSH2 0x614 JUMPI DUP1 PUSH4 0x42CBB15C EQ PUSH2 0x628 JUMPI DUP1 PUSH4 0x47EF3B3B EQ PUSH2 0x62E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x26782247 EQ PUSH2 0x58E JUMPI DUP1 PUSH4 0x27EFE3CB EQ PUSH2 0x5A1 JUMPI DUP1 PUSH4 0x2D70DB78 EQ PUSH2 0x5B4 JUMPI DUP1 PUSH4 0x317B0B77 EQ PUSH2 0x5C7 JUMPI DUP1 PUSH4 0x391957D7 EQ PUSH2 0x5DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1D7B33D7 GT PUSH2 0x453 JUMPI DUP1 PUSH4 0x1D7B33D7 EQ PUSH2 0x4FA JUMPI DUP1 PUSH4 0x1EDEDC91 EQ PUSH2 0x528 JUMPI DUP1 PUSH4 0x21AF4569 EQ PUSH2 0x53D JUMPI DUP1 PUSH4 0x24008A62 EQ PUSH2 0x568 JUMPI DUP1 PUSH4 0x24A3D622 EQ PUSH2 0x57B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x7E3DD2 EQ PUSH2 0x48F JUMPI DUP1 PUSH4 0x16B95E8F EQ PUSH2 0x4AC JUMPI DUP1 PUSH4 0x18C882A5 EQ PUSH2 0x4C1 JUMPI DUP1 PUSH4 0x1C3DB2E0 EQ PUSH2 0x4D4 JUMPI DUP1 PUSH4 0x1D504DC6 EQ PUSH2 0x4E7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x497 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4BF PUSH2 0x4BA CALLDATASIZE PUSH1 0x4 PUSH2 0x4A3C JUMP JUMPDEST PUSH2 0xC7D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x497 PUSH2 0x4CF CALLDATASIZE PUSH1 0x4 PUSH2 0x4ACB JUMP JUMPDEST PUSH2 0xF26 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x4E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4BE3 JUMP JUMPDEST PUSH2 0x105F JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x4F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x10C2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x508 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x536 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C50 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x15 SLOAD PUSH2 0x550 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x576 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CAB JUMP JUMPDEST PUSH2 0x1240 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x550 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x550 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x5AF CALLDATASIZE PUSH1 0x4 PUSH2 0x4CFC JUMP JUMPDEST PUSH2 0x12FE JUMP JUMPDEST PUSH2 0x497 PUSH2 0x5C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D28 JUMP JUMPDEST PUSH2 0x13F5 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x5D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D45 JUMP JUMPDEST PUSH2 0x14E5 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x5E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x158C JUMP JUMPDEST PUSH2 0x497 PUSH2 0x5FB CALLDATASIZE PUSH1 0x4 PUSH2 0x4ACB JUMP JUMPDEST PUSH2 0x1656 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x497 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x622 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D5E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST TIMESTAMP PUSH2 0x51A JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x63C CALLDATASIZE PUSH1 0x4 PUSH2 0x4DA4 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x51A PUSH2 0x652 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x680 PUSH2 0x67B CALLDATASIZE PUSH1 0x4 PUSH2 0x4D5E JUMP JUMPDEST PUSH2 0x1780 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x6A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E12 JUMP JUMPDEST PUSH2 0x17C0 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x6BC CALLDATASIZE PUSH1 0x4 PUSH2 0x4D45 JUMP JUMPDEST PUSH2 0x1861 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x6CF CALLDATASIZE PUSH1 0x4 PUSH2 0x4D5E JUMP JUMPDEST PUSH2 0x18BE JUMP JUMPDEST PUSH2 0x550 PUSH2 0x6E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D45 JUMP JUMPDEST PUSH2 0x190D JUMP JUMPDEST PUSH2 0x51A PUSH2 0x6F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x1937 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x708 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CFC JUMP JUMPDEST PUSH2 0x19B0 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x71B CALLDATASIZE PUSH1 0x4 PUSH2 0x4E12 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x680 PUSH2 0x72E CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x1AA4 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x741 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x1ADF JUMP JUMPDEST PUSH2 0x51A PUSH2 0x754 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E53 JUMP JUMPDEST PUSH2 0x1B58 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x767 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A3C JUMP JUMPDEST PUSH2 0x1D27 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x77A CALLDATASIZE PUSH1 0x4 PUSH2 0x4F1B JUMP JUMPDEST PUSH2 0x1F05 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x622 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CAB JUMP JUMPDEST PUSH2 0x51A PUSH2 0x79B CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x7E5 PUSH2 0x7BB CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x497 PUSH2 0x817 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x536 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E53 JUMP JUMPDEST PUSH2 0x497 PUSH2 0x848 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x86B CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x218F JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x550 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x891 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x497 SWAP1 PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x7E5 PUSH2 0x8C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP3 JUMP JUMPDEST PUSH2 0x923 PUSH2 0x8FD CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP3 SWAP2 AND DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 ISZERO ISZERO DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x497 PUSH2 0x950 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D28 JUMP JUMPDEST PUSH2 0x223B JUMP JUMPDEST PUSH2 0x497 PUSH2 0x963 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FA4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP4 ADD SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x497 PUSH2 0x9A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x2322 JUMP JUMPDEST PUSH2 0x51A PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x9C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH20 0xD86C8D4279CCAFBEC840C782BCC50D201F277419 PUSH2 0x550 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x9FA CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x23E1 JUMP JUMPDEST PUSH2 0xA14 PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0xA3A CALLDATASIZE PUSH1 0x4 PUSH2 0x502D JUMP JUMPDEST PUSH2 0x2513 JUMP JUMPDEST PUSH2 0x51A PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH2 0xA5B PUSH2 0xA56 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x2648 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4A3 SWAP2 SWAP1 PUSH2 0x50B5 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x497 SWAP1 PUSH1 0x1 PUSH1 0xB8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xA5B PUSH2 0x26BE JUMP JUMPDEST PUSH2 0x51A PUSH2 0xA92 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FA4 JUMP JUMPDEST PUSH1 0x12 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x550 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xAD0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CAB JUMP JUMPDEST PUSH2 0x2720 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xAE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x18 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xB08 PUSH2 0xB03 CALLDATASIZE PUSH1 0x4 PUSH2 0x5102 JUMP JUMPDEST PUSH2 0x27AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4A3 SWAP2 SWAP1 PUSH2 0x5137 JUMP JUMPDEST PUSH2 0xB28 PUSH2 0xB23 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E12 JUMP JUMPDEST PUSH2 0x2873 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xB4B CALLDATASIZE PUSH1 0x4 PUSH2 0x4FA4 JUMP JUMPDEST PUSH1 0x13 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xB76 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xB96 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E53 JUMP JUMPDEST PUSH2 0x2A91 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xBA9 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E12 JUMP JUMPDEST PUSH2 0x2C38 JUMP JUMPDEST PUSH2 0x550 PUSH2 0xBBC CALLDATASIZE PUSH1 0x4 PUSH2 0x4CFC JUMP JUMPDEST PUSH2 0x3008 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x550 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xBE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CFC JUMP JUMPDEST PUSH2 0x3040 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x497 SWAP1 PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0xC12 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x31D2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xC25 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E12 JUMP JUMPDEST PUSH2 0x3236 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xC38 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x3271 JUMP JUMPDEST PUSH1 0x1B SLOAD PUSH2 0x497 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xC58 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x550 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCE6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792061646D696E2063616E2063616C6C20746869732066756E6374696F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1B SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD48 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C72656164792065786563757465642074686973206F6E652D6F6666206675 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x3731BA34B7B7 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCDD JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0xD87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x125B9D985B1A59081A5B9C1D5D PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0xF0E JUMPI DUP9 DUP9 DUP3 DUP2 DUP2 LT PUSH2 0xDAA JUMPI PUSH2 0xDAA PUSH2 0x516F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xDBF SWAP2 SWAP1 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP6 POP SWAP4 POP DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0xDEF JUMPI PUSH2 0xDEF PUSH2 0x516F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP3 POP DUP4 DUP4 GT ISZERO PUSH2 0xE93 JUMPI PUSH1 0x0 PUSH2 0xE0C DUP6 DUP6 PUSH2 0x519B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH2 0xE32 DUP3 DUP5 PUSH2 0x35D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH32 0x17FEA09D9A7CA41B2F9F9118F18F44848A62E9C70D55DD4385131EB2CF1B7E47 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP7 SWAP6 POP POP POP POP JUMPDEST DUP3 ISZERO PUSH2 0xEFE JUMPI PUSH2 0xEA3 DUP5 DUP5 PUSH2 0x35E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP9 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE SWAP3 SWAP5 POP SWAP1 SWAP2 PUSH32 0x4A5C134E28B537A76546993EA37F3B60D9190476DF7356D3842AA40902E20F04 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH2 0xF07 DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP1 POP PUSH2 0xD90 JUMP JUMPDEST POP POP PUSH1 0x1B DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xF5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x51CD JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0xF81 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0xF9D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x5215 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0xFB8 JUMPI POP PUSH1 0x1 DUP3 ISZERO ISZERO EQ JUMPDEST PUSH2 0xFD4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x525C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x60 SWAP2 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x6 SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH6 0x426F72726F77 PUSH1 0xD0 SHL PUSH1 0x80 DUP5 ADD MSTORE SWAP1 DUP3 ADD MSTORE PUSH32 0x71AEC636243F9709BB0007AE15E9AFB8150AB01716D75FD7573BE5CC096E03B0 SWAP1 PUSH1 0xA0 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP DUP1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1095 JUMPI PUSH2 0x1095 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH2 0x71B DUP2 DUP4 PUSH1 0x1 DUP1 PUSH2 0x1F05 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF851A440 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1100 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1124 SWAP2 SWAP1 PUSH2 0x528C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1194 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C7920756E6974726F6C6C65722061646D696E2063616E206368616E6765 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x20627261696E73 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCDD JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC1E80334 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11F8 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST ISZERO PUSH2 0x123D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x18DA185B99D9481B9BDD08185D5D1A1BDC9A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1268 JUMPI POP PUSH1 0x9 PUSH2 0x12F6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAA5AF0FD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12D7 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 MSTORE SWAP1 POP PUSH2 0x12E5 DUP7 DUP3 PUSH2 0x35EF JUMP JUMPDEST PUSH2 0x12F0 DUP7 DUP6 DUP4 PUSH2 0x37E2 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1306 PUSH2 0x3962 JUMP JUMPDEST PUSH2 0x1352 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E206772616E7420636F6D7000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x135E DUP4 DUP4 PUSH2 0x398B JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x13AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E7420636F6D7020666F72206772616E740000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x98B2F82A3A07F223A0BE64B3D0F47711C64DCCD1FEAFB94AA28156B38CD9695C SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x141B JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0x1437 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x5215 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x1452 JUMPI POP PUSH1 0x1 DUP3 ISZERO ISZERO EQ JUMPDEST PUSH2 0x146E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x525C JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD DUP4 ISZERO ISZERO PUSH1 0x1 PUSH1 0xB8 SHL MUL PUSH1 0xFF PUSH1 0xB8 SHL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xEF159D9A32B2472E32B098F954F3CE62D232939F1C207070B584DF1814DE2DE0 SWAP1 PUSH2 0x14D9 SWAP1 DUP5 SWAP1 PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0x5 SWAP1 DUP3 ADD MSTORE PUSH5 0x5365697A65 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1540 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E2073657420636C6F736520666163746F7200 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x3B9670CF975D26958E754B57098EAA2AC914D8D2A31B83257997B9F346110FD9 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x15F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E2073657420626F72726F7720636170206775 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x30B93234B0B7 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x15 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 AND DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH32 0xEDA98690E518E9A05F8EC6837663E188211B2DA8F4906648B323F2C1D4434E29 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x168E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x51CD JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x16B1 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0x16CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x5215 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x16E8 JUMPI POP PUSH1 0x1 DUP3 ISZERO ISZERO EQ JUMPDEST PUSH2 0x1704 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x525C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x60 SWAP2 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x4 SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH4 0x135A5B9D PUSH1 0xE2 SHL PUSH1 0x80 DUP5 ADD MSTORE SWAP1 DUP3 ADD MSTORE PUSH32 0x71AEC636243F9709BB0007AE15E9AFB8150AB01716D75FD7573BE5CC096E03B0 SWAP1 PUSH1 0xA0 ADD PUSH2 0x104E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1795 DUP11 DUP11 DUP11 DUP11 PUSH2 0x3AB0 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP3 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x17AD JUMPI PUSH2 0x17AD PUSH2 0x52C2 JUMP JUMPDEST SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x181A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1B5A5B9D081A5CC81C185D5CD959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1844 JUMPI PUSH1 0x9 JUMPDEST SWAP1 POP PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x184D DUP5 PUSH2 0x3DDE JUMP JUMPDEST PUSH2 0x1857 DUP5 DUP5 PUSH2 0x3F56 JUMP JUMPDEST PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1880 JUMPI PUSH2 0x1059 PUSH1 0x1 PUSH1 0xB PUSH2 0x40F4 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0xAEBA5A6C40A8AC138134BFF1AAA65DEBF25971188A58804BAD717F82F0EC1316 SWAP2 ADD PUSH2 0x157A JUMP JUMPDEST DUP1 ISZERO DUP1 ISZERO PUSH2 0x18CC JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST ISZERO PUSH2 0x622 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x72656465656D546F6B656E73207A65726F PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0xD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x191D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1956 JUMPI PUSH2 0x1059 PUSH1 0x1 PUSH1 0x10 PUSH2 0x40F4 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 AND DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH32 0xD52B2B9B7E9EE655FCB95D2E5B9E0C9F69E7EF2B8E9D2D0EA78402D576D22E22 SWAP2 ADD PUSH2 0x157A JUMP JUMPDEST PUSH2 0x19B8 PUSH2 0x3962 JUMP JUMPDEST PUSH2 0x1A04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E2073657420636F6D70207370656564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH2 0x1A0D DUP3 PUSH2 0x218F JUMP JUMPDEST DUP1 PUSH2 0x1A30 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x18 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x1A4B JUMP JUMPDEST TIMESTAMP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x18 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE MLOAD PUSH32 0x386537FA92EDC3319AF95F1F904DCF1900021E4F3F4E08169A577A09076E66B3 SWAP1 PUSH2 0x1A98 SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1ABB DUP8 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3AB0 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP3 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x1AD3 JUMPI PUSH2 0x1AD3 PUSH2 0x52C2 JUMP JUMPDEST SWAP8 SWAP2 SWAP7 POP SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1AFE JUMPI PUSH2 0x1059 PUSH1 0x1 PUSH1 0x13 PUSH2 0x40F4 JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 AND DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH32 0x613B6EE6A04F0D09F390E4D9318894B9F6AC7FD83897CD8D18896BA579C401E SWAP2 ADD PUSH2 0x157A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO DUP1 PUSH2 0x1B99 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0x1BA8 JUMPI PUSH1 0x9 JUMPDEST SWAP1 POP PUSH2 0x1D1E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95DD9193 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP9 AND SWAP1 PUSH4 0x95DD9193 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BF2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C16 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 POP PUSH2 0x1C21 DUP8 PUSH2 0x2322 JUMP JUMPDEST ISZERO PUSH2 0x1C8C JUMPI DUP3 DUP2 LT ISZERO PUSH2 0x1C87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E206E6F74207265706179206D6F7265207468616E2074686520746F7461 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6C20626F72726F77 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH2 0x1D18 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C98 DUP7 PUSH2 0x416D JUMP JUMPDEST SWAP2 SWAP4 POP SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 POP DUP3 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x1CB4 JUMPI PUSH2 0x1CB4 PUSH2 0x52C2 JUMP JUMPDEST EQ PUSH2 0x1CD5 JUMPI DUP2 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x1CCB JUMPI PUSH2 0x1CCB PUSH2 0x52C2 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x1D1E JUMP JUMPDEST DUP1 PUSH2 0x1CE1 JUMPI PUSH1 0x3 PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CFD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 SLOAD DUP2 MSTORE POP DUP6 PUSH2 0x418D JUMP JUMPDEST SWAP1 POP DUP1 DUP7 GT ISZERO PUSH2 0x1D14 JUMPI PUSH1 0x11 SWAP5 POP POP POP POP POP PUSH2 0x1D1E JUMP JUMPDEST POP POP POP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x1D4A JUMPI POP PUSH1 0x15 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0x1DB4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E206F7220626F72726F77206361702067756172646961 PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0x6E2063616E2073657420626F72726F772063617073 PUSH1 0x58 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCDD JUMP JUMPDEST DUP3 DUP2 DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1DC4 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x1E00 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x1A5B9D985B1A59081A5B9C1D5D PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1EFC JUMPI DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x1E1D JUMPI PUSH2 0x1E1D PUSH2 0x516F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x16 PUSH1 0x0 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x1E3A JUMPI PUSH2 0x1E3A PUSH2 0x516F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1E4F SWAP2 SWAP1 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x1E7B JUMPI PUSH2 0x1E7B PUSH2 0x516F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1E90 SWAP2 SWAP1 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x6F1951B2AAD10F3FC81B86D91105B413A5B3F847A34BBC5CE1904201B14438F6 DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x1ECC JUMPI PUSH2 0x1ECC PUSH2 0x516F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x40 MLOAD PUSH2 0x1EE2 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH2 0x1EF4 DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1E03 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x20CC JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1F25 JUMPI PUSH2 0x1F25 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND PUSH2 0x1F95 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1B585C9AD95D081B5D5CDD081899481B1A5CDD1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x1 DUP5 ISZERO ISZERO EQ ISZERO PUSH2 0x2062 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAA5AF0FD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FEB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x200F SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 MSTORE SWAP1 POP PUSH2 0x201D DUP3 DUP3 PUSH2 0x35EF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x205F JUMPI PUSH2 0x204D DUP4 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x203F JUMPI PUSH2 0x203F PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH2 0x37E2 JUMP JUMPDEST DUP1 PUSH2 0x2057 DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2020 JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 DUP4 ISZERO ISZERO EQ ISZERO PUSH2 0x20B9 JUMPI PUSH2 0x2076 DUP2 PUSH2 0x3DDE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x20B7 JUMPI PUSH2 0x20A5 DUP3 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2098 JUMPI PUSH2 0x2098 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3F56 JUMP JUMPDEST DUP1 PUSH2 0x20AF DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2079 JUMP JUMPDEST POP JUMPDEST POP DUP1 PUSH2 0x20C4 DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1F08 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x536 JUMPI PUSH2 0x213A DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x20EE JUMPI PUSH2 0x20EE PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x14 PUSH1 0x0 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x210C JUMPI PUSH2 0x210C PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x398B JUMP JUMPDEST PUSH1 0x14 PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2150 JUMPI PUSH2 0x2150 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0x2187 SWAP1 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x20D0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x18 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD SWAP1 SWAP2 TIMESTAMP SWAP2 PUSH2 0x21C2 SWAP1 DUP4 SWAP1 PUSH2 0x35E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x21D4 JUMPI POP PUSH1 0x0 DUP4 GT JUMPDEST ISZERO PUSH2 0x622 JUMPI PUSH1 0x0 PUSH2 0x21E5 DUP3 DUP6 PUSH2 0x41A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x220C SWAP1 DUP4 PUSH2 0x35D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x18 SWAP1 MSTORE KECCAK256 DUP5 SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x2261 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0x227D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x5215 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x2298 JUMPI POP PUSH1 0x1 DUP3 ISZERO ISZERO EQ JUMPDEST PUSH2 0x22B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x525C JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD DUP4 ISZERO ISZERO PUSH1 0x1 PUSH1 0xB0 SHL MUL PUSH1 0xFF PUSH1 0xB0 SHL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xEF159D9A32B2472E32B098F954F3CE62D232939F1C207070B584DF1814DE2DE0 SWAP1 PUSH2 0x14D9 SWAP1 DUP5 SWAP1 PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0x8 SWAP1 DUP3 ADD MSTORE PUSH8 0x2A3930B739B332B9 PUSH1 0xC1 SHL PUSH1 0x60 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD ISZERO DUP1 ISZERO PUSH2 0x2368 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ JUMPDEST DUP1 ISZERO PUSH2 0x1059 JUMPI POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x173B9904 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x23AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x23D1 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2400 JUMPI PUSH2 0x1059 PUSH1 0x1 PUSH1 0x12 PUSH2 0x40F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x242D JUMPI PUSH2 0x1059 PUSH1 0xA PUSH1 0x11 PUSH2 0x40F4 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFE9C44AE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x246B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x248F SWAP2 SWAP1 PUSH2 0x52D8 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR DUP4 SSTORE PUSH1 0x3 DUP4 ADD DUP1 SLOAD SWAP1 SWAP3 AND SWAP1 SWAP2 SSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x24D1 DUP4 PUSH2 0x41B1 JUMP JUMPDEST PUSH2 0x24DA DUP4 PUSH2 0x429A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH32 0xCF583BB0C569EB967F806B11601C4CB93C10310485C67ADD5F8362C2F212321F SWAP1 PUSH1 0x20 ADD PUSH2 0x157A JUMP JUMPDEST PUSH2 0x251B PUSH2 0x3962 JUMP JUMPDEST PUSH2 0x2567 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E2073657420636F6D70207370656564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST DUP3 MLOAD DUP3 MLOAD DUP2 EQ DUP1 ISZERO PUSH2 0x2579 JUMPI POP DUP2 MLOAD DUP2 EQ JUMPDEST PUSH2 0x25D7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6D7074726F6C6C65723A3A5F736574436F6D7053706565647320696E7661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1B1A59081A5B9C1D5D PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x536 JUMPI PUSH2 0x2638 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x25F7 JUMPI PUSH2 0x25F7 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2611 JUMPI PUSH2 0x2611 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x262B JUMPI PUSH2 0x262B PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4356 JUMP JUMPDEST PUSH2 0x2641 DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP1 POP PUSH2 0x25DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH1 0x60 SWAP5 SWAP4 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x26B1 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2693 JUMPI JUMPDEST POP SWAP4 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x2716 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x26F8 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x2772 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1D1C985B9CD9995C881A5CC81C185D5CD959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x277F DUP7 DUP7 DUP6 PUSH2 0x4535 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x278E JUMPI SWAP1 POP PUSH2 0x12F6 JUMP JUMPDEST PUSH2 0x2797 DUP7 PUSH2 0x3DDE JUMP JUMPDEST PUSH2 0x27A1 DUP7 DUP7 PUSH2 0x3F56 JUMP JUMPDEST PUSH2 0x12F0 DUP7 DUP6 PUSH2 0x3F56 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27CB JUMPI PUSH2 0x27CB PUSH2 0x4B04 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x27F4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x286B JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2816 JUMPI PUSH2 0x2816 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x282A DUP2 CALLER PUSH2 0x45ED JUMP JUMPDEST PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x283B JUMPI PUSH2 0x283B PUSH2 0x52C2 JUMP JUMPDEST DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x284D JUMPI PUSH2 0x284D PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP DUP1 PUSH2 0x2863 DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x27FA JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xFC57D4DF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 SWAP2 AND SWAP1 PUSH4 0xFC57D4DF SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x28C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x28EA SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xFC57D4DF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 SWAP2 AND SWAP1 PUSH4 0xFC57D4DF SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x293C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2960 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x296D JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x2981 JUMPI PUSH1 0xD PUSH1 0x0 SWAP4 POP SWAP4 POP POP POP PUSH2 0x2A89 JUMP JUMPDEST PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x182DF0F5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x29E5 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x29FF PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP4 ADD DUP6 MSTORE SWAP1 DUP2 MSTORE DUP4 MLOAD DUP1 DUP4 ADD DUP6 MSTORE PUSH1 0x6 SLOAD DUP2 MSTORE DUP5 MLOAD SWAP3 DUP4 ADD SWAP1 SWAP5 MSTORE DUP9 DUP3 MSTORE SWAP2 SWAP3 PUSH2 0x2A3B SWAP2 PUSH2 0x46E2 JUMP JUMPDEST SWAP3 POP PUSH2 0x2A63 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE POP PUSH2 0x46E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x2A6F DUP4 DUP4 PUSH2 0x472A JUMP JUMPDEST SWAP1 POP PUSH2 0x2A7B DUP2 DUP12 PUSH2 0x418D JUMP JUMPDEST PUSH1 0x0 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xB8 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x2AE0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1CD95A5E99481A5CC81C185D5CD959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO DUP1 PUSH2 0x2B21 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0x2B2D JUMPI PUSH1 0x9 PUSH2 0x1BA1 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5FE3B567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2B6B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2B8F SWAP2 SWAP1 PUSH2 0x528C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5FE3B567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2BD6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BFA SWAP2 SWAP1 PUSH2 0x528C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2C0F JUMPI PUSH1 0x2 PUSH2 0x1BA1 JUMP JUMPDEST PUSH2 0x2C18 DUP7 PUSH2 0x3DDE JUMP JUMPDEST PUSH2 0x2C22 DUP7 DUP5 PUSH2 0x3F56 JUMP JUMPDEST PUSH2 0x2C2C DUP7 DUP6 PUSH2 0x3F56 JUMP JUMPDEST PUSH1 0x0 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2C94 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x189BDC9C9BDDC81A5CC81C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2CBB JUMPI PUSH1 0x9 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP4 ADD SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2DB8 JUMPI CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EQ PUSH2 0x2D3C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x39B2B73232B91036BAB9BA1031329031AA37B5B2B7 PUSH1 0x59 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D48 CALLER DUP6 PUSH2 0x45ED JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x2D5E JUMPI PUSH2 0x2D5E PUSH2 0x52C2 JUMP JUMPDEST EQ PUSH2 0x2D7D JUMPI DUP1 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x2D75 JUMPI PUSH2 0x2D75 PUSH2 0x52C2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1585 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP4 ADD SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2DB6 JUMPI PUSH2 0x2DB6 PUSH2 0x52F5 JUMP JUMPDEST POP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xFC57D4DF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 AND SWAP1 PUSH4 0xFC57D4DF SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E04 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E28 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST PUSH2 0x2E33 JUMPI PUSH1 0xD PUSH2 0x183D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x2F18 JUMPI PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x47BD3718 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E92 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2EB6 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2EC4 DUP3 DUP7 PUSH2 0x35D7 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT PUSH2 0x2F15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D61726B657420626F72726F7720636170207265616368656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2F28 DUP7 DUP9 PUSH1 0x0 DUP9 PUSH2 0x3AB0 JUMP JUMPDEST SWAP2 SWAP4 POP SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 POP DUP3 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x2F44 JUMPI PUSH2 0x2F44 PUSH2 0x52C2 JUMP JUMPDEST EQ PUSH2 0x2F65 JUMPI DUP2 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x2F5B JUMPI PUSH2 0x2F5B PUSH2 0x52C2 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x1585 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2F72 JUMPI PUSH1 0x4 PUSH2 0x2F5B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAA5AF0FD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2FBD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2FE1 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 MSTORE SWAP1 POP PUSH2 0x2FEF DUP9 DUP3 PUSH2 0x35EF JUMP JUMPDEST PUSH2 0x2FFA DUP9 DUP9 DUP4 PUSH2 0x37E2 JUMP JUMPDEST PUSH1 0x0 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3024 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP DUP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3066 JUMPI PUSH2 0x305F PUSH1 0x1 PUSH1 0x6 PUSH2 0x40F4 JUMP JUMPDEST SWAP1 POP PUSH2 0x1059 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x309B JUMPI PUSH2 0x3093 PUSH1 0x9 PUSH1 0x7 PUSH2 0x40F4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1059 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP4 MSTORE DUP6 DUP3 MSTORE DUP3 MLOAD SWAP1 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH8 0xC7D713B49DA0000 DUP3 MSTORE SWAP1 PUSH2 0x30C9 DUP2 DUP4 MLOAD SWAP1 MLOAD LT SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x30E4 JUMPI PUSH2 0x30DA PUSH1 0x6 PUSH1 0x8 PUSH2 0x40F4 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x1059 JUMP JUMPDEST DUP5 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3160 JUMPI POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xFC57D4DF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 AND SWAP1 PUSH4 0xFC57D4DF SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x313A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x315E SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x3171 JUMPI PUSH2 0x30DA PUSH1 0xD PUSH1 0x9 PUSH2 0x40F4 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD DUP1 SLOAD SWAP1 DUP7 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE PUSH32 0x70483E6592CD5182D45AC970E05BC62CDCC90E9D8EF2C2DBE686CF383BCD7FC5 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x123D DUP2 PUSH1 0xD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x322C JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x320E JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x105F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3244 DUP6 DUP6 DUP6 PUSH2 0x4535 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x3253 JUMPI SWAP1 POP PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x325C DUP6 PUSH2 0x3DDE JUMP JUMPDEST PUSH2 0x3266 DUP6 DUP6 PUSH2 0x3F56 JUMP JUMPDEST PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x61BFB471 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP3 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xC37F68E2 SWAP1 PUSH1 0x24 ADD PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x32C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x32E4 SWAP2 SWAP1 PUSH2 0x530B JUMP JUMPDEST POP SWAP3 POP SWAP3 POP SWAP3 POP DUP3 PUSH1 0x0 EQ PUSH2 0x3349 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x657869744D61726B65743A206765744163636F756E74536E617073686F742066 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x185A5B1959 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCDD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3365 JUMPI PUSH2 0x335B PUSH1 0xC PUSH1 0x2 PUSH2 0x40F4 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3372 DUP8 CALLER DUP6 PUSH2 0x4535 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x3392 JUMPI PUSH2 0x3387 PUSH1 0xE PUSH1 0x3 DUP4 PUSH2 0x4764 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x2 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x33D0 JUMPI PUSH1 0x0 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x8 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x3442 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3424 JUMPI JUMPDEST POP POP DUP4 MLOAD SWAP4 SWAP5 POP DUP4 SWAP3 POP PUSH1 0x0 SWAP2 POP POP JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x34A7 JUMPI DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3476 JUMPI PUSH2 0x3476 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x3495 JUMPI DUP1 SWAP2 POP PUSH2 0x34A7 JUMP JUMPDEST DUP1 PUSH2 0x349F DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3452 JUMP JUMPDEST POP DUP2 DUP2 LT PUSH2 0x34B7 JUMPI PUSH2 0x34B7 PUSH2 0x52F5 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP2 SWAP1 PUSH2 0x34D6 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x519B JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x34E6 JUMPI PUSH2 0x34E6 PUSH2 0x516F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3516 JUMPI PUSH2 0x3516 PUSH2 0x516F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP1 DUP1 SLOAD DUP1 PUSH2 0x3554 JUMPI PUSH2 0x3554 PUSH2 0x5341 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE ADD SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xE699A64C18B07AC5B7301AA273F36A2287239EB9501D81950672794AFBA29A0D SWAP1 PUSH2 0x35BD SWAP1 DUP13 SWAP1 CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1585 DUP3 DUP5 PUSH2 0x5357 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1585 DUP3 DUP5 PUSH2 0x519B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x19 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x3654 TIMESTAMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x626C6F636B206E756D6265722065786365656473203332206269747300000000 DUP2 MSTORE POP PUSH2 0x47DC JUMP JUMPDEST DUP4 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x3676 SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP6 AND SWAP2 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV AND PUSH2 0x35E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3688 JUMPI POP PUSH1 0x0 DUP4 GT JUMPDEST ISZERO PUSH2 0x37B7 JUMPI PUSH1 0x0 PUSH2 0x36FA DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x47BD3718 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36D0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36F4 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST DUP8 PUSH2 0x480C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3708 DUP4 DUP7 PUSH2 0x41A5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x3728 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x3732 JUMP JUMPDEST PUSH2 0x3732 DUP3 DUP5 PUSH2 0x482A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE DUP9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP2 MSTORE SWAP1 SWAP2 POP PUSH2 0x3795 SWAP1 PUSH2 0x375B SWAP1 DUP4 PUSH2 0x4865 JUMP JUMPDEST MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH32 0x6E657720696E6465782065786365656473203232342062697473000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x4891 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0xE0 SHL PUSH4 0xFFFFFFFF DUP8 AND MUL OR DUP8 SSTORE POP PUSH2 0x63C SWAP2 POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x63C JUMPI DUP4 SLOAD PUSH4 0xFFFFFFFF DUP4 AND PUSH1 0x1 PUSH1 0xE0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP2 AND OR DUP5 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x13 DUP5 MSTORE DUP3 DUP6 KECCAK256 SWAP6 DUP9 AND DUP6 MSTORE SWAP5 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP4 AND SWAP1 DUP2 SWAP1 SSTORE SWAP1 SWAP2 DUP1 ISZERO DUP1 ISZERO PUSH2 0x3842 JUMPI POP PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL DUP3 LT ISZERO JUMPDEST ISZERO PUSH2 0x3858 JUMPI POP PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x386F DUP6 DUP6 PUSH2 0x35E3 JUMP JUMPDEST SWAP1 MSTORE PUSH1 0x40 MLOAD PUSH4 0x95DD9193 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x38C2 SWAP2 SWAP1 DUP11 AND SWAP1 PUSH4 0x95DD9193 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36D0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x38D0 DUP3 DUP5 PUSH2 0x48B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x38F7 SWAP1 DUP4 PUSH2 0x35D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP1 DUP2 ADD DUP12 SWAP1 MSTORE SWAP4 SWAP5 POP SWAP1 SWAP3 SWAP2 DUP14 AND SWAP2 PUSH32 0x1FC3ECC087D8D2D15E23D0032AF5A47059C3892D003D8E139FDCB6BB327C99A6 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x3986 JUMPI POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xD86C8D4279CCAFBEC840C782BCC50D201F277419 PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x39ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3A11 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 GT DUP1 ISZERO PUSH2 0x3A23 JUMPI POP DUP1 DUP5 GT ISZERO JUMPDEST ISZERO PUSH2 0x3AA7 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3A77 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3A9B SWAP2 SWAP1 PUSH2 0x52D8 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x1059 JUMP JUMPDEST POP SWAP2 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3ABD PUSH2 0x494E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE DUP5 SWAP4 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x3B24 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3B06 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x3D88 JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B4B JUMPI PUSH2 0x3B4B PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x61BFB471 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP3 AND SWAP1 PUSH4 0xC37F68E2 SWAP1 PUSH1 0x24 ADD PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3BA0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3BC4 SWAP2 SWAP1 PUSH2 0x530B JUMP JUMPDEST PUSH1 0x80 DUP10 ADD MSTORE PUSH1 0x60 DUP9 ADD MSTORE PUSH1 0x40 DUP8 ADD MSTORE SWAP4 POP DUP4 ISZERO PUSH2 0x3BF0 JUMPI PUSH1 0xF PUSH1 0x0 DUP1 SWAP8 POP SWAP8 POP SWAP8 POP POP POP POP POP POP PUSH2 0x17B6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 DUP5 MSTORE DUP6 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD DUP5 MSTORE PUSH1 0xC0 DUP11 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 MLOAD DUP1 DUP4 ADD DUP6 MSTORE PUSH1 0x80 DUP11 ADD MLOAD DUP2 MSTORE PUSH1 0xE0 DUP11 ADD MSTORE PUSH1 0x4 DUP1 SLOAD DUP6 MLOAD PUSH4 0xFC57D4DF PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP4 MLOAD SWAP3 AND SWAP3 PUSH4 0xFC57D4DF SWAP3 PUSH1 0x24 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C75 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3C99 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST PUSH1 0xA0 DUP7 ADD DUP2 SWAP1 MSTORE PUSH2 0x3CB9 JUMPI PUSH1 0xD PUSH1 0x0 DUP1 SWAP8 POP SWAP8 POP SWAP8 POP POP POP POP POP POP PUSH2 0x17B6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP7 ADD MLOAD DUP2 MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH1 0xC0 DUP6 ADD MLOAD PUSH1 0xE0 DUP7 ADD MLOAD PUSH2 0x3CF3 SWAP2 PUSH2 0x3CE8 SWAP2 PUSH2 0x46E2 JUMP JUMPDEST DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0x46E2 JUMP JUMPDEST PUSH2 0x120 DUP7 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP7 ADD MLOAD DUP7 MLOAD PUSH2 0x3D0D SWAP3 SWAP2 SWAP1 PUSH2 0x48E1 JUMP JUMPDEST DUP6 MSTORE PUSH2 0x100 DUP6 ADD MLOAD PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x20 DUP8 ADD MLOAD PUSH2 0x3D2A SWAP3 SWAP2 SWAP1 PUSH2 0x48E1 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP1 DUP13 AND EQ ISZERO PUSH2 0x3D75 JUMPI PUSH2 0x3D57 DUP6 PUSH2 0x120 ADD MLOAD DUP12 DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x48E1 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x3D6F SWAP2 DUP12 SWAP1 PUSH2 0x48E1 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE JUMPDEST POP DUP1 PUSH2 0x3D80 DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3B2E JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD DUP4 MLOAD GT ISZERO PUSH2 0x3DB9 JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP4 MLOAD PUSH1 0x0 SWAP2 PUSH2 0x3DA9 SWAP2 PUSH2 0x519B JUMP JUMPDEST PUSH1 0x0 SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP PUSH2 0x17B6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x3DD0 SWAP2 SWAP1 PUSH2 0x519B JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP PUSH2 0x17B6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1A SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x3E0C TIMESTAMP PUSH2 0x3619 JUMP JUMPDEST DUP4 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x3E2E SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP6 AND SWAP2 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV AND PUSH2 0x35E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3E40 JUMPI POP PUSH1 0x0 DUP4 GT JUMPDEST ISZERO PUSH2 0x3F2C JUMPI PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3E85 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3EA9 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3EB7 DUP4 DUP7 PUSH2 0x41A5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x3ED7 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x3EE1 JUMP JUMPDEST PUSH2 0x3EE1 DUP3 DUP5 PUSH2 0x482A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE DUP9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP2 MSTORE SWAP1 SWAP2 POP PUSH2 0x3F0A SWAP1 PUSH2 0x375B SWAP1 DUP4 PUSH2 0x4865 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0xE0 SHL PUSH4 0xFFFFFFFF DUP8 AND MUL OR DUP8 SSTORE POP PUSH2 0x536 SWAP2 POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x536 JUMPI DUP4 SLOAD PUSH4 0xFFFFFFFF DUP4 AND PUSH1 0x1 PUSH1 0xE0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP2 AND OR DUP5 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x12 DUP5 MSTORE DUP3 DUP6 KECCAK256 SWAP6 DUP8 AND DUP6 MSTORE SWAP5 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP4 AND SWAP1 DUP2 SWAP1 SSTORE SWAP1 SWAP2 DUP1 ISZERO DUP1 ISZERO PUSH2 0x3FB6 JUMPI POP PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL DUP3 LT ISZERO JUMPDEST ISZERO PUSH2 0x3FCC JUMPI POP PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x3FE3 DUP6 DUP6 PUSH2 0x35E3 JUMP JUMPDEST SWAP1 MSTORE PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 DUP9 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4031 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4055 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4063 DUP3 DUP5 PUSH2 0x48B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x408A SWAP1 DUP4 PUSH2 0x35D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP1 DUP2 ADD DUP12 SWAP1 MSTORE SWAP4 SWAP5 POP SWAP1 SWAP3 SWAP2 DUP13 AND SWAP2 PUSH32 0x2CAECD17D02F56FA897705DCC740DA2D237C373F70686F4E0D9BD3BF0400EA7A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x45B96FE442630264581B197E84BBADA861235052C5A1AADFFF9EA4E40A969AA0 DUP4 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x4129 JUMPI PUSH2 0x4129 PUSH2 0x52C2 JUMP JUMPDEST DUP4 PUSH1 0x13 DUP2 GT ISZERO PUSH2 0x413B JUMPI PUSH2 0x413B PUSH2 0x52C2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP3 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x1585 JUMPI PUSH2 0x1585 PUSH2 0x52C2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4180 DUP5 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3AB0 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x419A DUP5 DUP5 PUSH2 0x4902 JUMP JUMPDEST SWAP1 POP PUSH2 0x12F6 DUP2 PUSH2 0x492A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1585 DUP3 DUP5 PUSH2 0x536F JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xD SLOAD DUP2 LT ISZERO PUSH2 0x4247 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x41DB JUMPI PUSH2 0x41DB PUSH2 0x516F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x4235 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x1B585C9AD95D08185B1C9958591E481859191959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST DUP1 PUSH2 0x423F DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x41B4 JUMP JUMPDEST POP PUSH1 0xD DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42A5 TIMESTAMP PUSH2 0x3619 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x11 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP2 SLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x42FB JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL OR DUP3 SSTORE JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x4329 JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL OR DUP2 SSTORE JUMPDEST DUP1 SLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0xE0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP4 DUP5 AND DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SLOAD SWAP1 SWAP3 AND SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x43BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636F6D70206D61726B6574206973206E6F74206C697374656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 EQ PUSH2 0x443D JUMPI PUSH2 0x43E7 DUP5 PUSH2 0x3DDE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE MLOAD PUSH32 0xDEAFCCD0C0B768B2529F7DCBBE58E155D6023059150B7490ED4535CC3744B92D SWAP1 PUSH2 0x4434 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 EQ PUSH2 0x622 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAA5AF0FD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x44A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x44CB SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 MSTORE SWAP1 POP PUSH2 0x44D9 DUP6 DUP3 PUSH2 0x35EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE MLOAD PUSH32 0x20AF8E791CC98F74B2D7A391C80980CA8E5AEBF3D4060BF581997B6ACAE2E537 SWAP1 PUSH2 0x4526 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x455C JUMPI PUSH1 0x9 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP4 ADD SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x4594 JUMPI PUSH1 0x0 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x45A4 DUP6 DUP8 DUP7 PUSH1 0x0 PUSH2 0x3AB0 JUMP JUMPDEST SWAP2 SWAP4 POP SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 POP DUP3 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x45C0 JUMPI PUSH2 0x45C0 PUSH2 0x52C2 JUMP JUMPDEST EQ PUSH2 0x45E0 JUMPI DUP2 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x45D7 JUMPI PUSH2 0x45D7 PUSH2 0x52C2 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1585 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2C2C JUMPI PUSH1 0x4 PUSH2 0x45D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x4618 JUMPI PUSH1 0x9 SWAP2 POP POP PUSH2 0x1059 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0x464A JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1059 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x8 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE DUP5 MSTORE SWAP3 DUP3 SWAP1 KECCAK256 SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP5 DUP10 AND SWAP5 DUP6 OR SWAP1 SSTORE DUP2 MLOAD SWAP4 DUP5 MSTORE DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x3AB23AB0D51CCCC0C3085AEC51F99228625AA1A922B3A8CA89A26B0F2027A1A5 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH8 0xDE0B6B3A7640000 PUSH2 0x4717 DUP7 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x41A5 JUMP JUMPDEST PUSH2 0x4721 SWAP2 SWAP1 PUSH2 0x538E JUMP JUMPDEST SWAP1 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x4721 PUSH2 0x475D DUP7 PUSH1 0x0 ADD MLOAD PUSH8 0xDE0B6B3A7640000 PUSH2 0x41A5 JUMP JUMPDEST DUP6 MLOAD PUSH2 0x4942 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x45B96FE442630264581B197E84BBADA861235052C5A1AADFFF9EA4E40A969AA0 DUP5 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x4799 JUMPI PUSH2 0x4799 PUSH2 0x52C2 JUMP JUMPDEST DUP5 PUSH1 0x13 DUP2 GT ISZERO PUSH2 0x47AB JUMPI PUSH2 0x47AB PUSH2 0x52C2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP4 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x12F6 JUMPI PUSH2 0x12F6 PUSH2 0x52C2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH5 0x100000000 DUP5 LT PUSH2 0x4804 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP2 SWAP1 PUSH2 0x53B0 JUMP JUMPDEST POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1585 PUSH2 0x4823 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0x41A5 JUMP JUMPDEST DUP4 MLOAD PUSH2 0x4942 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x4721 PUSH2 0x485F DUP7 PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL PUSH2 0x41A5 JUMP JUMPDEST DUP6 PUSH2 0x4942 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x4721 DUP6 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x35D7 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0xE0 SHL DUP5 LT PUSH2 0x4804 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP2 SWAP1 PUSH2 0x53B0 JUMP JUMPDEST PUSH1 0x0 PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL PUSH2 0x48D7 DUP5 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x41A5 JUMP JUMPDEST PUSH2 0x1585 SWAP2 SWAP1 PUSH2 0x538E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48EE DUP6 DUP6 PUSH2 0x4902 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D1E PUSH2 0x48FC DUP3 PUSH2 0x492A JUMP JUMPDEST DUP5 PUSH2 0x35D7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x4721 DUP6 PUSH1 0x0 ADD MLOAD DUP6 PUSH2 0x41A5 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x1059 SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x538E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1585 DUP3 DUP5 PUSH2 0x538E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x499A PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x49B5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x49D0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x49EB PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4A02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4A1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x4A35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4A52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4A6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4A76 DUP9 DUP4 DUP10 ADD PUSH2 0x49F0 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4A8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A9C DUP8 DUP3 DUP9 ADD PUSH2 0x49F0 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x123D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x123D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4ADE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4AE9 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4AF9 DUP2 PUSH2 0x4ABD JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x4B43 JUMPI PUSH2 0x4B43 PUSH2 0x4B04 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4B65 JUMPI PUSH2 0x4B65 PUSH2 0x4B04 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4B80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x4B95 PUSH2 0x4B90 DUP4 PUSH2 0x4B4B JUMP JUMPDEST PUSH2 0x4B1A JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x4BB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x4BD8 JUMPI DUP1 CALLDATALOAD PUSH2 0x4BCB DUP2 PUSH2 0x4AA8 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x4BB8 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4BF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4C01 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4C1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C29 DUP6 DUP3 DUP7 ADD PUSH2 0x4B6F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4C45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1585 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4C68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4C73 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4C83 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x4C93 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4CC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x4CCC DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x4CDC DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x4CEC DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4D0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4D1A DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4D3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1585 DUP2 PUSH2 0x4ABD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4D57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4D74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x4D7F DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x4D8F DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4DBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x4DC8 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x4DD8 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x4DE8 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH2 0x4DF8 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP5 PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4E27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x4E32 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x4E42 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4E6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4E76 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4E86 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x4E96 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x4EA6 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4EC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x4ED8 PUSH2 0x4B90 DUP4 PUSH2 0x4B4B JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x4EF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x4BD8 JUMPI DUP1 CALLDATALOAD PUSH2 0x4F0E DUP2 PUSH2 0x4AA8 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x4EFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4F31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4F49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4F55 DUP9 DUP4 DUP10 ADD PUSH2 0x4EB7 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4F6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F78 DUP8 DUP3 DUP9 ADD PUSH2 0x4B6F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x4F89 DUP2 PUSH2 0x4ABD JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x4F99 DUP2 PUSH2 0x4ABD JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4FB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4FC2 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4AF9 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4FE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x4FF3 PUSH2 0x4B90 DUP4 PUSH2 0x4B4B JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x5012 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x4BD8 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x5016 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5042 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x505A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5066 DUP8 DUP4 DUP9 ADD PUSH2 0x4B6F JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x507C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5088 DUP8 DUP4 DUP9 ADD PUSH2 0x4FD2 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x509E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x50AB DUP7 DUP3 DUP8 ADD PUSH2 0x4FD2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x50F6 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x50D1 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5114 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x512B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12F6 DUP5 DUP3 DUP6 ADD PUSH2 0x4EB7 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x50F6 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5153 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x51AD JUMPI PUSH2 0x51AD PUSH2 0x5185 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x51C6 JUMPI PUSH2 0x51C6 PUSH2 0x5185 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742070617573652061206D61726B65742074686174206973206E6F PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x1D081B1A5CDD1959 PUSH1 0xC2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x6F6E6C7920706175736520677561726469616E20616E642061646D696E206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH7 0x6E207061757365 PUSH1 0xC8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x6F6E6C792061646D696E2063616E20756E7061757365 PUSH1 0x50 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x529E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1585 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1585 DUP2 PUSH2 0x4ABD JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x5321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x536A JUMPI PUSH2 0x536A PUSH2 0x5185 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x5389 JUMPI PUSH2 0x5389 PUSH2 0x5185 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x53AB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x53DD JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x53C1 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x53EF JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 0xEB 0xE4 SWAP12 0x2E PUSH28 0x498CCB9B786DC415308A311B4018CFE83D434E848377B0108E796473 PUSH16 0x6C634300080A00330000000000000000 ",
          "sourceMap": "350:67698:2:-:0;;;4271:49;;;;;;;;;-1:-1:-1;4295:5:2;:18;;-1:-1:-1;;;;;;4295:18:2;4303:10;4295:18;;;350:67698;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_addMarketInternal_5040": {
              "entryPoint": 16817,
              "id": 5040,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_become_5492": {
              "entryPoint": 4290,
              "id": 5492,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_borrowGuardianPaused_6994": {
              "entryPoint": null,
              "id": 6994,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_grantComp_6544": {
              "entryPoint": 4862,
              "id": 6544,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_initializeMarket_5101": {
              "entryPoint": 17050,
              "id": 5101,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_mintGuardianPaused_6992": {
              "entryPoint": null,
              "id": 6992,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_setBorrowCapGuardian_5209": {
              "entryPoint": 5516,
              "id": 5209,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_setBorrowPaused_5378": {
              "entryPoint": 3878,
              "id": 5378,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_setCloseFactor_4749": {
              "entryPoint": 5349,
              "id": 4749,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_setCollateralFactor_4865": {
              "entryPoint": 12352,
              "id": 4865,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_setCompSpeeds_6607": {
              "entryPoint": 9491,
              "id": 6607,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_setContributorCompSpeed_6655": {
              "entryPoint": 6576,
              "id": 6655,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_setLiquidationIncentive_4906": {
              "entryPoint": 6241,
              "id": 4906,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_setMarketBorrowCaps_5181": {
              "entryPoint": 7463,
              "id": 5181,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_setMintPaused_5314": {
              "entryPoint": 5718,
              "id": 5314,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_setPauseGuardian_5250": {
              "entryPoint": 6879,
              "id": 5250,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_setPriceOracle_4713": {
              "entryPoint": 6455,
              "id": 4713,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_setSeizePaused_5466": {
              "entryPoint": 5109,
              "id": 5466,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_setTransferPaused_5422": {
              "entryPoint": 8763,
              "id": 5422,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_supportMarket_5002": {
              "entryPoint": 9185,
              "id": 5002,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@accountAssets_6967": {
              "entryPoint": 12296,
              "id": 6967,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@addToMarketInternal_3072": {
              "entryPoint": 17901,
              "id": 3072,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@add__7739": {
              "entryPoint": 18533,
              "id": 7739,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@add__7753": {
              "entryPoint": 13783,
              "id": 7753,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@adminOrInitializing_5652": {
              "entryPoint": 14690,
              "id": 5652,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@admin_6935": {
              "entryPoint": null,
              "id": 6935,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@allMarkets_7019": {
              "entryPoint": 6413,
              "id": 7019,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@borrowAllowed_3700": {
              "entryPoint": 11320,
              "id": 3700,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@borrowCapGuardian_7063": {
              "entryPoint": null,
              "id": 7063,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@borrowCaps_7067": {
              "entryPoint": null,
              "id": 7067,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@borrowGuardianPaused_7006": {
              "entryPoint": null,
              "id": 7006,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@borrowVerify_3725": {
              "entryPoint": null,
              "id": 3725,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@checkMembership_2943": {
              "entryPoint": null,
              "id": 2943,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@claimComp_6268": {
              "entryPoint": 12754,
              "id": 6268,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@claimComp_6303": {
              "entryPoint": 4191,
              "id": 6303,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@claimComp_6461": {
              "entryPoint": 7941,
              "id": 6461,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@closeFactorMantissa_6954": {
              "entryPoint": null,
              "id": 6954,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@compAccrued_7058": {
              "entryPoint": null,
              "id": 7058,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@compBorrowSpeeds_7088": {
              "entryPoint": null,
              "id": 7088,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@compBorrowState_7039": {
              "entryPoint": null,
              "id": 7039,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@compBorrowerIndex_7053": {
              "entryPoint": null,
              "id": 7053,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@compContributorSpeeds_7075": {
              "entryPoint": null,
              "id": 7075,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@compInitialIndex_2881": {
              "entryPoint": null,
              "id": 2881,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@compRate_7022": {
              "entryPoint": null,
              "id": 7022,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@compReceivable_7104": {
              "entryPoint": null,
              "id": 7104,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@compSpeeds_7027": {
              "entryPoint": null,
              "id": 7027,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@compSupplierIndex_7046": {
              "entryPoint": null,
              "id": 7046,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@compSupplySpeeds_7093": {
              "entryPoint": null,
              "id": 7093,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@compSupplyState_7033": {
              "entryPoint": null,
              "id": 7033,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@comptrollerImplementation_6941": {
              "entryPoint": null,
              "id": 6941,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@distributeBorrowerComp_6192": {
              "entryPoint": 14306,
              "id": 6192,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@distributeSupplierComp_6086": {
              "entryPoint": 16214,
              "id": 6086,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@div__7976": {
              "entryPoint": 18218,
              "id": 7976,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@div__8016": {
              "entryPoint": 18444,
              "id": 8016,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@div__8095": {
              "entryPoint": 18754,
              "id": 8095,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@enterMarkets_3007": {
              "entryPoint": 10155,
              "id": 3007,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@exitMarket_3260": {
              "entryPoint": 12913,
              "id": 3260,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@failOpaque_7381": {
              "entryPoint": 18276,
              "id": 7381,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@fail_7349": {
              "entryPoint": 16628,
              "id": 7349,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@fixBadAccruals_5635": {
              "entryPoint": 3197,
              "id": 5635,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@fraction_8116": {
              "entryPoint": 18474,
              "id": 8116,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getAccountLiquidityInternal_4276": {
              "entryPoint": 16749,
              "id": 4276,
              "parameterSlots": 1,
              "returnSlots": 3
            },
            "@getAccountLiquidity_4250": {
              "entryPoint": 6820,
              "id": 4250,
              "parameterSlots": 1,
              "returnSlots": 3
            },
            "@getAllMarkets_6666": {
              "entryPoint": 9918,
              "id": 6666,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getAssetsIn_2921": {
              "entryPoint": 9800,
              "id": 2921,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getBlockNumber_6710": {
              "entryPoint": null,
              "id": 6710,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getCompAddress_6719": {
              "entryPoint": null,
              "id": 6719,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getHypotheticalAccountLiquidityInternal_4552": {
              "entryPoint": 15024,
              "id": 4552,
              "parameterSlots": 4,
              "returnSlots": 3
            },
            "@getHypotheticalAccountLiquidity_4319": {
              "entryPoint": 6016,
              "id": 4319,
              "parameterSlots": 4,
              "returnSlots": 3
            },
            "@grantCompInternal_6510": {
              "entryPoint": 14731,
              "id": 6510,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@isComptroller_6726": {
              "entryPoint": null,
              "id": 6726,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@isDeprecated_6701": {
              "entryPoint": 8994,
              "id": 6701,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@lastContributorBlock_7080": {
              "entryPoint": null,
              "id": 7080,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@lessThanExp_7594": {
              "entryPoint": null,
              "id": 7594,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@liquidateBorrowAllowed_3941": {
              "entryPoint": 7000,
              "id": 3941,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@liquidateBorrowVerify_3978": {
              "entryPoint": null,
              "id": 3978,
              "parameterSlots": 6,
              "returnSlots": 0
            },
            "@liquidateCalculateSeizeTokens_4670": {
              "entryPoint": 10355,
              "id": 4670,
              "parameterSlots": 3,
              "returnSlots": 2
            },
            "@liquidationIncentiveMantissa_6957": {
              "entryPoint": null,
              "id": 6957,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@markets_6987": {
              "entryPoint": null,
              "id": 6987,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@maxAssets_6960": {
              "entryPoint": null,
              "id": 6960,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@mintAllowed_3314": {
              "entryPoint": 6080,
              "id": 3314,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@mintGuardianPaused_7002": {
              "entryPoint": null,
              "id": 7002,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@mintVerify_3343": {
              "entryPoint": null,
              "id": 3343,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@mul_ScalarTruncateAddUInt_7575": {
              "entryPoint": 18657,
              "id": 7575,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@mul_ScalarTruncate_7546": {
              "entryPoint": 16781,
              "id": 7546,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@mul__7835": {
              "entryPoint": 18146,
              "id": 7835,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@mul__7855": {
              "entryPoint": 18690,
              "id": 7855,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@mul__7937": {
              "entryPoint": 18616,
              "id": 7937,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@mul__7951": {
              "entryPoint": 16805,
              "id": 7951,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@oracle_6951": {
              "entryPoint": null,
              "id": 6951,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@pauseGuardian_6990": {
              "entryPoint": null,
              "id": 6990,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@pendingAdmin_6938": {
              "entryPoint": null,
              "id": 6938,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@pendingComptrollerImplementation_6944": {
              "entryPoint": null,
              "id": 6944,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@proposal65FixExecuted_7099": {
              "entryPoint": null,
              "id": 7099,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@redeemAllowedInternal_3473": {
              "entryPoint": 17717,
              "id": 3473,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@redeemAllowed_3391": {
              "entryPoint": 12854,
              "id": 3391,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@redeemVerify_3504": {
              "entryPoint": 6334,
              "id": 3504,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@repayBorrowAllowed_3788": {
              "entryPoint": 4672,
              "id": 3788,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@repayBorrowVerify_3821": {
              "entryPoint": null,
              "id": 3821,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "@safe224_7671": {
              "entryPoint": 18577,
              "id": 7671,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@safe32_7695": {
              "entryPoint": 18396,
              "id": 7695,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@seizeAllowed_4062": {
              "entryPoint": 10897,
              "id": 4062,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@seizeGuardianPaused_6998": {
              "entryPoint": null,
              "id": 6998,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@seizeVerify_4095": {
              "entryPoint": null,
              "id": 4095,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "@setCompSpeedInternal_5752": {
              "entryPoint": 17238,
              "id": 5752,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@sub__7811": {
              "entryPoint": 13795,
              "id": 7811,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@transferAllowed_4156": {
              "entryPoint": 10016,
              "id": 4156,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@transferGuardianPaused_6996": {
              "entryPoint": null,
              "id": 6996,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@transferVerify_4185": {
              "entryPoint": null,
              "id": 4185,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@truncate_7522": {
              "entryPoint": 18730,
              "id": 7522,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@updateCompBorrowIndex_5986": {
              "entryPoint": 13807,
              "id": 5986,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@updateCompSupplyIndex_5866": {
              "entryPoint": 15838,
              "id": 5866,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@updateContributorRewards_6256": {
              "entryPoint": 8591,
              "id": 6256,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_array_address_dyn": {
              "entryPoint": 20151,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_array_address_dyn_calldata": {
              "entryPoint": 18928,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_array_contract_CToken_dyn": {
              "entryPoint": 19311,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_array_uint256_dyn": {
              "entryPoint": 20434,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_fromMemory": {
              "entryPoint": 21132,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_address": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_addresst_addresst_addresst_uint256": {
              "entryPoint": 20051,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_tuple_t_addresst_addresst_addresst_addresst_uint256t_uint256": {
              "entryPoint": 19876,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 6
            },
            "abi_decode_tuple_t_addresst_addresst_addresst_uint256": {
              "entryPoint": 19627,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_addresst_addresst_addresst_uint256t_uint256": {
              "entryPoint": 19536,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_tuple_t_addresst_addresst_uint256": {
              "entryPoint": 19986,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_uint256": {
              "entryPoint": 19806,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_addresst_array$_t_contract$_CToken_$2182_$dyn_memory_ptr": {
              "entryPoint": 19427,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_contract$_CToken_$2182": {
              "entryPoint": 20388,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 19708,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr": {
              "entryPoint": 19004,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr": {
              "entryPoint": 20738,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_contract$_CToken_$2182_$dyn_memory_ptrt_boolt_bool": {
              "entryPoint": 20251,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_array$_t_contract$_CToken_$2182_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_array$_t_contract$_CToken_$2182_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr": {
              "entryPoint": 20525,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_bool": {
              "entryPoint": 19752,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 21208,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_contract$_CToken_$2182": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_contract$_CToken_$2182t_bool": {
              "entryPoint": 19147,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_contract$_CToken_$2182t_uint256": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_contract$_ComptrollerInterface_$6928_fromMemory": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_contract$_PriceOracle_$9168": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_contract$_Unitroller_$9435": {
              "entryPoint": 19507,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 19781,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 21161,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256_fromMemory": {
              "entryPoint": 21259,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_contract$_CToken_$2182_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 20661,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 20791,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool_t_uint256_t_bool__to_t_bool_t_uint256_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_CToken_$2182__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_CToken_$2182_t_address__to_t_address_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_CToken_$2182_t_stringliteral_234e55c1cd55f1338241b50d352f0e91c7e4ffad0e4271d64eb347589ebdfd16_t_bool__to_t_address_t_string_memory_ptr_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_CToken_$2182_t_stringliteral_7be2dfa0d0bbc9b229c88acd70a4e76511e2d12d8821c5955d8b5d57fd4c5944_t_bool__to_t_address_t_string_memory_ptr_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_CToken_$2182_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_PriceOracle_$9168__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_PriceOracle_$9168_t_contract$_PriceOracle_$9168__to_t_address_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 21424,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0718f0bb9492946f628fbebd4fb0db7e9424e375676cddfeef9e89269976c475__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0ad46837fefc66a37a27d365ae7d6446a39b33a37d743c62daa13796b21a9a61__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 20941,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1153443ce7acf202edc12781ed442b4efe9c7648578aa749102e5c0ef009032b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_12faf5080ce59fc31f3d1b49f65e37cdb40fe1bc12300993fda1dbcdc1c5e5b8__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_22d5d5d3b52be8ce0613f3ddc798758545c899709c322c0c43b33f98cbc6735e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_27a608bd53c74de8d40cac0c2cd3e5ff534ed9016c4a026ae533dc3a75ad67e8__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_3cb11c44fa0b681787fda7f5b18da4e2e82460f13e09d5b06117c0b4fde4eb12__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_45cf84233da57232b98a0ffb4e5ec3e0126512b471f92677a6e78ae79c21c7c9__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_591a1484d16116f5d48f25e1321d80627bc17b2d3f0d7384d855c565fac570fe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 21084,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_5c1f74cea61207c2a1a5566895b9d1152af4e3bee017489720ca70120db76661_t_bool__to_t_string_memory_ptr_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_5e020e1a96b4ab4ba411c1975849456615c80f16e98fad3f52c3497dacd698b6__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 21013,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_6b99e94e4e24bae0f68df3a62bf05a1aa126af8be8c5f958d69c28141ae73bea__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8d6cda2e8214bcdab6eb9bde4767020b52a0b58abe9235e475535a272dbeb6e1__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_962b660cbcb880f6102dd453b9e05ad769208d8fab60a49ef9470833083768b4__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_af39b50065ba9648c753f781fa674704d13ce8309cf446a262799d7aceba8e5b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b5db2e902ee37d8683e458d871fcb4db0f6161fc6067d555c25420c11cd7f985__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_be68349ba5b02869947a89562a2d8143503a6601656c6cceb6f211f463db7e95__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c52e43c56c1766225f7880eeb88c0e0929ce672205bb849d400966d7edc00144__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c6b1093b1638c601ff809827f079ea42bdfd6a234187db13d737b83e4e458fa9__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c97af826dc35ad084eb38e82309aaa9eaac3c0d2d1e1571cb89b514117456352__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_cafc76453fc83e3f10c72a8efc5040b77c059e2a8eb73233cb1b8ec3356ff222__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_cff0f73e08bfa2a9d6ae719bd0acb29b85bb81db8ff4e57a58ad65b3033d48b1__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_d90a41fca4bdd602e58925aa5ca016279f8a08da0f3958dcc966cb5624a4ebe8__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_dbab81719f15ade78f76dcdbf7cff531fc5f9822fe7e8466ffdd2feb23510f3b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e0ef19aa67a8b89b19419c8977a6a75d04286a47014bf7a3d2ea537634352c8b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e72e94152274f93053cc6005f77476aaaef5a8b1a0bbda6a562ee9bf9595371f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_f099cd8bde557814842a3121e8ddfd433a539b8c9f14bf31ebf108d12e6196e9_t_bool__to_t_string_memory_ptr_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_f20052e9c73751e3b6f0a0b0d6e756b61441e56378041bd3ee24195f79f7b047__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_f707df4514ea5b5fb8028d4563616eaaee14c4e2dd4bd81e2c8201e4cb9f9bb3__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_fa9e0af97796c722ac293934a4461629780a8958d7e0f2e3993533df15c43baf__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint224__to_t_uint224__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint224_t_uint32__to_t_uint224_t_uint32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_rational_0_by_1__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 19226,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_allocation_size_array_contract_CToken_dyn": {
              "entryPoint": 19275,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 21335,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 21390,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 21359,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 20891,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 20914,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x01": {
              "entryPoint": 21237,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x11": {
              "entryPoint": 20869,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x21": {
              "entryPoint": 21186,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x31": {
              "entryPoint": 21313,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 20847,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 19204,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_bool": {
              "entryPoint": 19133,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_contract_CToken": {
              "entryPoint": 19112,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:36479:13",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:13",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "109:92:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "119:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "131:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "142:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "127:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "127:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "119:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "161:9:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "186:6:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "179:6:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "179:14:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "172:6:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "172:22:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "154:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "154:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "154:41:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "78:9:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "89:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "100:4:13",
                        "type": ""
                      }
                    ],
                    "src": "14:187:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "290:283:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "339:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "348:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "351:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "341:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "341:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "341:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "318:6:13"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "326:4:13",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "314:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "314:17:13"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "333:3:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "310:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "310:27:13"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "303:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "303:35:13"
                          },
                          "nodeType": "YulIf",
                          "src": "300:55:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "364:30:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "387:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "374:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "374:20:13"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "364:6:13"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "437:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "446:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "449:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "439:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "439:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "439:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "409:6:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "417:18:13",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "406:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "406:30:13"
                          },
                          "nodeType": "YulIf",
                          "src": "403:50:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "462:29:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "478:6:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "486:4:13",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "474:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "474:17:13"
                          },
                          "variableNames": [
                            {
                              "name": "arrayPos",
                              "nodeType": "YulIdentifier",
                              "src": "462:8:13"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "551:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "560:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "563:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "553:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "553:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "553:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "514:6:13"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "526:1:13",
                                            "type": "",
                                            "value": "5"
                                          },
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "529:6:13"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "522:3:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "522:14:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "510:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "510:27:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "539:4:13",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "506:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "506:38:13"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "546:3:13"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "503:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "503:47:13"
                          },
                          "nodeType": "YulIf",
                          "src": "500:67:13"
                        }
                      ]
                    },
                    "name": "abi_decode_array_address_dyn_calldata",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "253:6:13",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "261:3:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "arrayPos",
                        "nodeType": "YulTypedName",
                        "src": "269:8:13",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "279:6:13",
                        "type": ""
                      }
                    ],
                    "src": "206:367:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "735:616:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "781:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "790:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "793:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "783:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "783:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "783:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "756:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "765:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "752:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "752:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "777:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "748:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "748:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "745:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "806:37:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "833:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "820:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "820:23:13"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "810:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "852:28:13",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "862:18:13",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "856:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "907:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "916:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "919:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "909:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "909:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "909:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "895:6:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "903:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "892:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "892:14:13"
                          },
                          "nodeType": "YulIf",
                          "src": "889:34:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "932:96:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1000:9:13"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1011:6:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "996:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "996:22:13"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1020:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_address_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "958:37:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "958:70:13"
                          },
                          "variables": [
                            {
                              "name": "value0_1",
                              "nodeType": "YulTypedName",
                              "src": "936:8:13",
                              "type": ""
                            },
                            {
                              "name": "value1_1",
                              "nodeType": "YulTypedName",
                              "src": "946:8:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1037:18:13",
                          "value": {
                            "name": "value0_1",
                            "nodeType": "YulIdentifier",
                            "src": "1047:8:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1037:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1064:18:13",
                          "value": {
                            "name": "value1_1",
                            "nodeType": "YulIdentifier",
                            "src": "1074:8:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1064:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1091:48:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1124:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1135:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1120:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1120:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1107:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1107:32:13"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "1095:8:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1168:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1177:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1180:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1170:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1170:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1170:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "1154:8:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1164:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1151:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1151:16:13"
                          },
                          "nodeType": "YulIf",
                          "src": "1148:36:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1193:98:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1261:9:13"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1272:8:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1257:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1257:24:13"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1283:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_address_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "1219:37:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1219:72:13"
                          },
                          "variables": [
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "1197:8:13",
                              "type": ""
                            },
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "1207:8:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1300:18:13",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "1310:8:13"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "1300:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1327:18:13",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "1337:8:13"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "1327:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "677:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "688:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "700:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "708:6:13",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "716:6:13",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "724:6:13",
                        "type": ""
                      }
                    ],
                    "src": "578:773:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1409:86:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1473:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1482:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1485:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1475:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1475:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1475:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1432:5:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1443:5:13"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1458:3:13",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1463:1:13",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "1454:3:13"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1454:11:13"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1467:1:13",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "1450:3:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1450:19:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1439:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1439:31:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1429:2:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1429:42:13"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1422:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1422:50:13"
                          },
                          "nodeType": "YulIf",
                          "src": "1419:70:13"
                        }
                      ]
                    },
                    "name": "validator_revert_contract_CToken",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1398:5:13",
                        "type": ""
                      }
                    ],
                    "src": "1356:139:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1542:76:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1596:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1605:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1608:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1598:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1598:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1598:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1565:5:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "1586:5:13"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "1579:6:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1579:13:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "1572:6:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1572:21:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1562:2:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1562:32:13"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1555:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1555:40:13"
                          },
                          "nodeType": "YulIf",
                          "src": "1552:60:13"
                        }
                      ]
                    },
                    "name": "validator_revert_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1531:5:13",
                        "type": ""
                      }
                    ],
                    "src": "1500:118:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1722:306:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1768:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1777:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1780:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1770:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1770:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1770:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1743:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1752:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1739:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1739:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1764:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1735:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1735:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "1732:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1793:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1819:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1806:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1806:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1797:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1871:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "1838:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1838:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1838:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1886:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1896:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1886:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1910:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1942:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1953:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1938:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1938:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1925:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1925:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "1914:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "1988:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bool",
                              "nodeType": "YulIdentifier",
                              "src": "1966:21:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1966:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1966:30:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2005:17:13",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "2015:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2005:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_CToken_$2182t_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1680:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1691:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1703:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1711:6:13",
                        "type": ""
                      }
                    ],
                    "src": "1623:405:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2065:95:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2082:1:13",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2089:3:13",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2094:10:13",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "2085:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2085:20:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2075:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2075:31:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2075:31:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2122:1:13",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2125:4:13",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2115:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2115:15:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2115:15:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2146:1:13",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2149:4:13",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "2139:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2139:15:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2139:15:13"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "2033:127:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2210:230:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2220:19:13",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2236:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2230:5:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2230:9:13"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "2220:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2248:58:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2270:6:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "size",
                                        "nodeType": "YulIdentifier",
                                        "src": "2286:4:13"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2292:2:13",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2282:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2282:13:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2301:2:13",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "2297:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2297:7:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2278:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2278:27:13"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2266:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2266:40:13"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "2252:10:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2381:22:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "2383:16:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2383:18:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2383:18:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2324:10:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2336:18:13",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2321:2:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2321:34:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2360:10:13"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2372:6:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2357:2:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2357:22:13"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "2318:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2318:62:13"
                          },
                          "nodeType": "YulIf",
                          "src": "2315:88:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2419:2:13",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "2423:10:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2412:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2412:22:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2412:22:13"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "2190:4:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "2199:6:13",
                        "type": ""
                      }
                    ],
                    "src": "2165:275:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2522:114:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2566:22:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "2568:16:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2568:18:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2568:18:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2538:6:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2546:18:13",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2535:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2535:30:13"
                          },
                          "nodeType": "YulIf",
                          "src": "2532:56:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2597:33:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2613:1:13",
                                    "type": "",
                                    "value": "5"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2616:6:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "2609:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2609:14:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2625:4:13",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2605:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2605:25:13"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "2597:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_array_contract_CToken_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "2502:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "2513:4:13",
                        "type": ""
                      }
                    ],
                    "src": "2445:191:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2713:689:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2762:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2771:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2774:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2764:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2764:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2764:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2741:6:13"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2749:4:13",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2737:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2737:17:13"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "2756:3:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2733:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2733:27:13"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2726:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2726:35:13"
                          },
                          "nodeType": "YulIf",
                          "src": "2723:55:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2787:30:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2810:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2797:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2797:20:13"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2791:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2826:14:13",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2836:4:13",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "2830:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2849:79:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2924:2:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_array_contract_CToken_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "2876:47:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2876:51:13"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "2860:15:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2860:68:13"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "2853:3:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2937:16:13",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "2950:3:13"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "2941:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "2969:3:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2974:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2962:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2962:15:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2962:15:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2986:19:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "2997:3:13"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "3002:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2993:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2993:12:13"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "2986:3:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3014:46:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3036:6:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3048:1:13",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3051:2:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "3044:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3044:10:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3032:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3032:23:13"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "3057:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3028:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3028:32:13"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "3018:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3088:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3097:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3100:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3090:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3090:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3090:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3075:6:13"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "3083:3:13"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3072:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3072:15:13"
                          },
                          "nodeType": "YulIf",
                          "src": "3069:35:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3113:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3128:6:13"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "3136:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3124:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3124:15:13"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "3117:3:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3204:169:13",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "3218:30:13",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "3244:3:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "calldataload",
                                    "nodeType": "YulIdentifier",
                                    "src": "3231:12:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3231:17:13"
                                },
                                "variables": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulTypedName",
                                    "src": "3222:5:13",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "3294:5:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "validator_revert_contract_CToken",
                                    "nodeType": "YulIdentifier",
                                    "src": "3261:32:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3261:39:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3261:39:13"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "3320:3:13"
                                    },
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "3325:5:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3313:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3313:18:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3313:18:13"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "3344:19:13",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "3355:3:13"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "3360:2:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3351:3:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3351:12:13"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "3344:3:13"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "3159:3:13"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3164:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "3156:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3156:15:13"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "3172:23:13",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3174:19:13",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "3185:3:13"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "3190:2:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3181:3:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3181:12:13"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "3174:3:13"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "3152:3:13",
                            "statements": []
                          },
                          "src": "3148:225:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3382:14:13",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "3391:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "3382:5:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_contract_CToken_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2687:6:13",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2695:3:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "2703:5:13",
                        "type": ""
                      }
                    ],
                    "src": "2641:761:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3534:387:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3580:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3589:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3592:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3582:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3582:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3582:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3555:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3564:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3551:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3551:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3576:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3547:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3547:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "3544:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3605:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3631:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3618:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3618:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3609:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3683:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "3650:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3650:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3650:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3698:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3708:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3698:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3722:46:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3753:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3764:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3749:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3749:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3736:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3736:32:13"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "3726:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3811:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3820:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3823:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3813:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3813:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3813:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3783:6:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3791:18:13",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3780:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3780:30:13"
                          },
                          "nodeType": "YulIf",
                          "src": "3777:50:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3836:79:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3887:9:13"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3898:6:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3883:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3883:22:13"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3907:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_contract_CToken_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "3846:36:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3846:69:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "3836:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_array$_t_contract$_CToken_$2182_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3492:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3503:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3515:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3523:6:13",
                        "type": ""
                      }
                    ],
                    "src": "3407:514:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4015:185:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4061:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4070:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4073:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4063:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4063:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4063:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4036:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4045:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4032:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4032:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4057:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4028:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4028:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "4025:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4086:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4112:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4099:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4099:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "4090:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4164:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "4131:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4131:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4131:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4179:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4189:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4179:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_Unitroller_$9435",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3981:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3992:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4004:6:13",
                        "type": ""
                      }
                    ],
                    "src": "3926:274:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4275:185:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4321:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4330:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4333:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4323:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4323:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4323:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4296:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4305:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4292:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4292:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4317:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4288:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4288:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "4285:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4346:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4372:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4359:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4359:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "4350:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4424:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "4391:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4391:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4391:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4439:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4449:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4439:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4241:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4252:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4264:6:13",
                        "type": ""
                      }
                    ],
                    "src": "4205:255:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4566:76:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4576:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4588:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4599:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4584:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4584:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4576:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4618:9:13"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4629:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4611:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4611:25:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4611:25:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4535:9:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4546:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4557:4:13",
                        "type": ""
                      }
                    ],
                    "src": "4465:177:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4785:553:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4832:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4841:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4844:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4834:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4834:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4834:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4806:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4815:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4802:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4802:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4827:3:13",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4798:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4798:33:13"
                          },
                          "nodeType": "YulIf",
                          "src": "4795:53:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4857:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4883:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4870:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4870:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "4861:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4935:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "4902:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4902:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4902:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4950:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4960:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4950:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4974:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5006:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5017:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5002:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5002:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4989:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4989:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "4978:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "5063:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "5030:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5030:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5030:41:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5080:17:13",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "5090:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5080:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5106:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5138:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5149:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5134:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5134:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5121:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5121:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_2",
                              "nodeType": "YulTypedName",
                              "src": "5110:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_2",
                                "nodeType": "YulIdentifier",
                                "src": "5195:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "5162:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5162:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5162:41:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5212:17:13",
                          "value": {
                            "name": "value_2",
                            "nodeType": "YulIdentifier",
                            "src": "5222:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "5212:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5238:42:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5265:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5276:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5261:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5261:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5248:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5248:32:13"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "5238:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5289:43:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5316:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5327:3:13",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5312:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5312:19:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5299:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5299:33:13"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "5289:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_addresst_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4719:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4730:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4742:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4750:6:13",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "4758:6:13",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "4766:6:13",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "4774:6:13",
                        "type": ""
                      }
                    ],
                    "src": "4647:691:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5444:102:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5454:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5466:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5477:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5462:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5462:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5454:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5496:9:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5511:6:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5527:3:13",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5532:1:13",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "5523:3:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5523:11:13"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5536:1:13",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "5519:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5519:19:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5507:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5507:32:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5489:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5489:51:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5489:51:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5413:9:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5424:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5435:4:13",
                        "type": ""
                      }
                    ],
                    "src": "5343:203:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5672:501:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5719:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5728:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5731:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5721:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5721:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5721:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5693:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5702:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5689:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5689:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5714:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5685:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5685:33:13"
                          },
                          "nodeType": "YulIf",
                          "src": "5682:53:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5744:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5770:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5757:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5757:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "5748:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5822:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "5789:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5789:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5789:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5837:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "5847:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5837:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5861:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5893:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5904:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5889:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5889:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5876:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5876:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "5865:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "5950:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "5917:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5917:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5917:41:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5967:17:13",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "5977:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5967:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5993:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6025:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6036:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6021:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6021:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6008:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6008:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_2",
                              "nodeType": "YulTypedName",
                              "src": "5997:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_2",
                                "nodeType": "YulIdentifier",
                                "src": "6082:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "6049:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6049:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6049:41:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6099:17:13",
                          "value": {
                            "name": "value_2",
                            "nodeType": "YulIdentifier",
                            "src": "6109:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "6099:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6125:42:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6152:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6163:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6148:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6148:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6135:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6135:32:13"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "6125:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5614:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5625:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5637:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5645:6:13",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "5653:6:13",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "5661:6:13",
                        "type": ""
                      }
                    ],
                    "src": "5551:622:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6265:236:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6311:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6320:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6323:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6313:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6313:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6313:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6286:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6295:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6282:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6282:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6307:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6278:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6278:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "6275:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6336:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6362:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6349:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6349:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "6340:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6414:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "6381:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6381:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6381:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6429:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6439:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6429:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6453:42:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6480:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6491:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6476:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6476:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6463:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6463:32:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "6453:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6223:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6234:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6246:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6254:6:13",
                        "type": ""
                      }
                    ],
                    "src": "6178:323:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6573:174:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6619:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6628:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6631:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6621:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6621:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6621:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6594:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6603:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6590:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6590:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6615:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6586:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6586:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "6583:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6644:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6670:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6657:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6657:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "6648:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6711:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bool",
                              "nodeType": "YulIdentifier",
                              "src": "6689:21:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6689:28:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6689:28:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6726:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6736:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6726:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6539:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6550:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6562:6:13",
                        "type": ""
                      }
                    ],
                    "src": "6506:241:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6822:110:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6868:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6877:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6880:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6870:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6870:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6870:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6843:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6852:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6839:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6839:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6864:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6835:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6835:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "6832:52:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6893:33:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6916:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6903:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6903:23:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6893:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6788:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6799:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6811:6:13",
                        "type": ""
                      }
                    ],
                    "src": "6752:180:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7058:420:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7105:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7114:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7117:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7107:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7107:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7107:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7079:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7088:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7075:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7075:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7100:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7071:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7071:33:13"
                          },
                          "nodeType": "YulIf",
                          "src": "7068:53:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7130:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7156:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7143:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7143:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "7134:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "7208:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "7175:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7175:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7175:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7223:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "7233:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "7223:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7247:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7279:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7290:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7275:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7275:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7262:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7262:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "7251:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "7336:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "7303:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7303:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7303:41:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7353:17:13",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "7363:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "7353:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7379:42:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7406:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7417:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7402:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7402:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7389:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7389:32:13"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "7379:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7430:42:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7457:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7468:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7453:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7453:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7440:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7440:32:13"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "7430:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7000:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7011:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7023:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7031:6:13",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7039:6:13",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7047:6:13",
                        "type": ""
                      }
                    ],
                    "src": "6937:541:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7638:686:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7685:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7694:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7697:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7687:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7687:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7687:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7659:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7668:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7655:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7655:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7680:3:13",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7651:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7651:33:13"
                          },
                          "nodeType": "YulIf",
                          "src": "7648:53:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7710:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7736:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7723:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7723:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "7714:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "7788:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "7755:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7755:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7755:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7803:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "7813:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "7803:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7827:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7859:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7870:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7855:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7855:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7842:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7842:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "7831:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "7916:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "7883:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7883:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7883:41:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7933:17:13",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "7943:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "7933:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7959:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7991:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8002:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7987:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7987:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7974:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7974:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_2",
                              "nodeType": "YulTypedName",
                              "src": "7963:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_2",
                                "nodeType": "YulIdentifier",
                                "src": "8048:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "8015:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8015:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8015:41:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8065:17:13",
                          "value": {
                            "name": "value_2",
                            "nodeType": "YulIdentifier",
                            "src": "8075:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "8065:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8091:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8123:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8134:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8119:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8119:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8106:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8106:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_3",
                              "nodeType": "YulTypedName",
                              "src": "8095:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_3",
                                "nodeType": "YulIdentifier",
                                "src": "8180:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "8147:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8147:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8147:41:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8197:17:13",
                          "value": {
                            "name": "value_3",
                            "nodeType": "YulIdentifier",
                            "src": "8207:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "8197:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8223:43:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8250:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8261:3:13",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8246:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8246:19:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8233:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8233:33:13"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "8223:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8275:43:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8302:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8313:3:13",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8298:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8298:19:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8285:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8285:33:13"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "8275:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_addresst_addresst_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7564:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7575:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7587:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7595:6:13",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7603:6:13",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7611:6:13",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "7619:6:13",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "7627:6:13",
                        "type": ""
                      }
                    ],
                    "src": "7483:841:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8486:162:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8496:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8508:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8519:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8504:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8504:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8496:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8538:9:13"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8549:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8531:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8531:25:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8531:25:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8576:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8587:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8572:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8572:18:13"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "8592:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8565:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8565:34:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8565:34:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8619:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8630:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8615:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8615:18:13"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "8635:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8608:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8608:34:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8608:34:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8439:9:13",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "8450:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8458:6:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8466:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8477:4:13",
                        "type": ""
                      }
                    ],
                    "src": "8329:319:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8757:368:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8803:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8812:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8815:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8805:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8805:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8805:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8778:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8787:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8774:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8774:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8799:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "8770:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8770:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "8767:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8828:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8854:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8841:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8841:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "8832:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "8906:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "8873:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8873:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8873:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8921:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "8931:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "8921:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8945:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8977:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8988:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8973:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8973:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8960:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8960:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "8949:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "9034:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "9001:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9001:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9001:41:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9051:17:13",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "9061:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "9051:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9077:42:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9104:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9115:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9100:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9100:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9087:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9087:32:13"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "9077:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8707:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "8718:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8730:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8738:6:13",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "8746:6:13",
                        "type": ""
                      }
                    ],
                    "src": "8653:472:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9246:102:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9256:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9268:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9279:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9264:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9264:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9256:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9298:9:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "9313:6:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "9329:3:13",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "9334:1:13",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "9325:3:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "9325:11:13"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9338:1:13",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "9321:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9321:19:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "9309:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9309:32:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9291:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9291:51:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9291:51:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_CToken_$2182__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9215:9:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9226:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9237:4:13",
                        "type": ""
                      }
                    ],
                    "src": "9130:218:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9443:185:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9489:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9498:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9501:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9491:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9491:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9491:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9464:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9473:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9460:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9460:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9485:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9456:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9456:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "9453:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9514:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9540:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9527:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9527:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "9518:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "9592:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "9559:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9559:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9559:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9607:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9617:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "9607:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_PriceOracle_$9168",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9409:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "9420:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9432:6:13",
                        "type": ""
                      }
                    ],
                    "src": "9353:275:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9771:634:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9818:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9827:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9830:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9820:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9820:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9820:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9792:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9801:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9788:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9788:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9813:3:13",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9784:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9784:33:13"
                          },
                          "nodeType": "YulIf",
                          "src": "9781:53:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9843:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9869:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9856:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9856:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "9847:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "9921:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "9888:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9888:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9888:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9936:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9946:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "9936:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9960:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9992:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10003:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9988:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9988:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9975:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9975:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "9964:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "10049:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "10016:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10016:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10016:41:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10066:17:13",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "10076:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "10066:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10092:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10124:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10135:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10120:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10120:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10107:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10107:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_2",
                              "nodeType": "YulTypedName",
                              "src": "10096:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_2",
                                "nodeType": "YulIdentifier",
                                "src": "10181:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "10148:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10148:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10148:41:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10198:17:13",
                          "value": {
                            "name": "value_2",
                            "nodeType": "YulIdentifier",
                            "src": "10208:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "10198:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10224:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10256:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10267:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10252:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10252:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10239:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10239:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_3",
                              "nodeType": "YulTypedName",
                              "src": "10228:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_3",
                                "nodeType": "YulIdentifier",
                                "src": "10313:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "10280:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10280:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10280:41:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10330:17:13",
                          "value": {
                            "name": "value_3",
                            "nodeType": "YulIdentifier",
                            "src": "10340:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "10330:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10356:43:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10383:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10394:3:13",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10379:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10379:19:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10366:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10366:33:13"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "10356:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_addresst_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9705:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "9716:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9728:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9736:6:13",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "9744:6:13",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "9752:6:13",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "9760:6:13",
                        "type": ""
                      }
                    ],
                    "src": "9633:772:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10582:616:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10628:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10637:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10640:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10630:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10630:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10630:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10603:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10612:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10599:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10599:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10624:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "10595:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10595:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "10592:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10653:37:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10680:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10667:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10667:23:13"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "10657:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10699:28:13",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10709:18:13",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "10703:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10754:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10763:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10766:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10756:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10756:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10756:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "10742:6:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10750:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10739:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10739:14:13"
                          },
                          "nodeType": "YulIf",
                          "src": "10736:34:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10779:96:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10847:9:13"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "10858:6:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10843:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10843:22:13"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "10867:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_address_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "10805:37:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10805:70:13"
                          },
                          "variables": [
                            {
                              "name": "value0_1",
                              "nodeType": "YulTypedName",
                              "src": "10783:8:13",
                              "type": ""
                            },
                            {
                              "name": "value1_1",
                              "nodeType": "YulTypedName",
                              "src": "10793:8:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10884:18:13",
                          "value": {
                            "name": "value0_1",
                            "nodeType": "YulIdentifier",
                            "src": "10894:8:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "10884:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10911:18:13",
                          "value": {
                            "name": "value1_1",
                            "nodeType": "YulIdentifier",
                            "src": "10921:8:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "10911:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10938:48:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10971:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10982:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10967:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10967:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10954:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10954:32:13"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "10942:8:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11015:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11024:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11027:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11017:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11017:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11017:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "11001:8:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11011:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10998:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10998:16:13"
                          },
                          "nodeType": "YulIf",
                          "src": "10995:36:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11040:98:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11108:9:13"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "11119:8:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11104:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11104:24:13"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11130:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_address_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "11066:37:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11066:72:13"
                          },
                          "variables": [
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "11044:8:13",
                              "type": ""
                            },
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "11054:8:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11147:18:13",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "11157:8:13"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "11147:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11174:18:13",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "11184:8:13"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "11174:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_contract$_CToken_$2182_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10524:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "10535:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10547:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10555:6:13",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "10563:6:13",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "10571:6:13",
                        "type": ""
                      }
                    ],
                    "src": "10410:788:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11267:689:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11316:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11325:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11328:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11318:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11318:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11318:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "11295:6:13"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11303:4:13",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11291:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11291:17:13"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "11310:3:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "11287:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11287:27:13"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "11280:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11280:35:13"
                          },
                          "nodeType": "YulIf",
                          "src": "11277:55:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11341:30:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "11364:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11351:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11351:20:13"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "11345:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11380:14:13",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11390:4:13",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "11384:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11403:79:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "11478:2:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_array_contract_CToken_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "11430:47:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11430:51:13"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "11414:15:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11414:68:13"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "11407:3:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11491:16:13",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "11504:3:13"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "11495:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "11523:3:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11528:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11516:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11516:15:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11516:15:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11540:19:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "11551:3:13"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "11556:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11547:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11547:12:13"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "11540:3:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11568:46:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "11590:6:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11602:1:13",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "11605:2:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "11598:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11598:10:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11586:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11586:23:13"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "11611:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11582:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11582:32:13"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "11572:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11642:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11651:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11654:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11644:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11644:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11644:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11629:6:13"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "11637:3:13"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11626:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11626:15:13"
                          },
                          "nodeType": "YulIf",
                          "src": "11623:35:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11667:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "11682:6:13"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "11690:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11678:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11678:15:13"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "11671:3:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11758:169:13",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "11772:30:13",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "11798:3:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "calldataload",
                                    "nodeType": "YulIdentifier",
                                    "src": "11785:12:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11785:17:13"
                                },
                                "variables": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulTypedName",
                                    "src": "11776:5:13",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "11848:5:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "validator_revert_contract_CToken",
                                    "nodeType": "YulIdentifier",
                                    "src": "11815:32:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11815:39:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11815:39:13"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "11874:3:13"
                                    },
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "11879:5:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "11867:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11867:18:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11867:18:13"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "11898:19:13",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "11909:3:13"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "11914:2:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "11905:3:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11905:12:13"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "11898:3:13"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "11713:3:13"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11718:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "11710:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11710:15:13"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "11726:23:13",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "11728:19:13",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "11739:3:13"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "11744:2:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "11735:3:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11735:12:13"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "11728:3:13"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "11706:3:13",
                            "statements": []
                          },
                          "src": "11702:225:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11936:14:13",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "11945:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "11936:5:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_address_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "11241:6:13",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "11249:3:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "11257:5:13",
                        "type": ""
                      }
                    ],
                    "src": "11203:753:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12141:703:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12188:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12197:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12200:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12190:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12190:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12190:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12162:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12171:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12158:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12158:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12183:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "12154:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12154:33:13"
                          },
                          "nodeType": "YulIf",
                          "src": "12151:53:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12213:37:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12240:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12227:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12227:23:13"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "12217:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12259:28:13",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12269:18:13",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "12263:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12314:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12323:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12326:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12316:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12316:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12316:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "12302:6:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "12310:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12299:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12299:14:13"
                          },
                          "nodeType": "YulIf",
                          "src": "12296:34:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12339:71:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12382:9:13"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "12393:6:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12378:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12378:22:13"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "12402:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "12349:28:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12349:61:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "12339:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12419:48:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12452:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12463:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12448:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12448:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12435:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12435:32:13"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "12423:8:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12496:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12505:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12508:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12498:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12498:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12498:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "12482:8:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "12492:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12479:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12479:16:13"
                          },
                          "nodeType": "YulIf",
                          "src": "12476:36:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12521:81:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12572:9:13"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12583:8:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12568:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12568:24:13"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "12594:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_contract_CToken_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "12531:36:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12531:71:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "12521:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12611:45:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12641:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12652:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12637:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12637:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12624:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12624:32:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "12615:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "12687:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bool",
                              "nodeType": "YulIdentifier",
                              "src": "12665:21:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12665:28:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12665:28:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12702:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "12712:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "12702:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12726:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12758:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12769:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12754:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12754:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12741:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12741:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "12730:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "12804:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bool",
                              "nodeType": "YulIdentifier",
                              "src": "12782:21:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12782:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12782:30:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12821:17:13",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "12831:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "12821:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_contract$_CToken_$2182_$dyn_memory_ptrt_boolt_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12083:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "12094:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12106:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "12114:6:13",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "12122:6:13",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "12130:6:13",
                        "type": ""
                      }
                    ],
                    "src": "11961:883:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12976:162:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12986:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12998:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13009:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12994:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12994:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12986:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13028:9:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "13043:6:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "13059:3:13",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "13064:1:13",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "13055:3:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13055:11:13"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13068:1:13",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "13051:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13051:19:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "13039:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13039:32:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13021:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13021:51:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13021:51:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13092:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13103:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13088:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13088:18:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "13112:6:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13120:10:13",
                                    "type": "",
                                    "value": "0xffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "13108:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13108:23:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13081:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13081:51:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13081:51:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint224_t_uint32__to_t_uint224_t_uint32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12937:9:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "12948:6:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12956:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12967:4:13",
                        "type": ""
                      }
                    ],
                    "src": "12849:289:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13264:102:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13274:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13286:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13297:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13282:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13282:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13274:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13316:9:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "13331:6:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "13347:3:13",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "13352:1:13",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "13343:3:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13343:11:13"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13356:1:13",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "13339:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13339:19:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "13327:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13327:32:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13309:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13309:51:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13309:51:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_PriceOracle_$9168__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13233:9:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13244:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13255:4:13",
                        "type": ""
                      }
                    ],
                    "src": "13143:223:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13516:194:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13526:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13538:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13549:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13534:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13534:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13526:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13568:9:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "13593:6:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "13586:6:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13586:14:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "13579:6:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13579:22:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13561:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13561:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13561:41:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13622:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13633:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13618:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13618:18:13"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "13638:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13611:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13611:34:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13611:34:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13665:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13676:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13661:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13661:18:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value2",
                                        "nodeType": "YulIdentifier",
                                        "src": "13695:6:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "13688:6:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13688:14:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "13681:6:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13681:22:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13654:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13654:50:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13654:50:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool_t_uint256_t_bool__to_t_bool_t_uint256_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13469:9:13",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "13480:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "13488:6:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13496:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13507:4:13",
                        "type": ""
                      }
                    ],
                    "src": "13371:339:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13817:317:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13863:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13872:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13875:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13865:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13865:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13865:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "13838:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13847:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "13834:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13834:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13859:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "13830:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13830:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "13827:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13888:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13914:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "13901:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13901:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "13892:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "13966:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "13933:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13933:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13933:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13981:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "13991:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "13981:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14005:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14037:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14048:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14033:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14033:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "14020:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14020:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "14009:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "14094:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "14061:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14061:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14061:41:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14111:17:13",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "14121:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "14111:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_contract$_CToken_$2182",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13775:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "13786:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13798:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "13806:6:13",
                        "type": ""
                      }
                    ],
                    "src": "13715:419:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14224:185:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14270:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14279:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14282:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14272:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14272:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14272:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "14245:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14254:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "14241:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14241:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14266:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "14237:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14237:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "14234:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14295:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14321:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "14308:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14308:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "14299:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14373:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "14340:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14340:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14340:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14388:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "14398:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "14388:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_CToken_$2182",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14190:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "14201:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14213:6:13",
                        "type": ""
                      }
                    ],
                    "src": "14139:270:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14515:102:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14525:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14537:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14548:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14533:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14533:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14525:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14567:9:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "14582:6:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "14598:3:13",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "14603:1:13",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "14594:3:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "14594:11:13"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14607:1:13",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "14590:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14590:19:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14578:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14578:32:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14560:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14560:51:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14560:51:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint224__to_t_uint224__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14484:9:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14495:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14506:4:13",
                        "type": ""
                      }
                    ],
                    "src": "14414:203:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14686:606:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14735:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14744:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14747:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14737:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14737:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14737:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "14714:6:13"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14722:4:13",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "14710:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14710:17:13"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "14729:3:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "14706:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14706:27:13"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "14699:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14699:35:13"
                          },
                          "nodeType": "YulIf",
                          "src": "14696:55:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14760:30:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "14783:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "14770:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14770:20:13"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "14764:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14799:14:13",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14809:4:13",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "14803:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14822:79:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14897:2:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_array_contract_CToken_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "14849:47:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14849:51:13"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "14833:15:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14833:68:13"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "14826:3:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14910:16:13",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "14923:3:13"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "14914:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "14942:3:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "14947:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14935:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14935:15:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14935:15:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14959:19:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "14970:3:13"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "14975:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14966:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14966:12:13"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "14959:3:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14987:46:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "15009:6:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15021:1:13",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "15024:2:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "15017:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15017:10:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15005:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15005:23:13"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "15030:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15001:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15001:32:13"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "14991:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15061:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15070:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15073:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15063:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15063:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15063:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "15048:6:13"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "15056:3:13"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "15045:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15045:15:13"
                          },
                          "nodeType": "YulIf",
                          "src": "15042:35:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15086:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "15101:6:13"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "15109:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15097:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15097:15:13"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "15090:3:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15177:86:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "15198:3:13"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "15216:3:13"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "calldataload",
                                        "nodeType": "YulIdentifier",
                                        "src": "15203:12:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15203:17:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "15191:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15191:30:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15191:30:13"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "15234:19:13",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "15245:3:13"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "15250:2:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "15241:3:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15241:12:13"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "15234:3:13"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "15132:3:13"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "15137:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "15129:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15129:15:13"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "15145:23:13",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "15147:19:13",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "15158:3:13"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "15163:2:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "15154:3:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15154:12:13"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "15147:3:13"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "15125:3:13",
                            "statements": []
                          },
                          "src": "15121:142:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15272:14:13",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "15281:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "15272:5:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_uint256_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "14660:6:13",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "14668:3:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "14676:5:13",
                        "type": ""
                      }
                    ],
                    "src": "14622:670:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15491:650:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15537:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15546:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15549:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15539:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15539:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15539:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "15512:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15521:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "15508:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15508:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15533:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "15504:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15504:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "15501:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15562:37:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15589:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "15576:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15576:23:13"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "15566:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15608:28:13",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15618:18:13",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "15612:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15663:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15672:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15675:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15665:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15665:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15665:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "15651:6:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "15659:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "15648:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15648:14:13"
                          },
                          "nodeType": "YulIf",
                          "src": "15645:34:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15688:79:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15739:9:13"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "15750:6:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15735:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15735:22:13"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "15759:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_contract_CToken_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "15698:36:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15698:69:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "15688:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15776:48:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15809:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15820:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15805:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15805:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "15792:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15792:32:13"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "15780:8:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15853:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15862:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15865:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15855:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15855:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15855:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "15839:8:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "15849:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "15836:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15836:16:13"
                          },
                          "nodeType": "YulIf",
                          "src": "15833:36:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15878:73:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15921:9:13"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "15932:8:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15917:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15917:24:13"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "15943:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "15888:28:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15888:63:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "15878:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15960:48:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15993:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16004:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15989:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15989:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "15976:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15976:32:13"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "15964:8:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16037:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16046:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16049:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "16039:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16039:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16039:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "16023:8:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "16033:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "16020:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16020:16:13"
                          },
                          "nodeType": "YulIf",
                          "src": "16017:36:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16062:73:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16105:9:13"
                                  },
                                  {
                                    "name": "offset_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "16116:8:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16101:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16101:24:13"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "16127:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "16072:28:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16072:63:13"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "16062:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_contract$_CToken_$2182_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15441:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "15452:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "15464:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "15472:6:13",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "15480:6:13",
                        "type": ""
                      }
                    ],
                    "src": "15297:844:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16312:507:13",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16322:12:13",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16332:2:13",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "16326:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16343:32:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16361:9:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "16372:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16357:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16357:18:13"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "16347:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16391:9:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "16402:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16384:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16384:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16384:21:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16414:17:13",
                          "value": {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "16425:6:13"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nodeType": "YulTypedName",
                              "src": "16418:3:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16440:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "16460:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "16454:5:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16454:13:13"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "16444:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "16483:6:13"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "16491:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16476:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16476:22:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16476:22:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16507:25:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16518:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16529:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16514:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16514:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "16507:3:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16541:29:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "16559:6:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "16567:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16555:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16555:15:13"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "16545:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16579:10:13",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16588:1:13",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "16583:1:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16647:146:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "16668:3:13"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "srcPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "16683:6:13"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "16677:5:13"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "16677:13:13"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "16700:3:13",
                                                  "type": "",
                                                  "value": "160"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "16705:1:13",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "16696:3:13"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "16696:11:13"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "16709:1:13",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "16692:3:13"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "16692:19:13"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "16673:3:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "16673:39:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "16661:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16661:52:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16661:52:13"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "16726:19:13",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "16737:3:13"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "16742:2:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "16733:3:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16733:12:13"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "16726:3:13"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "16758:25:13",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "16772:6:13"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "16780:2:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "16768:3:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16768:15:13"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "16758:6:13"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "16609:1:13"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "16612:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "16606:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16606:13:13"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "16620:18:13",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "16622:14:13",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "16631:1:13"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16634:1:13",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "16627:3:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16627:9:13"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "16622:1:13"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "16602:3:13",
                            "statements": []
                          },
                          "src": "16598:195:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16802:11:13",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "16810:3:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16802:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_contract$_CToken_$2182_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16281:9:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "16292:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16303:4:13",
                        "type": ""
                      }
                    ],
                    "src": "16146:673:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16911:317:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16957:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16966:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16969:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "16959:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16959:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16959:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "16932:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16941:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "16928:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16928:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16953:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "16924:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16924:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "16921:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16982:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17008:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "16995:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16995:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "16986:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "17060:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "17027:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17027:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17027:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17075:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "17085:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "17075:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17099:47:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17131:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17142:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17127:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17127:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "17114:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17114:32:13"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "17103:7:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "17188:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "17155:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17155:41:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17155:41:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17205:17:13",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "17215:7:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "17205:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16869:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "16880:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "16892:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "16900:6:13",
                        "type": ""
                      }
                    ],
                    "src": "16824:404:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17328:253:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17374:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17383:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17386:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "17376:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17376:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17376:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "17349:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17358:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "17345:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17345:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17370:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "17341:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17341:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "17338:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17399:37:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17426:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "17413:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17413:23:13"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "17403:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17479:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17488:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17491:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "17481:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17481:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17481:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "17451:6:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17459:18:13",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "17448:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17448:30:13"
                          },
                          "nodeType": "YulIf",
                          "src": "17445:50:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17504:71:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17547:9:13"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "17558:6:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17543:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17543:22:13"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "17567:7:13"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "17514:28:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17514:61:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "17504:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17294:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "17305:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17317:6:13",
                        "type": ""
                      }
                    ],
                    "src": "17233:348:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17737:481:13",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17747:12:13",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17757:2:13",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "17751:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17768:32:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17786:9:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "17797:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17782:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17782:18:13"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "17772:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17816:9:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "17827:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17809:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17809:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17809:21:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17839:17:13",
                          "value": {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "17850:6:13"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nodeType": "YulTypedName",
                              "src": "17843:3:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17865:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "17885:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "17879:5:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17879:13:13"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "17869:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "17908:6:13"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "17916:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17901:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17901:22:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17901:22:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17932:25:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17943:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17954:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17939:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17939:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "17932:3:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17966:29:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "17984:6:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "17992:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17980:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17980:15:13"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "17970:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18004:10:13",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18013:1:13",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "18008:1:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18072:120:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "18093:3:13"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "18104:6:13"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "18098:5:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18098:13:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "18086:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18086:26:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18086:26:13"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "18125:19:13",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "18136:3:13"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "18141:2:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "18132:3:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18132:12:13"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "18125:3:13"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "18157:25:13",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "18171:6:13"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "18179:2:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "18167:3:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18167:15:13"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "18157:6:13"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "18034:1:13"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "18037:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "18031:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18031:13:13"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "18045:18:13",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "18047:14:13",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "18056:1:13"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18059:1:13",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "18052:3:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18052:9:13"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "18047:1:13"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "18027:3:13",
                            "statements": []
                          },
                          "src": "18023:169:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18201:11:13",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "18209:3:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18201:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17706:9:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17717:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17728:4:13",
                        "type": ""
                      }
                    ],
                    "src": "17586:632:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18352:119:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "18362:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18374:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18385:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18370:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18370:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18362:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18404:9:13"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "18415:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18397:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18397:25:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18397:25:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18442:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18453:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18438:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18438:18:13"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "18458:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18431:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18431:34:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18431:34:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18313:9:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "18324:6:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18332:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18343:4:13",
                        "type": ""
                      }
                    ],
                    "src": "18223:248:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18578:236:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18624:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18633:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18636:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18626:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18626:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18626:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "18599:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18608:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "18595:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18595:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18620:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "18591:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18591:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "18588:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18649:36:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18675:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "18662:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18662:23:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "18653:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "18727:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "18694:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18694:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18694:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18742:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "18752:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "18742:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18766:42:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18793:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18804:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18789:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18789:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "18776:12:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18776:32:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "18766:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_CToken_$2182t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18536:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "18547:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18559:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "18567:6:13",
                        "type": ""
                      }
                    ],
                    "src": "18476:338:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18993:223:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19010:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19021:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19003:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19003:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19003:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19044:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19055:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19040:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19040:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19060:2:13",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19033:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19033:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19033:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19083:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19094:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19079:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19079:18:13"
                              },
                              {
                                "hexValue": "4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19099:34:13",
                                "type": "",
                                "value": "Only admin can call this functio"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19072:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19072:62:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19072:62:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19154:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19165:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19150:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19150:18:13"
                              },
                              {
                                "hexValue": "6e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19170:3:13",
                                "type": "",
                                "value": "n"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19143:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19143:31:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19143:31:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19183:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19195:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19206:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19191:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19191:19:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19183:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e0ef19aa67a8b89b19419c8977a6a75d04286a47014bf7a3d2ea537634352c8b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18970:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18984:4:13",
                        "type": ""
                      }
                    ],
                    "src": "18819:397:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19395:228:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19412:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19423:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19405:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19405:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19405:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19446:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19457:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19442:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19442:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19462:2:13",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19435:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19435:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19435:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19485:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19496:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19481:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19481:18:13"
                              },
                              {
                                "hexValue": "416c72656164792065786563757465642074686973206f6e652d6f6666206675",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19501:34:13",
                                "type": "",
                                "value": "Already executed this one-off fu"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19474:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19474:62:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19474:62:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19556:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19567:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19552:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19552:18:13"
                              },
                              {
                                "hexValue": "6e6374696f6e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19572:8:13",
                                "type": "",
                                "value": "nction"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19545:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19545:36:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19545:36:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19590:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19602:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19613:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19598:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19598:19:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19590:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_27a608bd53c74de8d40cac0c2cd3e5ff534ed9016c4a026ae533dc3a75ad67e8__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19372:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19386:4:13",
                        "type": ""
                      }
                    ],
                    "src": "19221:402:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19802:163:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19819:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19830:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19812:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19812:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19812:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19853:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19864:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19849:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19849:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19869:2:13",
                                "type": "",
                                "value": "13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19842:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19842:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19842:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19892:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19903:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19888:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19888:18:13"
                              },
                              {
                                "hexValue": "496e76616c696420696e707574",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19908:15:13",
                                "type": "",
                                "value": "Invalid input"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19881:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19881:43:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19881:43:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19933:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19945:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19956:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19941:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19941:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19933:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_af39b50065ba9648c753f781fa674704d13ce8309cf446a262799d7aceba8e5b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19779:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19793:4:13",
                        "type": ""
                      }
                    ],
                    "src": "19628:337:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20002:95:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20019:1:13",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20026:3:13",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20031:10:13",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "20022:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20022:20:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20012:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20012:31:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20012:31:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20059:1:13",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20062:4:13",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20052:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20052:15:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20052:15:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20083:1:13",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20086:4:13",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "20076:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20076:15:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20076:15:13"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "19970:127:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20134:95:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20151:1:13",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20158:3:13",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20163:10:13",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "20154:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20154:20:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20144:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20144:31:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20144:31:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20191:1:13",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20194:4:13",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20184:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20184:15:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20184:15:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20215:1:13",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20218:4:13",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "20208:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20208:15:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20208:15:13"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "20102:127:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20283:76:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20305:22:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "20307:16:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20307:18:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20307:18:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "20299:1:13"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "20302:1:13"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "20296:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20296:8:13"
                          },
                          "nodeType": "YulIf",
                          "src": "20293:34:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20336:17:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "20348:1:13"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "20351:1:13"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "20344:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20344:9:13"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "20336:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "20265:1:13",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "20268:1:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "20274:4:13",
                        "type": ""
                      }
                    ],
                    "src": "20234:125:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20411:88:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20442:22:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "20444:16:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20444:18:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20444:18:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "20427:5:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20438:1:13",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "20434:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20434:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "20424:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20424:17:13"
                          },
                          "nodeType": "YulIf",
                          "src": "20421:43:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20473:20:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "20484:5:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20491:1:13",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20480:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20480:13:13"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "20473:3:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "20393:5:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "20403:3:13",
                        "type": ""
                      }
                    ],
                    "src": "20364:135:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20678:230:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20695:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20706:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20688:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20688:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20688:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20729:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20740:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20725:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20725:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20745:2:13",
                                "type": "",
                                "value": "40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20718:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20718:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20718:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20768:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20779:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20764:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20764:18:13"
                              },
                              {
                                "hexValue": "63616e6e6f742070617573652061206d61726b65742074686174206973206e6f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20784:34:13",
                                "type": "",
                                "value": "cannot pause a market that is no"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20757:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20757:62:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20757:62:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20839:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20850:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20835:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20835:18:13"
                              },
                              {
                                "hexValue": "74206c6973746564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20855:10:13",
                                "type": "",
                                "value": "t listed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20828:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20828:38:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20828:38:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20875:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20887:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20898:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20883:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20883:19:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20875:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0ad46837fefc66a37a27d365ae7d6446a39b33a37d743c62daa13796b21a9a61__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20655:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20669:4:13",
                        "type": ""
                      }
                    ],
                    "src": "20504:404:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21087:229:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21104:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21115:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21097:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21097:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21097:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21138:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21149:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21134:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21134:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21154:2:13",
                                "type": "",
                                "value": "39"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21127:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21127:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21127:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21177:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21188:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21173:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21173:18:13"
                              },
                              {
                                "hexValue": "6f6e6c7920706175736520677561726469616e20616e642061646d696e206361",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21193:34:13",
                                "type": "",
                                "value": "only pause guardian and admin ca"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21166:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21166:62:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21166:62:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21248:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21259:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21244:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21244:18:13"
                              },
                              {
                                "hexValue": "6e207061757365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21264:9:13",
                                "type": "",
                                "value": "n pause"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21237:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21237:37:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21237:37:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21283:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21295:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21306:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21291:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21291:19:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21283:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_5e020e1a96b4ab4ba411c1975849456615c80f16e98fad3f52c3497dacd698b6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21064:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21078:4:13",
                        "type": ""
                      }
                    ],
                    "src": "20913:403:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21495:172:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21512:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21523:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21505:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21505:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21505:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21546:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21557:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21542:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21542:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21562:2:13",
                                "type": "",
                                "value": "22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21535:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21535:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21535:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21585:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21596:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21581:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21581:18:13"
                              },
                              {
                                "hexValue": "6f6e6c792061646d696e2063616e20756e7061757365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21601:24:13",
                                "type": "",
                                "value": "only admin can unpause"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21574:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21574:52:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21574:52:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21635:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21647:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21658:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21643:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21643:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21635:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_591a1484d16116f5d48f25e1321d80627bc17b2d3f0d7384d855c565fac570fe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21472:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21486:4:13",
                        "type": ""
                      }
                    ],
                    "src": "21321:346:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21911:285:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21928:9:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "21943:6:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "21959:3:13",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "21964:1:13",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "21955:3:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "21955:11:13"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "21968:1:13",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "21951:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21951:19:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "21939:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21939:32:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21921:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21921:51:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21921:51:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21992:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22003:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21988:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21988:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22008:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21981:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21981:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21981:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22031:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22042:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22027:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22027:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22047:1:13",
                                "type": "",
                                "value": "6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22020:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22020:29:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22020:29:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22069:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22080:3:13",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22065:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22065:19:13"
                              },
                              {
                                "hexValue": "426f72726f77",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "22086:8:13",
                                "type": "",
                                "value": "Borrow"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22058:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22058:37:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22058:37:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22104:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22116:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22127:3:13",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22112:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22112:19:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22104:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22151:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22162:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22147:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22147:18:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "22181:6:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "22174:6:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "22174:14:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "22167:6:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22167:22:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22140:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22140:50:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22140:50:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_CToken_$2182_t_stringliteral_7be2dfa0d0bbc9b229c88acd70a4e76511e2d12d8821c5955d8b5d57fd4c5944_t_bool__to_t_address_t_string_memory_ptr_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21872:9:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "21883:6:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21891:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21902:4:13",
                        "type": ""
                      }
                    ],
                    "src": "21672:524:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22282:178:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "22328:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "22337:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "22340:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "22330:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "22330:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "22330:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "22303:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22312:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "22299:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22299:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22324:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "22295:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22295:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "22292:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22353:29:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22372:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "22366:5:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22366:16:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "22357:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "22424:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "22391:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22391:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22391:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22439:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "22449:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "22439:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22248:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "22259:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22271:6:13",
                        "type": ""
                      }
                    ],
                    "src": "22201:259:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22639:229:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22656:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22667:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22649:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22649:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22649:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22690:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22701:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22686:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22686:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22706:2:13",
                                "type": "",
                                "value": "39"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22679:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22679:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22679:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22729:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22740:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22725:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22725:18:13"
                              },
                              {
                                "hexValue": "6f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e6765",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "22745:34:13",
                                "type": "",
                                "value": "only unitroller admin can change"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22718:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22718:62:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22718:62:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22800:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22811:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22796:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22796:18:13"
                              },
                              {
                                "hexValue": "20627261696e73",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "22816:9:13",
                                "type": "",
                                "value": " brains"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22789:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22789:37:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22789:37:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22835:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22847:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22858:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22843:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22843:19:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22835:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f707df4514ea5b5fb8028d4563616eaaee14c4e2dd4bd81e2c8201e4cb9f9bb3__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22616:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22630:4:13",
                        "type": ""
                      }
                    ],
                    "src": "22465:403:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22954:103:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23000:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23009:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23012:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "23002:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23002:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "23002:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "22975:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22984:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "22971:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22971:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22996:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "22967:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22967:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "22964:52:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23025:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23041:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "23035:5:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23035:16:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "23025:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22920:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "22931:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22943:6:13",
                        "type": ""
                      }
                    ],
                    "src": "22873:184:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23236:171:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23253:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23264:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23246:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23246:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23246:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23287:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23298:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23283:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23283:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23303:2:13",
                                "type": "",
                                "value": "21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23276:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23276:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23276:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23326:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23337:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23322:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23322:18:13"
                              },
                              {
                                "hexValue": "6368616e6765206e6f7420617574686f72697a6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "23342:23:13",
                                "type": "",
                                "value": "change not authorized"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23315:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23315:51:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23315:51:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23375:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23387:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23398:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23383:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23383:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23375:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c97af826dc35ad084eb38e82309aaa9eaac3c0d2d1e1571cb89b514117456352__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23213:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23227:4:13",
                        "type": ""
                      }
                    ],
                    "src": "23062:345:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23444:95:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23461:1:13",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23468:3:13",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23473:10:13",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "23464:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23464:20:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23454:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23454:31:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23454:31:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23501:1:13",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23504:4:13",
                                "type": "",
                                "value": "0x21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23494:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23494:15:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23494:15:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23525:1:13",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23528:4:13",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "23518:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23518:15:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23518:15:13"
                        }
                      ]
                    },
                    "name": "panic_error_0x21",
                    "nodeType": "YulFunctionDefinition",
                    "src": "23412:127:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23718:175:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23735:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23746:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23728:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23728:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23728:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23769:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23780:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23765:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23765:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23785:2:13",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23758:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23758:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23758:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23808:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23819:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23804:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23804:18:13"
                              },
                              {
                                "hexValue": "6f6e6c792061646d696e2063616e206772616e7420636f6d70",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "23824:27:13",
                                "type": "",
                                "value": "only admin can grant comp"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23797:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23797:55:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23797:55:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23861:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23873:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23884:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23869:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23869:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23861:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_12faf5080ce59fc31f3d1b49f65e37cdb40fe1bc12300993fda1dbcdc1c5e5b8__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23695:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23709:4:13",
                        "type": ""
                      }
                    ],
                    "src": "23544:349:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24072:177:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24089:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24100:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24082:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24082:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24082:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24123:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24134:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24119:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24119:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24139:2:13",
                                "type": "",
                                "value": "27"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24112:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24112:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24112:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24162:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24173:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24158:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24158:18:13"
                              },
                              {
                                "hexValue": "696e73756666696369656e7420636f6d7020666f72206772616e74",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24178:29:13",
                                "type": "",
                                "value": "insufficient comp for grant"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24151:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24151:57:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24151:57:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24217:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24229:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24240:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24225:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24225:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24217:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1153443ce7acf202edc12781ed442b4efe9c7648578aa749102e5c0ef009032b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24049:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24063:4:13",
                        "type": ""
                      }
                    ],
                    "src": "23898:351:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24383:145:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "24393:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24405:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24416:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24401:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24401:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24393:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24435:9:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "24450:6:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "24466:3:13",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "24471:1:13",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "24462:3:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "24462:11:13"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "24475:1:13",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "24458:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "24458:19:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "24446:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24446:32:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24428:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24428:51:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24428:51:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24499:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24510:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24495:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24495:18:13"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "24515:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24488:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24488:34:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24488:34:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24344:9:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "24355:6:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "24363:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24374:4:13",
                        "type": ""
                      }
                    ],
                    "src": "24254:274:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24729:216:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24746:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24757:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24739:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24739:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24739:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24780:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24791:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24776:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24776:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24796:1:13",
                                "type": "",
                                "value": "5"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24769:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24769:29:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24769:29:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24818:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24829:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24814:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24814:18:13"
                              },
                              {
                                "hexValue": "5365697a65",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24834:7:13",
                                "type": "",
                                "value": "Seize"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24807:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24807:35:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24807:35:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24851:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24863:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24874:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24859:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24859:19:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24851:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24898:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24909:4:13",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24894:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24894:20:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "24930:6:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "24923:6:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "24923:14:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "24916:6:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24916:22:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24887:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24887:52:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24887:52:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_5c1f74cea61207c2a1a5566895b9d1152af4e3bee017489720ca70120db76661_t_bool__to_t_string_memory_ptr_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24698:9:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "24709:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24720:4:13",
                        "type": ""
                      }
                    ],
                    "src": "24533:412:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25124:181:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25141:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25152:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25134:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25134:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25134:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25175:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25186:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25171:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25171:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25191:2:13",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25164:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25164:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25164:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25214:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25225:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25210:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25210:18:13"
                              },
                              {
                                "hexValue": "6f6e6c792061646d696e2063616e2073657420636c6f736520666163746f72",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25230:33:13",
                                "type": "",
                                "value": "only admin can set close factor"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25203:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25203:61:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25203:61:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25273:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25285:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25296:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25281:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25281:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25273:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_45cf84233da57232b98a0ffb4e5ec3e0126512b471f92677a6e78ae79c21c7c9__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25101:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25115:4:13",
                        "type": ""
                      }
                    ],
                    "src": "24950:355:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25484:228:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25501:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25512:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25494:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25494:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25494:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25535:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25546:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25531:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25531:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25551:2:13",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25524:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25524:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25524:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25574:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25585:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25570:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25570:18:13"
                              },
                              {
                                "hexValue": "6f6e6c792061646d696e2063616e2073657420626f72726f7720636170206775",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25590:34:13",
                                "type": "",
                                "value": "only admin can set borrow cap gu"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25563:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25563:62:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25563:62:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25645:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25656:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25641:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25641:18:13"
                              },
                              {
                                "hexValue": "61726469616e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25661:8:13",
                                "type": "",
                                "value": "ardian"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25634:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25634:36:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25634:36:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25679:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25691:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25702:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25687:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25687:19:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25679:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_6b99e94e4e24bae0f68df3a62bf05a1aa126af8be8c5f958d69c28141ae73bea__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25461:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25475:4:13",
                        "type": ""
                      }
                    ],
                    "src": "25310:402:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25846:175:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "25856:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25868:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25879:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25864:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25864:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25856:4:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "25891:29:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25909:3:13",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25914:1:13",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "25905:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25905:11:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25918:1:13",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "25901:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25901:19:13"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "25895:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25936:9:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "25951:6:13"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "25959:2:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "25947:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25947:15:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25929:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25929:34:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25929:34:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25983:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25994:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25979:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25979:18:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "26003:6:13"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "26011:2:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "25999:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25999:15:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25972:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25972:43:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25972:43:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25807:9:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "25818:6:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "25826:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25837:4:13",
                        "type": ""
                      }
                    ],
                    "src": "25717:304:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26265:283:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26282:9:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "26297:6:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "26313:3:13",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "26318:1:13",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "26309:3:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "26309:11:13"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "26322:1:13",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "26305:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "26305:19:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "26293:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26293:32:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26275:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26275:51:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26275:51:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26346:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26357:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26342:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26342:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26362:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26335:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26335:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26335:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26385:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26396:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26381:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26381:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26401:1:13",
                                "type": "",
                                "value": "4"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26374:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26374:29:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26374:29:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26423:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26434:3:13",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26419:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26419:19:13"
                              },
                              {
                                "hexValue": "4d696e74",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "26440:6:13",
                                "type": "",
                                "value": "Mint"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26412:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26412:35:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26412:35:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26456:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26468:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26479:3:13",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26464:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26464:19:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26456:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26503:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26514:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26499:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26499:18:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "26533:6:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "26526:6:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "26526:14:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "26519:6:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26519:22:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26492:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26492:50:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26492:50:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_CToken_$2182_t_stringliteral_234e55c1cd55f1338241b50d352f0e91c7e4ffad0e4271d64eb347589ebdfd16_t_bool__to_t_address_t_string_memory_ptr_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26226:9:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "26237:6:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "26245:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "26256:4:13",
                        "type": ""
                      }
                    ],
                    "src": "26026:522:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26727:164:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26744:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26755:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26737:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26737:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26737:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26778:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26789:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26774:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26774:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26794:2:13",
                                "type": "",
                                "value": "14"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26767:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26767:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26767:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26817:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26828:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26813:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26813:18:13"
                              },
                              {
                                "hexValue": "6d696e7420697320706175736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "26833:16:13",
                                "type": "",
                                "value": "mint is paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26806:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26806:44:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26806:44:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26859:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26871:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26882:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26867:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26867:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26859:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f20052e9c73751e3b6f0a0b0d6e756b61441e56378041bd3ee24195f79f7b047__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26704:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "26718:4:13",
                        "type": ""
                      }
                    ],
                    "src": "26553:338:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27070:167:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27087:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27098:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27080:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27080:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27080:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27121:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27132:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27117:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27117:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27137:2:13",
                                "type": "",
                                "value": "17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27110:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27110:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27110:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27160:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27171:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27156:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27156:18:13"
                              },
                              {
                                "hexValue": "72656465656d546f6b656e73207a65726f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "27176:19:13",
                                "type": "",
                                "value": "redeemTokens zero"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27149:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27149:47:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27149:47:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27205:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27217:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27228:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27213:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27213:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27205:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_be68349ba5b02869947a89562a2d8143503a6601656c6cceb6f211f463db7e95__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "27047:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "27061:4:13",
                        "type": ""
                      }
                    ],
                    "src": "26896:341:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27411:175:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "27421:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27433:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27444:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27429:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27429:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27421:4:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "27456:29:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27474:3:13",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27479:1:13",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "27470:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27470:11:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27483:1:13",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "27466:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27466:19:13"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "27460:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27501:9:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "27516:6:13"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27524:2:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "27512:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27512:15:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27494:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27494:34:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27494:34:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27548:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27559:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27544:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27544:18:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27568:6:13"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27576:2:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "27564:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27564:15:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27537:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27537:43:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27537:43:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_PriceOracle_$9168_t_contract$_PriceOracle_$9168__to_t_address_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "27372:9:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "27383:6:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "27391:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "27402:4:13",
                        "type": ""
                      }
                    ],
                    "src": "27242:344:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27765:179:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27782:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27793:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27775:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27775:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27775:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27816:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27827:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27812:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27812:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27832:2:13",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27805:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27805:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27805:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27855:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27866:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27851:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27851:18:13"
                              },
                              {
                                "hexValue": "6f6e6c792061646d696e2063616e2073657420636f6d70207370656564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "27871:31:13",
                                "type": "",
                                "value": "only admin can set comp speed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27844:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27844:59:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27844:59:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27912:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27924:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27935:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27920:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27920:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27912:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3cb11c44fa0b681787fda7f5b18da4e2e82460f13e09d5b06117c0b4fde4eb12__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "27742:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "27756:4:13",
                        "type": ""
                      }
                    ],
                    "src": "27591:353:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28123:230:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28140:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28151:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28133:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28133:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28133:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28174:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28185:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28170:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28170:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28190:2:13",
                                "type": "",
                                "value": "40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28163:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28163:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28163:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28213:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28224:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28209:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28209:18:13"
                              },
                              {
                                "hexValue": "43616e206e6f74207265706179206d6f7265207468616e2074686520746f7461",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28229:34:13",
                                "type": "",
                                "value": "Can not repay more than the tota"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28202:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28202:62:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28202:62:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28284:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28295:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28280:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28280:18:13"
                              },
                              {
                                "hexValue": "6c20626f72726f77",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28300:10:13",
                                "type": "",
                                "value": "l borrow"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28273:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28273:38:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28273:38:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28320:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28332:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28343:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28328:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28328:19:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28320:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_22d5d5d3b52be8ce0613f3ddc798758545c899709c322c0c43b33f98cbc6735e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28100:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28114:4:13",
                        "type": ""
                      }
                    ],
                    "src": "27949:404:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28532:243:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28549:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28560:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28542:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28542:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28542:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28583:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28594:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28579:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28579:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28599:2:13",
                                "type": "",
                                "value": "53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28572:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28572:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28572:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28622:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28633:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28618:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28618:18:13"
                              },
                              {
                                "hexValue": "6f6e6c792061646d696e206f7220626f72726f77206361702067756172646961",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28638:34:13",
                                "type": "",
                                "value": "only admin or borrow cap guardia"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28611:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28611:62:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28611:62:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28693:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28704:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28689:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28689:18:13"
                              },
                              {
                                "hexValue": "6e2063616e2073657420626f72726f772063617073",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28709:23:13",
                                "type": "",
                                "value": "n can set borrow caps"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28682:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28682:51:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28682:51:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28742:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28754:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28765:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28750:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28750:19:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28742:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c52e43c56c1766225f7880eeb88c0e0929ce672205bb849d400966d7edc00144__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28509:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28523:4:13",
                        "type": ""
                      }
                    ],
                    "src": "28358:417:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28954:163:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28971:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28982:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28964:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28964:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28964:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29005:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29016:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29001:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29001:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29021:2:13",
                                "type": "",
                                "value": "13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28994:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28994:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28994:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29044:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29055:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29040:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29040:18:13"
                              },
                              {
                                "hexValue": "696e76616c696420696e707574",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29060:15:13",
                                "type": "",
                                "value": "invalid input"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29033:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29033:43:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29033:43:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29085:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29097:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29108:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29093:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29093:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29085:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_dbab81719f15ade78f76dcdbf7cff531fc5f9822fe7e8466ffdd2feb23510f3b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28931:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28945:4:13",
                        "type": ""
                      }
                    ],
                    "src": "28780:337:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29296:171:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29313:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29324:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29306:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29306:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29306:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29347:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29358:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29343:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29343:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29363:2:13",
                                "type": "",
                                "value": "21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29336:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29336:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29336:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29386:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29397:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29382:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29382:18:13"
                              },
                              {
                                "hexValue": "6d61726b6574206d757374206265206c6973746564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29402:23:13",
                                "type": "",
                                "value": "market must be listed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29375:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29375:51:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29375:51:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29435:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29447:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29458:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29443:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29443:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29435:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8d6cda2e8214bcdab6eb9bde4767020b52a0b58abe9235e475535a272dbeb6e1__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29273:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29287:4:13",
                        "type": ""
                      }
                    ],
                    "src": "29122:345:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29668:219:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29685:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29696:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29678:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29678:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29678:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29719:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29730:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29715:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29715:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29735:1:13",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29708:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29708:29:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29708:29:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29757:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29768:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29753:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29753:18:13"
                              },
                              {
                                "hexValue": "5472616e73666572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29773:10:13",
                                "type": "",
                                "value": "Transfer"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29746:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29746:38:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29746:38:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29793:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29805:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29816:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29801:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29801:19:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29793:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29840:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29851:4:13",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29836:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29836:20:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "29872:6:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "29865:6:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "29865:14:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "29858:6:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29858:22:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29829:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29829:52:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29829:52:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f099cd8bde557814842a3121e8ddfd433a539b8c9f14bf31ebf108d12e6196e9_t_bool__to_t_string_memory_ptr_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29637:9:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "29648:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29659:4:13",
                        "type": ""
                      }
                    ],
                    "src": "29472:415:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29970:167:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "30016:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "30025:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "30028:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "30018:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "30018:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "30018:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "29991:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30000:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "29987:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29987:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30012:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "29983:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29983:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "29980:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "30041:29:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30060:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "30054:5:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30054:16:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "30045:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "30101:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bool",
                              "nodeType": "YulIdentifier",
                              "src": "30079:21:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30079:28:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30079:28:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "30116:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "30126:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "30116:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29936:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "29947:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "29959:6:13",
                        "type": ""
                      }
                    ],
                    "src": "29892:245:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30316:231:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30333:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30344:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30326:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30326:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30326:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30367:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30378:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30363:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30363:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30383:2:13",
                                "type": "",
                                "value": "41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30356:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30356:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30356:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30406:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30417:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30402:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30402:18:13"
                              },
                              {
                                "hexValue": "436f6d7074726f6c6c65723a3a5f736574436f6d7053706565647320696e7661",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "30422:34:13",
                                "type": "",
                                "value": "Comptroller::_setCompSpeeds inva"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30395:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30395:62:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30395:62:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30477:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30488:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30473:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30473:18:13"
                              },
                              {
                                "hexValue": "6c696420696e707574",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "30493:11:13",
                                "type": "",
                                "value": "lid input"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30466:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30466:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30466:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "30514:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30526:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30537:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30522:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30522:19:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30514:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e72e94152274f93053cc6005f77476aaaef5a8b1a0bbda6a562ee9bf9595371f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "30293:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "30307:4:13",
                        "type": ""
                      }
                    ],
                    "src": "30142:405:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30726:168:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30743:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30754:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30736:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30736:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30736:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30777:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30788:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30773:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30773:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30793:2:13",
                                "type": "",
                                "value": "18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30766:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30766:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30766:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30816:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30827:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30812:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30812:18:13"
                              },
                              {
                                "hexValue": "7472616e7366657220697320706175736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "30832:20:13",
                                "type": "",
                                "value": "transfer is paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30805:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30805:48:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30805:48:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "30862:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30874:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30885:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30870:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30870:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30862:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b5db2e902ee37d8683e458d871fcb4db0f6161fc6067d555c25420c11cd7f985__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "30703:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "30717:4:13",
                        "type": ""
                      }
                    ],
                    "src": "30552:342:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31073:165:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31090:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31101:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31083:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31083:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31083:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31124:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31135:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31120:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31120:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31140:2:13",
                                "type": "",
                                "value": "15"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31113:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31113:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31113:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31163:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31174:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31159:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31159:18:13"
                              },
                              {
                                "hexValue": "7365697a6520697320706175736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "31179:17:13",
                                "type": "",
                                "value": "seize is paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31152:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31152:45:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31152:45:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "31206:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31218:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31229:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31214:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31214:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "31206:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d90a41fca4bdd602e58925aa5ca016279f8a08da0f3958dcc966cb5624a4ebe8__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "31050:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "31064:4:13",
                        "type": ""
                      }
                    ],
                    "src": "30899:339:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31353:178:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "31399:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "31408:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "31411:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "31401:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "31401:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "31401:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "31374:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31383:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "31370:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31370:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31395:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "31366:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31366:32:13"
                          },
                          "nodeType": "YulIf",
                          "src": "31363:52:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31424:29:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31443:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "31437:5:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31437:16:13"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "31428:5:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "31495:5:13"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_CToken",
                              "nodeType": "YulIdentifier",
                              "src": "31462:32:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31462:39:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31462:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "31510:15:13",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "31520:5:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "31510:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_ComptrollerInterface_$6928_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "31319:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "31330:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "31342:6:13",
                        "type": ""
                      }
                    ],
                    "src": "31243:288:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31710:166:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31727:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31738:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31720:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31720:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31720:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31761:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31772:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31757:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31757:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31777:2:13",
                                "type": "",
                                "value": "16"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31750:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31750:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31750:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31800:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31811:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31796:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31796:18:13"
                              },
                              {
                                "hexValue": "626f72726f7720697320706175736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "31816:18:13",
                                "type": "",
                                "value": "borrow is paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31789:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31789:46:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31789:46:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "31844:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31856:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31867:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31852:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31852:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "31844:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_fa9e0af97796c722ac293934a4461629780a8958d7e0f2e3993533df15c43baf__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "31687:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "31701:4:13",
                        "type": ""
                      }
                    ],
                    "src": "31536:340:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32055:171:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32072:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32083:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32065:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32065:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32065:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32106:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32117:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32102:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32102:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32122:2:13",
                                "type": "",
                                "value": "21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32095:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32095:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32095:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32145:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32156:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32141:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32141:18:13"
                              },
                              {
                                "hexValue": "73656e646572206d7573742062652063546f6b656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "32161:23:13",
                                "type": "",
                                "value": "sender must be cToken"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32134:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32134:51:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32134:51:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "32194:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32206:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32217:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32202:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32202:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "32194:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c6b1093b1638c601ff809827f079ea42bdfd6a234187db13d737b83e4e458fa9__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "32032:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "32046:4:13",
                        "type": ""
                      }
                    ],
                    "src": "31881:345:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32263:95:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32280:1:13",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32287:3:13",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32292:10:13",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "32283:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32283:20:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32273:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32273:31:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32273:31:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32320:1:13",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32323:4:13",
                                "type": "",
                                "value": "0x01"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32313:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32313:15:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32313:15:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32344:1:13",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32347:4:13",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "32337:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32337:15:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32337:15:13"
                        }
                      ]
                    },
                    "name": "panic_error_0x01",
                    "nodeType": "YulFunctionDefinition",
                    "src": "32231:127:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32537:175:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32554:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32565:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32547:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32547:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32547:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32588:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32599:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32584:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32584:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32604:2:13",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32577:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32577:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32577:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32627:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32638:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32623:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32623:18:13"
                              },
                              {
                                "hexValue": "6d61726b657420626f72726f77206361702072656163686564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "32643:27:13",
                                "type": "",
                                "value": "market borrow cap reached"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32616:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32616:55:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32616:55:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "32680:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32692:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32703:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32688:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32688:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "32680:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_cff0f73e08bfa2a9d6ae719bd0acb29b85bb81db8ff4e57a58ad65b3033d48b1__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "32514:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "32528:4:13",
                        "type": ""
                      }
                    ],
                    "src": "32363:349:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32889:188:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "32899:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32911:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32922:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32907:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32907:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "32899:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32941:9:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "32956:6:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "32972:3:13",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "32977:1:13",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "32968:3:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "32968:11:13"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "32981:1:13",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "32964:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "32964:19:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "32952:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32952:32:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32934:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32934:51:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32934:51:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33005:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33016:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33001:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33001:18:13"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "33021:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32994:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32994:34:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32994:34:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33048:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33059:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33044:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33044:18:13"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "33064:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33037:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33037:34:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33037:34:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_CToken_$2182_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "32842:9:13",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "32853:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "32861:6:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "32869:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "32880:4:13",
                        "type": ""
                      }
                    ],
                    "src": "32717:360:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33214:236:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "33261:16:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "33270:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "33273:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "33263:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "33263:12:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "33263:12:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "33235:7:13"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33244:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "33231:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33231:23:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33256:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "33227:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33227:33:13"
                          },
                          "nodeType": "YulIf",
                          "src": "33224:53:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33286:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33302:9:13"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "33296:5:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33296:16:13"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "33286:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33321:35:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33341:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33352:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33337:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33337:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "33331:5:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33331:25:13"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "33321:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33365:35:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33385:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33396:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33381:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33381:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "33375:5:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33375:25:13"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "33365:6:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33409:35:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33429:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33440:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33425:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33425:18:13"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "33419:5:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33419:25:13"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "33409:6:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "33156:9:13",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "33167:7:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "33179:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "33187:6:13",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "33195:6:13",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "33203:6:13",
                        "type": ""
                      }
                    ],
                    "src": "33082:368:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33629:227:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33646:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33657:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33639:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33639:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33639:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33680:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33691:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33676:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33676:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33696:2:13",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33669:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33669:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33669:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33719:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33730:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33715:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33715:18:13"
                              },
                              {
                                "hexValue": "657869744d61726b65743a206765744163636f756e74536e617073686f742066",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "33735:34:13",
                                "type": "",
                                "value": "exitMarket: getAccountSnapshot f"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33708:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33708:62:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33708:62:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33790:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33801:2:13",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33786:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33786:18:13"
                              },
                              {
                                "hexValue": "61696c6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "33806:7:13",
                                "type": "",
                                "value": "ailed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33779:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33779:35:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33779:35:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33823:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33835:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33846:3:13",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33831:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33831:19:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "33823:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_cafc76453fc83e3f10c72a8efc5040b77c059e2a8eb73233cb1b8ec3356ff222__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "33606:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "33620:4:13",
                        "type": ""
                      }
                    ],
                    "src": "33455:401:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33893:95:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33910:1:13",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33917:3:13",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33922:10:13",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "33913:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33913:20:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33903:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33903:31:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33903:31:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33950:1:13",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33953:4:13",
                                "type": "",
                                "value": "0x31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33943:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33943:15:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33943:15:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33974:1:13",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33977:4:13",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "33967:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33967:15:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33967:15:13"
                        }
                      ]
                    },
                    "name": "panic_error_0x31",
                    "nodeType": "YulFunctionDefinition",
                    "src": "33861:127:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34137:175:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "34147:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34159:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34170:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "34155:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34155:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "34147:4:13"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "34182:29:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34200:3:13",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34205:1:13",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "34196:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34196:11:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34209:1:13",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "34192:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34192:19:13"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "34186:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34227:9:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "34242:6:13"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "34250:2:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "34238:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34238:15:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34220:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34220:34:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34220:34:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "34274:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34285:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "34270:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34270:18:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "34294:6:13"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "34302:2:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "34290:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34290:15:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34263:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34263:43:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34263:43:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_CToken_$2182_t_address__to_t_address_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "34098:9:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "34109:6:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "34117:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "34128:4:13",
                        "type": ""
                      }
                    ],
                    "src": "33993:319:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34365:80:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "34392:22:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "34394:16:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "34394:18:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "34394:18:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "34381:1:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "34388:1:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "34384:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34384:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "34378:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34378:13:13"
                          },
                          "nodeType": "YulIf",
                          "src": "34375:39:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34423:16:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "34434:1:13"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "34437:1:13"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "34430:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34430:9:13"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "34423:3:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "34348:1:13",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "34351:1:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "34357:3:13",
                        "type": ""
                      }
                    ],
                    "src": "34317:128:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34615:162:13",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "34625:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34637:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34648:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "34633:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34633:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "34625:4:13"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34667:9:13"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "34678:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34660:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34660:25:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34660:25:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "34705:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34716:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "34701:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34701:18:13"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "34721:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34694:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34694:34:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34694:34:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "34748:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34759:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "34744:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34744:18:13"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "34764:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34737:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34737:34:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34737:34:13"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_rational_0_by_1__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "34568:9:13",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "34579:6:13",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "34587:6:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "34595:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "34606:4:13",
                        "type": ""
                      }
                    ],
                    "src": "34450:327:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34834:116:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "34893:22:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "34895:16:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "34895:18:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "34895:18:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "34865:1:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "34858:6:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "34858:9:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "34851:6:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34851:17:13"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "34873:1:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "34884:1:13",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "34880:3:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "34880:6:13"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "34888:1:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "34876:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "34876:14:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "34870:2:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34870:21:13"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "34847:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34847:45:13"
                          },
                          "nodeType": "YulIf",
                          "src": "34844:71:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34924:20:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "34939:1:13"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "34942:1:13"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "34935:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34935:9:13"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "34924:7:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "34813:1:13",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "34816:1:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "34822:7:13",
                        "type": ""
                      }
                    ],
                    "src": "34782:168:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35129:170:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "35146:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35157:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35139:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35139:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35139:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "35180:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35191:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35176:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35176:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35196:2:13",
                                "type": "",
                                "value": "20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35169:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35169:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35169:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "35219:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35230:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35215:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35215:18:13"
                              },
                              {
                                "hexValue": "6d61726b657420616c7265616479206164646564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "35235:22:13",
                                "type": "",
                                "value": "market already added"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35208:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35208:50:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35208:50:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "35267:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "35279:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35290:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "35275:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35275:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "35267:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0718f0bb9492946f628fbebd4fb0db7e9424e375676cddfeef9e89269976c475__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "35106:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "35120:4:13",
                        "type": ""
                      }
                    ],
                    "src": "34955:344:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35478:175:13",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "35495:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35506:2:13",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35488:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35488:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35488:21:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "35529:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35540:2:13",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35525:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35525:18:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35545:2:13",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35518:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35518:30:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35518:30:13"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "35568:9:13"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35579:2:13",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35564:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35564:18:13"
                              },
                              {
                                "hexValue": "636f6d70206d61726b6574206973206e6f74206c6973746564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "35584:27:13",
                                "type": "",
                                "value": "comp market is not listed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35557:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35557:55:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35557:55:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "35621:26:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "35633:9:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35644:2:13",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "35629:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35629:18:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "35621:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_962b660cbcb880f6102dd453b9e05ad769208d8fab60a49ef9470833083768b4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "35455:9:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "35469:4:13",
                        "type": ""
                      }
                    ],
                    "src": "35304:349:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35704:171:13",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "35735:111:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "35756:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "35763:3:13",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "35768:10:13",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "35759:3:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "35759:20:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "35749:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "35749:31:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "35749:31:13"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "35800:1:13",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "35803:4:13",
                                      "type": "",
                                      "value": "0x12"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "35793:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "35793:15:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "35793:15:13"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "35828:1:13",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "35831:4:13",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "35821:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "35821:15:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "35821:15:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "35724:1:13"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "35717:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35717:9:13"
                          },
                          "nodeType": "YulIf",
                          "src": "35714:132:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "35855:14:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "35864:1:13"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "35867:1:13"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "35860:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35860:9:13"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "35855:1:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "35689:1:13",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "35692:1:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "35698:1:13",
                        "type": ""
                      }
                    ],
                    "src": "35658:217:13"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "36001:476:13",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "36011:12:13",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "36021:2:13",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "36015:2:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36039:9:13"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "36050:2:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36032:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36032:21:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36032:21:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "36062:27:13",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "36082:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "36076:5:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36076:13:13"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "36066:6:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36109:9:13"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "36120:2:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36105:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36105:18:13"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "36125:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36098:6:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36098:34:13"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36098:34:13"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "36141:10:13",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "36150:1:13",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "36145:1:13",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "36210:90:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "36239:9:13"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "36250:1:13"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "36235:3:13"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "36235:17:13"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "36254:2:13",
                                          "type": "",
                                          "value": "64"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "36231:3:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "36231:26:13"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "value0",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "36273:6:13"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "36281:1:13"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "36269:3:13"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "36269:14:13"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "36285:2:13"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "36265:3:13"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "36265:23:13"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "36259:5:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "36259:30:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "36224:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "36224:66:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "36224:66:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "36171:1:13"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "36174:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "36168:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36168:13:13"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "36182:19:13",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "36184:15:13",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "36193:1:13"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "36196:2:13"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "36189:3:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "36189:10:13"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "36184:1:13"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "36164:3:13",
                            "statements": []
                          },
                          "src": "36160:140:13"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "36334:66:13",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "36363:9:13"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "36374:6:13"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "36359:3:13"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "36359:22:13"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "36383:2:13",
                                          "type": "",
                                          "value": "64"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "36355:3:13"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "36355:31:13"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "36388:1:13",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "36348:6:13"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "36348:42:13"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "36348:42:13"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "36315:1:13"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "36318:6:13"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "36312:2:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36312:13:13"
                          },
                          "nodeType": "YulIf",
                          "src": "36309:91:13"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "36409:62:13",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36425:9:13"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "36444:6:13"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "36452:2:13",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "36440:3:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "36440:15:13"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "36461:2:13",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "36457:3:13"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "36457:7:13"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "36436:3:13"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "36436:29:13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36421:3:13"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36421:45:13"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36468:2:13",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36417:3:13"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36417:54:13"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "36409:4:13"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "35970:9:13",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "35981:6:13",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "35992:4:13",
                        "type": ""
                      }
                    ],
                    "src": "35880:597:13"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function validator_revert_contract_CToken(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_CToken_$2182t_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_bool(value_1)\n        value1 := value_1\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_contract_CToken_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_contract_CToken_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_contract_CToken_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let value := calldataload(src)\n            validator_revert_contract_CToken(value)\n            mstore(dst, value)\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_addresst_array$_t_contract$_CToken_$2182_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_array_contract_CToken_dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_contract$_Unitroller_$9435(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_contract_CToken(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_contract_CToken(value_2)\n        value2 := value_2\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_contract_CToken(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_contract_CToken(value_2)\n        value2 := value_2\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_contract_CToken(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_contract_CToken(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_contract_CToken(value_2)\n        value2 := value_2\n        let value_3 := calldataload(add(headStart, 96))\n        validator_revert_contract_CToken(value_3)\n        value3 := value_3\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_contract_CToken(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_contract$_CToken_$2182__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_contract$_PriceOracle_$9168(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_contract_CToken(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_contract_CToken(value_2)\n        value2 := value_2\n        let value_3 := calldataload(add(headStart, 96))\n        validator_revert_contract_CToken(value_3)\n        value3 := value_3\n        value4 := calldataload(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_array$_t_contract$_CToken_$2182_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_array_address_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_contract_CToken_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let value := calldataload(src)\n            validator_revert_contract_CToken(value)\n            mstore(dst, value)\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_contract$_CToken_$2182_$dyn_memory_ptrt_boolt_bool(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_address_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_contract_CToken_dyn(add(headStart, offset_1), dataEnd)\n        let value := calldataload(add(headStart, 64))\n        validator_revert_bool(value)\n        value2 := value\n        let value_1 := calldataload(add(headStart, 96))\n        validator_revert_bool(value_1)\n        value3 := value_1\n    }\n    function abi_encode_tuple_t_uint224_t_uint32__to_t_uint224_t_uint32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(224, 1), 1)))\n        mstore(add(headStart, 32), and(value1, 0xffffffff))\n    }\n    function abi_encode_tuple_t_contract$_PriceOracle_$9168__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bool_t_uint256_t_bool__to_t_bool_t_uint256_t_bool__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n    }\n    function abi_decode_tuple_t_addresst_contract$_CToken_$2182(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_contract_CToken(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_contract$_CToken_$2182(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint224__to_t_uint224__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(224, 1), 1)))\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_contract_CToken_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_contract$_CToken_$2182_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_contract_CToken_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset_2), dataEnd)\n    }\n    function abi_encode_tuple_t_array$_t_contract$_CToken_$2182_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_contract_CToken(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_array_address_dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_contract$_CToken_$2182t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_e0ef19aa67a8b89b19419c8977a6a75d04286a47014bf7a3d2ea537634352c8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Only admin can call this functio\")\n        mstore(add(headStart, 96), \"n\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_27a608bd53c74de8d40cac0c2cd3e5ff534ed9016c4a026ae533dc3a75ad67e8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Already executed this one-off fu\")\n        mstore(add(headStart, 96), \"nction\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_af39b50065ba9648c753f781fa674704d13ce8309cf446a262799d7aceba8e5b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"Invalid input\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_0ad46837fefc66a37a27d365ae7d6446a39b33a37d743c62daa13796b21a9a61__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"cannot pause a market that is no\")\n        mstore(add(headStart, 96), \"t listed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5e020e1a96b4ab4ba411c1975849456615c80f16e98fad3f52c3497dacd698b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"only pause guardian and admin ca\")\n        mstore(add(headStart, 96), \"n pause\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_591a1484d16116f5d48f25e1321d80627bc17b2d3f0d7384d855c565fac570fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"only admin can unpause\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_contract$_CToken_$2182_t_stringliteral_7be2dfa0d0bbc9b229c88acd70a4e76511e2d12d8821c5955d8b5d57fd4c5944_t_bool__to_t_address_t_string_memory_ptr_t_bool__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), 96)\n        mstore(add(headStart, 96), 6)\n        mstore(add(headStart, 128), \"Borrow\")\n        tail := add(headStart, 160)\n        mstore(add(headStart, 64), iszero(iszero(value1)))\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_f707df4514ea5b5fb8028d4563616eaaee14c4e2dd4bd81e2c8201e4cb9f9bb3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"only unitroller admin can change\")\n        mstore(add(headStart, 96), \" brains\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_c97af826dc35ad084eb38e82309aaa9eaac3c0d2d1e1571cb89b514117456352__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"change not authorized\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_12faf5080ce59fc31f3d1b49f65e37cdb40fe1bc12300993fda1dbcdc1c5e5b8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"only admin can grant comp\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1153443ce7acf202edc12781ed442b4efe9c7648578aa749102e5c0ef009032b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"insufficient comp for grant\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_5c1f74cea61207c2a1a5566895b9d1152af4e3bee017489720ca70120db76661_t_bool__to_t_string_memory_ptr_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        mstore(add(headStart, 64), 5)\n        mstore(add(headStart, 96), \"Seize\")\n        tail := add(headStart, 128)\n        mstore(add(headStart, 0x20), iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_stringliteral_45cf84233da57232b98a0ffb4e5ec3e0126512b471f92677a6e78ae79c21c7c9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"only admin can set close factor\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6b99e94e4e24bae0f68df3a62bf05a1aa126af8be8c5f958d69c28141ae73bea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"only admin can set borrow cap gu\")\n        mstore(add(headStart, 96), \"ardian\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_contract$_CToken_$2182_t_stringliteral_234e55c1cd55f1338241b50d352f0e91c7e4ffad0e4271d64eb347589ebdfd16_t_bool__to_t_address_t_string_memory_ptr_t_bool__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), 96)\n        mstore(add(headStart, 96), 4)\n        mstore(add(headStart, 128), \"Mint\")\n        tail := add(headStart, 160)\n        mstore(add(headStart, 64), iszero(iszero(value1)))\n    }\n    function abi_encode_tuple_t_stringliteral_f20052e9c73751e3b6f0a0b0d6e756b61441e56378041bd3ee24195f79f7b047__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"mint is paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_be68349ba5b02869947a89562a2d8143503a6601656c6cceb6f211f463db7e95__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"redeemTokens zero\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_contract$_PriceOracle_$9168_t_contract$_PriceOracle_$9168__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_3cb11c44fa0b681787fda7f5b18da4e2e82460f13e09d5b06117c0b4fde4eb12__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"only admin can set comp speed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_22d5d5d3b52be8ce0613f3ddc798758545c899709c322c0c43b33f98cbc6735e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"Can not repay more than the tota\")\n        mstore(add(headStart, 96), \"l borrow\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c52e43c56c1766225f7880eeb88c0e0929ce672205bb849d400966d7edc00144__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 53)\n        mstore(add(headStart, 64), \"only admin or borrow cap guardia\")\n        mstore(add(headStart, 96), \"n can set borrow caps\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_dbab81719f15ade78f76dcdbf7cff531fc5f9822fe7e8466ffdd2feb23510f3b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"invalid input\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8d6cda2e8214bcdab6eb9bde4767020b52a0b58abe9235e475535a272dbeb6e1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"market must be listed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f099cd8bde557814842a3121e8ddfd433a539b8c9f14bf31ebf108d12e6196e9_t_bool__to_t_string_memory_ptr_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        mstore(add(headStart, 64), 8)\n        mstore(add(headStart, 96), \"Transfer\")\n        tail := add(headStart, 128)\n        mstore(add(headStart, 0x20), iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e72e94152274f93053cc6005f77476aaaef5a8b1a0bbda6a562ee9bf9595371f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"Comptroller::_setCompSpeeds inva\")\n        mstore(add(headStart, 96), \"lid input\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b5db2e902ee37d8683e458d871fcb4db0f6161fc6067d555c25420c11cd7f985__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"transfer is paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d90a41fca4bdd602e58925aa5ca016279f8a08da0f3958dcc966cb5624a4ebe8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"seize is paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_contract$_ComptrollerInterface_$6928_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_CToken(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_fa9e0af97796c722ac293934a4461629780a8958d7e0f2e3993533df15c43baf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"borrow is paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c6b1093b1638c601ff809827f079ea42bdfd6a234187db13d737b83e4e458fa9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"sender must be cToken\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x01()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x01)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_cff0f73e08bfa2a9d6ae719bd0acb29b85bb81db8ff4e57a58ad65b3033d48b1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"market borrow cap reached\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_contract$_CToken_$2182_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_stringliteral_cafc76453fc83e3f10c72a8efc5040b77c059e2a8eb73233cb1b8ec3356ff222__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"exitMarket: getAccountSnapshot f\")\n        mstore(add(headStart, 96), \"ailed\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_contract$_CToken_$2182_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_rational_0_by_1__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_0718f0bb9492946f628fbebd4fb0db7e9424e375676cddfeef9e89269976c475__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"market already added\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_962b660cbcb880f6102dd453b9e05ad769208d8fab60a49ef9470833083768b4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"comp market is not listed\")\n        tail := add(headStart, 96)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
              "id": 13,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b506004361061048a5760003560e01c8063731f0c2b11610262578063b21be7fd11610151578063dce15449116100ce578063e9af029211610092578063e9af029214610c04578063eabe7d9114610c17578063ede4edd014610c2a578063f00a7a9214610c3d578063f4a433c014610c4a578063f851a44014610c6a57600080fd5b8063dce1544914610bae578063dcfbc0c714610bc1578063e4028eee14610bd4578063e6653f3d14610be7578063e875544614610bfb57600080fd5b8063c488847b11610115578063c488847b14610b15578063ca0af04314610b3d578063cc7ebdc414610b68578063d02f735114610b88578063da3d454c14610b9b57600080fd5b8063b21be7fd14610a84578063bb82aa5e14610aaf578063bdcdc25814610ac2578063bea6b8b814610ad5578063c299823814610af557600080fd5b806394b2294b116101df578063a8b43948116101a3578063a8b4394814610a2c578063aa90075414610a3f578063abfceffc14610a48578063ac0b0bb714610a68578063b0772d0b14610a7c57600080fd5b806394b2294b146109a9578063986ab838146109b25780639d1b5a0a146109d2578063a76b3fda146109ec578063a7f0e231146109ff57600080fd5b80638c57804e116102265780638c57804e146108b75780638e8f294b146108ef5780638ebf636414610942578063929fe9a11461095557806394543c151461099657600080fd5b8063731f0c2b1461083a578063741b25251461085d5780637dc0d1d01461087057806385b7beb81461088357806387f76303146108a357600080fd5b80634a5844321161037e5780635ec88c79116102fb5780636a56947e116102bf5780636a56947e1461077f5780636aa875b51461078d5780636b79c38d146107ad5780636d154ea5146108095780636d35bf911461082c57600080fd5b80635ec88c79146107205780635f5af1aa146107335780635fc7e71e14610746578063607ef6c1146107595780636810dfa61461076c57600080fd5b806351dff9891161034257806351dff989146106c157806352d84d1e146106d457806355ee1fe1146106e7578063598ee1cb146106fa5780635c7786051461070d57600080fd5b80634a584432146106445780634ada90af146106645780634e79238f1461066d5780634ef4c3e11461069b5780634fd42e17146106ae57600080fd5b8063267822471161040c5780633bcf7ec1116103d05780633bcf7ec1146105ed5780633c94786f1461060057806341c728b91461061457806342cbb15c1461062857806347ef3b3b1461062e57600080fd5b8063267822471461058e57806327efe3cb146105a15780632d70db78146105b4578063317b0b77146105c7578063391957d7146105da57600080fd5b80631d7b33d7116104535780631d7b33d7146104fa5780631ededc911461052857806321af45691461053d57806324008a621461056857806324a3d6221461057b57600080fd5b80627e3dd21461048f57806316b95e8f146104ac57806318c882a5146104c15780631c3db2e0146104d45780631d504dc6146104e7575b600080fd5b610497600181565b60405190151581526020015b60405180910390f35b6104bf6104ba366004614a3c565b610c7d565b005b6104976104cf366004614acb565b610f26565b6104bf6104e2366004614be3565b61105f565b6104bf6104f5366004614c33565b6110c2565b61051a610508366004614c33565b600f6020526000908152604090205481565b6040519081526020016104a3565b6104bf610536366004614c50565b5050505050565b601554610550906001600160a01b031681565b6040516001600160a01b0390911681526020016104a3565b61051a610576366004614cab565b611240565b600a54610550906001600160a01b031681565b600154610550906001600160a01b031681565b6104bf6105af366004614cfc565b6112fe565b6104976105c2366004614d28565b6113f5565b61051a6105d5366004614d45565b6114e5565b6104bf6105e8366004614c33565b61158c565b6104976105fb366004614acb565b611656565b600a5461049790600160a01b900460ff1681565b6104bf610622366004614d5e565b50505050565b4261051a565b6104bf61063c366004614da4565b505050505050565b61051a610652366004614c33565b60166020526000908152604090205481565b61051a60065481565b61068061067b366004614d5e565b611780565b604080519384526020840192909252908201526060016104a3565b61051a6106a9366004614e12565b6117c0565b61051a6106bc366004614d45565b611861565b6104bf6106cf366004614d5e565b6118be565b6105506106e2366004614d45565b61190d565b61051a6106f5366004614c33565b611937565b6104bf610708366004614cfc565b6119b0565b6104bf61071b366004614e12565b505050565b61068061072e366004614c33565b611aa4565b61051a610741366004614c33565b611adf565b61051a610754366004614e53565b611b58565b6104bf610767366004614a3c565b611d27565b6104bf61077a366004614f1b565b611f05565b6104bf610622366004614cab565b61051a61079b366004614c33565b601a6020526000908152604090205481565b6107e56107bb366004614c33565b6010602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604080516001600160e01b03909316835263ffffffff9091166020830152016104a3565b610497610817366004614c33565b600c6020526000908152604090205460ff1681565b6104bf610536366004614e53565b610497610848366004614c33565b600b6020526000908152604090205460ff1681565b6104bf61086b366004614c33565b61218f565b600454610550906001600160a01b031681565b61051a610891366004614c33565b601c6020526000908152604090205481565b600a5461049790600160b01b900460ff1681565b6107e56108c5366004614c33565b6011602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b6109236108fd366004614c33565b60096020526000908152604090208054600182015460039092015460ff91821692911683565b60408051931515845260208401929092521515908201526060016104a3565b610497610950366004614d28565b61223b565b610497610963366004614fa4565b6001600160a01b038082166000908152600960209081526040808320938616835260029093019052205460ff1692915050565b6104976109a4366004614c33565b612322565b61051a60075481565b61051a6109c0366004614c33565b60176020526000908152604090205481565b73d86c8d4279ccafbec840c782bcc50d201f277419610550565b61051a6109fa366004614c33565b6123e1565b610a146a0c097ce7bc90715b34b9f160241b81565b6040516001600160e01b0390911681526020016104a3565b6104bf610a3a36600461502d565b612513565b61051a600e5481565b610a5b610a56366004614c33565b612648565b6040516104a391906150b5565b600a5461049790600160b81b900460ff1681565b610a5b6126be565b61051a610a92366004614fa4565b601260209081526000928352604080842090915290825290205481565b600254610550906001600160a01b031681565b61051a610ad0366004614cab565b612720565b61051a610ae3366004614c33565b60186020526000908152604090205481565b610b08610b03366004615102565b6127ab565b6040516104a39190615137565b610b28610b23366004614e12565b612873565b604080519283526020830191909152016104a3565b61051a610b4b366004614fa4565b601360209081526000928352604080842090915290825290205481565b61051a610b76366004614c33565b60146020526000908152604090205481565b61051a610b96366004614e53565b612a91565b61051a610ba9366004614e12565b612c38565b610550610bbc366004614cfc565b613008565b600354610550906001600160a01b031681565b61051a610be2366004614cfc565b613040565b600a5461049790600160a81b900460ff1681565b61051a60055481565b6104bf610c12366004614c33565b6131d2565b61051a610c25366004614e12565b613236565b61051a610c38366004614c33565b613271565b601b546104979060ff1681565b61051a610c58366004614c33565b60196020526000908152604090205481565b600054610550906001600160a01b031681565b6000546001600160a01b03163314610ce65760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b60648201526084015b60405180910390fd5b601b5460ff1615610d485760405162461bcd60e51b815260206004820152602660248201527f416c72656164792065786563757465642074686973206f6e652d6f66662066756044820152653731ba34b7b760d11b6064820152608401610cdd565b828114610d875760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081a5b9c1d5d609a1b6044820152606401610cdd565b60008060008060005b87811015610f0e57888882818110610daa57610daa61516f565b9050602002016020810190610dbf9190614c33565b6001600160a01b0381166000908152601460205260409020549095509350868682818110610def57610def61516f565b90506020020135925083831115610e93576000610e0c858561519b565b6001600160a01b0387166000908152601c6020526040812054919250610e3282846135d7565b6001600160a01b0389166000818152601c6020908152604091829020849055815186815290810184905292935090917f17fea09d9a7ca41b2f9f9118f18f44848a62e9c70d55dd4385131eb2cf1b7e47910160405180910390a28695505050505b8215610efe57610ea384846135e3565b6001600160a01b038616600081815260146020908152604091829020849055815188815290810184905292945090917f4a5c134e28b537a76546993ea37f3b60d9190476df7356d3842aa40902e20f04910160405180910390a25b610f07816151b2565b9050610d90565b5050601b805460ff1916600117905550505050505050565b6001600160a01b03821660009081526009602052604081205460ff16610f5e5760405162461bcd60e51b8152600401610cdd906151cd565b600a546001600160a01b0316331480610f8157506000546001600160a01b031633145b610f9d5760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b0316331480610fb857506001821515145b610fd45760405162461bcd60e51b8152600401610cdd9061525c565b6001600160a01b0383166000818152600c6020908152604091829020805460ff19168615159081179091558251938452606091840182905260069184019190915265426f72726f7760d01b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a0015b60405180910390a150805b92915050565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106110955761109561516f565b60200260200101906001600160a01b031690816001600160a01b03168152505061071b8183600180611f05565b806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611100573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611124919061528c565b6001600160a01b0316336001600160a01b0316146111945760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676560448201526620627261696e7360c81b6064820152608401610cdd565b806001600160a01b031663c1e803346040518163ffffffff1660e01b81526004016020604051808303816000875af11580156111d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f891906152a9565b1561123d5760405162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b6044820152606401610cdd565b50565b6001600160a01b03841660009081526009602052604081205460ff16611268575060096112f6565b60006040518060200160405280876001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d791906152a9565b905290506112e586826135ef565b6112f08685836137e2565b60009150505b949350505050565b611306613962565b6113525760405162461bcd60e51b815260206004820152601960248201527f6f6e6c792061646d696e2063616e206772616e7420636f6d70000000000000006044820152606401610cdd565b600061135e838361398b565b905080156113ae5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420636f6d7020666f72206772616e7400000000006044820152606401610cdd565b604080516001600160a01b0385168152602081018490527f98b2f82a3a07f223a0be64b3d0f47711c64dccd1feafb94aa28156b38cd9695c910160405180910390a1505050565b600a546000906001600160a01b031633148061141b57506000546001600160a01b031633145b6114375760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b031633148061145257506001821515145b61146e5760405162461bcd60e51b8152600401610cdd9061525c565b600a8054831515600160b81b0260ff60b81b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906114d99084906040808252600590820152645365697a6560d81b6060820152901515602082015260800190565b60405180910390a15090565b600080546001600160a01b031633146115405760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792061646d696e2063616e2073657420636c6f736520666163746f72006044820152606401610cdd565b600580549083905560408051828152602081018590527f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd991015b60405180910390a160005b9392505050565b6000546001600160a01b031633146115f55760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792061646d696e2063616e2073657420626f72726f772063617020677560448201526530b93234b0b760d11b6064820152608401610cdd565b601580546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527feda98690e518e9a05f8ec6837663e188211b2da8f4906648b323f2c1d4434e29910160405180910390a15050565b6001600160a01b03821660009081526009602052604081205460ff1661168e5760405162461bcd60e51b8152600401610cdd906151cd565b600a546001600160a01b03163314806116b157506000546001600160a01b031633145b6116cd5760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b03163314806116e857506001821515145b6117045760405162461bcd60e51b8152600401610cdd9061525c565b6001600160a01b0383166000818152600b6020908152604091829020805460ff19168615159081179091558251938452606091840182905260049184019190915263135a5b9d60e21b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a00161104e565b6000806000806000806117958a8a8a8a613ab0565b9250925092508260118111156117ad576117ad6152c2565b95509093509150505b9450945094915050565b6001600160a01b0383166000908152600b602052604081205460ff161561181a5760405162461bcd60e51b815260206004820152600e60248201526d1b5a5b9d081a5cc81c185d5cd95960921b6044820152606401610cdd565b6001600160a01b03841660009081526009602052604090205460ff166118445760095b9050611585565b61184d84613dde565b6118578484613f56565b6000949350505050565b600080546001600160a01b03163314611880576110596001600b6140f4565b600680549083905560408051828152602081018590527faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec1316910161157a565b801580156118cc5750600082115b156106225760405162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b6044820152606401610cdd565b600d818154811061191d57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546001600160a01b0316331461195657611059600160106140f4565b600480546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e22910161157a565b6119b8613962565b611a045760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792061646d696e2063616e2073657420636f6d702073706565640000006044820152606401610cdd565b611a0d8261218f565b80611a30576001600160a01b038216600090815260186020526040812055611a4b565b426001600160a01b0383166000908152601860205260409020555b6001600160a01b03821660008181526017602052604090819020839055517f386537fa92edc3319af95f1f904dcf1900021e4f3f4e08169a577a09076e66b390611a989084815260200190565b60405180910390a25050565b600080600080600080611abb876000806000613ab0565b925092509250826011811115611ad357611ad36152c2565b97919650945092505050565b600080546001600160a01b03163314611afe57611059600160136140f4565b600a80546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e910161157a565b6001600160a01b03851660009081526009602052604081205460ff161580611b9957506001600160a01b03851660009081526009602052604090205460ff16155b15611ba85760095b9050611d1e565b6040516395dd919360e01b81526001600160a01b038481166004830152600091908816906395dd919390602401602060405180830381865afa158015611bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1691906152a9565b9050611c2187612322565b15611c8c5782811015611c875760405162461bcd60e51b815260206004820152602860248201527f43616e206e6f74207265706179206d6f7265207468616e2074686520746f74616044820152676c20626f72726f7760c01b6064820152608401610cdd565b611d18565b600080611c988661416d565b91935090915060009050826011811115611cb457611cb46152c2565b14611cd557816011811115611ccb57611ccb6152c2565b9350505050611d1e565b80611ce1576003611ccb565b6000611cfd60405180602001604052806005548152508561418d565b905080861115611d14576011945050505050611d1e565b5050505b60009150505b95945050505050565b6000546001600160a01b0316331480611d4a57506015546001600160a01b031633145b611db45760405162461bcd60e51b815260206004820152603560248201527f6f6e6c792061646d696e206f7220626f72726f772063617020677561726469616044820152746e2063616e2073657420626f72726f77206361707360581b6064820152608401610cdd565b82818115801590611dc457508082145b611e005760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610cdd565b60005b82811015611efc57848482818110611e1d57611e1d61516f565b9050602002013560166000898985818110611e3a57611e3a61516f565b9050602002016020810190611e4f9190614c33565b6001600160a01b03168152602081019190915260400160002055868682818110611e7b57611e7b61516f565b9050602002016020810190611e909190614c33565b6001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f6868684818110611ecc57611ecc61516f565b90506020020135604051611ee291815260200190565b60405180910390a280611ef4816151b2565b915050611e03565b50505050505050565b60005b83518110156120cc576000848281518110611f2557611f2561516f565b6020908102919091018101516001600160a01b0381166000908152600990925260409091205490915060ff16611f955760405162461bcd60e51b81526020600482015260156024820152741b585c9ad95d081b5d5cdd081899481b1a5cdd1959605a1b6044820152606401610cdd565b600184151514156120625760006040518060200160405280836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200f91906152a9565b9052905061201d82826135ef565b60005b875181101561205f5761204d8389838151811061203f5761203f61516f565b6020026020010151846137e2565b80612057816151b2565b915050612020565b50505b600183151514156120b95761207681613dde565b60005b86518110156120b7576120a5828883815181106120985761209861516f565b6020026020010151613f56565b806120af816151b2565b915050612079565b505b50806120c4816151b2565b915050611f08565b5060005b84518110156105365761213a8582815181106120ee576120ee61516f565b60200260200101516014600088858151811061210c5761210c61516f565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205461398b565b601460008784815181106121505761215061516f565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080612187906151b2565b9150506120d0565b6001600160a01b0381166000908152601760209081526040808320546018909252822054909142916121c29083906135e3565b90506000811180156121d45750600083115b156106225760006121e582856141a5565b6001600160a01b0386166000908152601460205260408120549192509061220c90836135d7565b6001600160a01b0387166000908152601460209081526040808320939093556018905220849055505050505050565b600a546000906001600160a01b031633148061226157506000546001600160a01b031633145b61227d5760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b031633148061229857506001821515145b6122b45760405162461bcd60e51b8152600401610cdd9061525c565b600a8054831515600160b01b0260ff60b01b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906114d99084906040808252600890820152672a3930b739b332b960c11b6060820152901515602082015260800190565b6001600160a01b03811660009081526009602052604081206001015415801561236857506001600160a01b0382166000908152600c602052604090205460ff1615156001145b80156110595750816001600160a01b031663173b99046040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d191906152a9565b670de0b6b3a76400001492915050565b600080546001600160a01b0316331461240057611059600160126140f4565b6001600160a01b03821660009081526009602052604090205460ff161561242d57611059600a60116140f4565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561246b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248f91906152d8565b506001600160a01b03821660009081526009602052604081208054600160ff19918216811783556003830180549092169091558101919091556124d1836141b1565b6124da8361429a565b6040516001600160a01b03841681527fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f9060200161157a565b61251b613962565b6125675760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792061646d696e2063616e2073657420636f6d702073706565640000006044820152606401610cdd565b82518251811480156125795750815181145b6125d75760405162461bcd60e51b815260206004820152602960248201527f436f6d7074726f6c6c65723a3a5f736574436f6d7053706565647320696e76616044820152681b1a59081a5b9c1d5d60ba1b6064820152608401610cdd565b60005b81811015610536576126388582815181106125f7576125f761516f565b60200260200101518583815181106126115761261161516f565b602002602001015185848151811061262b5761262b61516f565b6020026020010151614356565b612641816151b2565b90506125da565b6001600160a01b03811660009081526008602090815260408083208054825181850281018501909352808352606094938301828280156126b157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612693575b5093979650505050505050565b6060600d80548060200260200160405190810160405280929190818152602001828054801561271657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116126f8575b5050505050905090565b600a54600090600160b01b900460ff16156127725760405162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c881a5cc81c185d5cd95960721b6044820152606401610cdd565b600061277f868685614535565b9050801561278e5790506112f6565b61279786613dde565b6127a18686613f56565b6112f08685613f56565b805160609060008167ffffffffffffffff8111156127cb576127cb614b04565b6040519080825280602002602001820160405280156127f4578160200160208202803683370190505b50905060005b8281101561286b5760008582815181106128165761281661516f565b6020026020010151905061282a81336145ed565b601181111561283b5761283b6152c2565b83838151811061284d5761284d61516f565b60209081029190910101525080612863816151b2565b9150506127fa565b509392505050565b6004805460405163fc57d4df60e01b81526001600160a01b03868116938201939093526000928392839291169063fc57d4df90602401602060405180830381865afa1580156128c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ea91906152a9565b6004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935292935060009291169063fc57d4df90602401602060405180830381865afa15801561293c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296091906152a9565b905081158061296d575080155b1561298157600d6000935093505050612a89565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e591906152a9565b905060006129ff6040518060200160405280600081525090565b604080516020808201835260008083528351808301855290815283518083018552600654815284519283019094528882529192612a3b916146e2565b9250612a636040518060200160405280888152506040518060200160405280888152506146e2565b9150612a6f838361472a565b9050612a7b818b61418d565b600099509750505050505050505b935093915050565b600a54600090600160b81b900460ff1615612ae05760405162461bcd60e51b815260206004820152600f60248201526e1cd95a5e99481a5cc81c185d5cd959608a1b6044820152606401610cdd565b6001600160a01b03861660009081526009602052604090205460ff161580612b2157506001600160a01b03851660009081526009602052604090205460ff16155b15612b2d576009611ba1565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8f919061528c565b6001600160a01b0316866001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfa919061528c565b6001600160a01b031614612c0f576002611ba1565b612c1886613dde565b612c228684613f56565b612c2c8685613f56565b60009695505050505050565b6001600160a01b0383166000908152600c602052604081205460ff1615612c945760405162461bcd60e51b815260206004820152601060248201526f189bdc9c9bddc81a5cc81c185d5cd95960821b6044820152606401610cdd565b6001600160a01b03841660009081526009602052604090205460ff16612cbb57600961183d565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff16612db857336001600160a01b03851614612d3c5760405162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba1031329031aa37b5b2b760591b6044820152606401610cdd565b6000612d4833856145ed565b90506000816011811115612d5e57612d5e6152c2565b14612d7d57806011811115612d7557612d756152c2565b915050611585565b6001600160a01b038086166000908152600960209081526040808320938816835260029093019052205460ff16612db657612db66152f5565b505b6004805460405163fc57d4df60e01b81526001600160a01b038781169382019390935291169063fc57d4df90602401602060405180830381865afa158015612e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2891906152a9565b612e3357600d61183d565b6001600160a01b0384166000908152601660205260409020548015612f18576000856001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb691906152a9565b90506000612ec482866135d7565b9050828110612f155760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f77206361702072656163686564000000000000006044820152606401610cdd565b50505b600080612f288688600088613ab0565b91935090915060009050826011811115612f4457612f446152c2565b14612f6557816011811115612f5b57612f5b6152c2565b9350505050611585565b8015612f72576004612f5b565b60006040518060200160405280896001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe191906152a9565b90529050612fef88826135ef565b612ffa8888836137e2565b600098975050505050505050565b6008602052816000526040600020818154811061302457600080fd5b6000918252602090912001546001600160a01b03169150829050565b600080546001600160a01b031633146130665761305f600160066140f4565b9050611059565b6001600160a01b0383166000908152600960205260409020805460ff1661309b57613093600960076140f4565b915050611059565b60408051602080820183528582528251908101909252670c7d713b49da00008252906130c981835190511090565b156130e4576130da600660086140f4565b9350505050611059565b841580159061316057506004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935291169063fc57d4df90602401602060405180830381865afa15801561313a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315e91906152a9565b155b15613171576130da600d60096140f4565b60018301805490869055604080516001600160a01b0389168152602081018390529081018790527f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59060600160405180910390a16000979650505050505050565b61123d81600d80548060200260200160405190810160405280929190818152602001828054801561322c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161320e575b505050505061105f565b600080613244858585614535565b90508015613253579050611585565b61325c85613dde565b6132668585613f56565b600095945050505050565b6040516361bfb47160e11b815233600482015260009082908290819081906001600160a01b0385169063c37f68e290602401608060405180830381865afa1580156132c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e4919061530b565b50925092509250826000146133495760405162461bcd60e51b815260206004820152602560248201527f657869744d61726b65743a206765744163636f756e74536e617073686f742066604482015264185a5b195960da1b6064820152608401610cdd565b80156133655761335b600c60026140f4565b9695505050505050565b6000613372873385614535565b9050801561339257613387600e600383614764565b979650505050505050565b6001600160a01b0385166000908152600960209081526040808320338452600281019092529091205460ff166133d057600098975050505050505050565b3360009081526002820160209081526040808320805460ff19169055600882528083208054825181850281018501909352808352919290919083018282801561344257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613424575b5050835193945083925060009150505b828110156134a757896001600160a01b03168482815181106134765761347661516f565b60200260200101516001600160a01b03161415613495578091506134a7565b8061349f816151b2565b915050613452565b508181106134b7576134b76152f5565b336000908152600860205260409020805481906134d69060019061519b565b815481106134e6576134e661516f565b9060005260206000200160009054906101000a90046001600160a01b03168183815481106135165761351661516f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080548061355457613554615341565b600082815260209020810160001990810180546001600160a01b03191690550190556040517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d906135bd908c9033906001600160a01b0392831681529116602082015260400190565b60405180910390a160009c9b505050505050505050505050565b60006115858284615357565b6000611585828461519b565b6001600160a01b038216600090815260116020908152604080832060199092528220549091613654425b6040518060400160405280601c81526020017f626c6f636b206e756d62657220657863656564732033322062697473000000008152506147dc565b83549091506000906136769063ffffffff80851691600160e01b9004166135e3565b90506000811180156136885750600083115b156137b75760006136fa876001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f491906152a9565b8761480c565b9050600061370883866141a5565b905060008083116137285760405180602001604052806000815250613732565b613732828461482a565b604080516020810190915288546001600160e01b031681529091506137959061375b9083614865565b5160408051808201909152601a81527f6e657720696e64657820657863656564732032323420626974730000000000006020820152614891565b6001600160e01b0316600160e01b63ffffffff8716021787555061063c915050565b801561063c57835463ffffffff8316600160e01b026001600160e01b03909116178455505050505050565b6001600160a01b03838116600090815260116020908152604080832080546013845282852095881685529490925290912080546001600160e01b039093169081905590918015801561384257506a0c097ce7bc90715b34b9f160241b8210155b1561385857506a0c097ce7bc90715b34b9f160241b5b6000604051806020016040528061386f85856135e3565b90526040516395dd919360e01b81526001600160a01b0388811660048301529192506000916138c291908a16906395dd919390602401602060405180830381865afa1580156136d0573d6000803e3d6000fd5b905060006138d082846148b8565b6001600160a01b038916600090815260146020526040812054919250906138f790836135d7565b6001600160a01b038a811660008181526014602090815260409182902085905581518781529081018b90529394509092918d16917f1fc3ecc087d8d2d15e23d0032af5a47059c3892d003d8e139fdcb6bb327c99a6910160405180910390a350505050505050505050565b600080546001600160a01b031633148061398657506002546001600160a01b031633145b905090565b60008073d86c8d4279ccafbec840c782bcc50d201f2774196040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156139ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1191906152a9565b9050600084118015613a235750808411155b15613aa75760405163a9059cbb60e01b81526001600160a01b0386811660048301526024820186905283169063a9059cbb906044016020604051808303816000875af1158015613a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a9b91906152d8565b50600092505050611059565b50919392505050565b6000806000613abd61494e565b6001600160a01b038816600090815260086020908152604080832080548251818502810185019093528083528493830182828015613b2457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b06575b5050505050905060005b8151811015613d88576000828281518110613b4b57613b4b61516f565b60209081029190910101516040516361bfb47160e11b81526001600160a01b038e811660048301529192509082169063c37f68e290602401608060405180830381865afa158015613ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc4919061530b565b60808901526060880152604087015293508315613bf057600f60008097509750975050505050506117b6565b60408051602080820183526001600160a01b0384811660008181526009845285902060010154845260c08a01939093528351808301855260808a0151815260e08a015260048054855163fc57d4df60e01b815291820194909452935192169263fc57d4df92602480830193928290030181865afa158015613c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9991906152a9565b60a08601819052613cb957600d60008097509750975050505050506117b6565b604080516020810190915260a0860151815261010086015260c085015160e0860151613cf391613ce8916146e2565b8661010001516146e2565b610120860181905260408601518651613d0d9291906148e1565b855261010085015160608601516020870151613d2a9291906148e1565b60208601526001600160a01b03818116908c161415613d7557613d578561012001518b87602001516148e1565b60208601819052610100860151613d6f918b906148e1565b60208601525b5080613d80816151b2565b915050613b2e565b50602083015183511115613db95760208301518351600091613da99161519b565b60009550955095505050506117b6565b60008084600001518560200151613dd0919061519b565b9550955095505050506117b6565b6001600160a01b0381166000908152601060209081526040808320601a9092528220549091613e0c42613619565b8354909150600090613e2e9063ffffffff80851691600160e01b9004166135e3565b9050600081118015613e405750600083115b15613f2c576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea991906152a9565b90506000613eb783866141a5565b90506000808311613ed75760405180602001604052806000815250613ee1565b613ee1828461482a565b604080516020810190915288546001600160e01b03168152909150613f0a9061375b9083614865565b6001600160e01b0316600160e01b63ffffffff87160217875550610536915050565b801561053657835463ffffffff8316600160e01b026001600160e01b039091161784555050505050565b6001600160a01b03828116600090815260106020908152604080832080546012845282852095871685529490925290912080546001600160e01b0390931690819055909180158015613fb657506a0c097ce7bc90715b34b9f160241b8210155b15613fcc57506a0c097ce7bc90715b34b9f160241b5b60006040518060200160405280613fe385856135e3565b90526040516370a0823160e01b81526001600160a01b0387811660048301529192506000918816906370a0823190602401602060405180830381865afa158015614031573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061405591906152a9565b9050600061406382846148b8565b6001600160a01b0388166000908152601460205260408120549192509061408a90836135d7565b6001600160a01b0389811660008181526014602090815260409182902085905581518781529081018b90529394509092918c16917f2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a910160405180910390a3505050505050505050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836011811115614129576141296152c2565b83601381111561413b5761413b6152c2565b60408051928352602083019190915260009082015260600160405180910390a1826011811115611585576115856152c2565b6000806000614180846000806000613ab0565b9250925092509193909250565b60008061419a8484614902565b90506112f68161492a565b6000611585828461536f565b60005b600d5481101561424757816001600160a01b0316600d82815481106141db576141db61516f565b6000918252602090912001546001600160a01b031614156142355760405162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08185b1c9958591e48185919195960621b6044820152606401610cdd565b8061423f816151b2565b9150506141b4565b50600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0392909216919091179055565b60006142a542613619565b6001600160a01b03831660009081526010602090815260408083206011909252909120815492935090916001600160e01b03166142fb5781546001600160e01b0319166a0c097ce7bc90715b34b9f160241b1782555b80546001600160e01b03166143295780546001600160e01b0319166a0c097ce7bc90715b34b9f160241b1781555b805463ffffffff909316600160e01b026001600160e01b0393841681179091558154909216909117905550565b6001600160a01b0383166000908152600960205260409020805460ff166143bf5760405162461bcd60e51b815260206004820152601960248201527f636f6d70206d61726b6574206973206e6f74206c6973746564000000000000006044820152606401610cdd565b6001600160a01b0384166000908152601a6020526040902054831461443d576143e784613dde565b6001600160a01b0384166000818152601a602052604090819020859055517fdeafccd0c0b768b2529f7dcbbe58e155d6023059150b7490ed4535cc3744b92d906144349086815260200190565b60405180910390a25b6001600160a01b03841660009081526019602052604090205482146106225760006040518060200160405280866001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144cb91906152a9565b905290506144d985826135ef565b6001600160a01b03851660008181526019602052604090819020859055517f20af8e791cc98f74b2d7a391c80980ca8e5aebf3d4060bf581997b6acae2e537906145269086815260200190565b60405180910390a25050505050565b6001600160a01b03831660009081526009602052604081205460ff1661455c57600961183d565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff1661459457600061183d565b6000806145a48587866000613ab0565b919350909150600090508260118111156145c0576145c06152c2565b146145e0578160118111156145d7576145d76152c2565b92505050611585565b8015612c2c5760046145d7565b6001600160a01b0382166000908152600960205260408120805460ff16614618576009915050611059565b6001600160a01b038316600090815260028201602052604090205460ff1615156001141561464a576000915050611059565b6001600160a01b03838116600081815260028401602090815260408083208054600160ff199091168117909155600883528184208054918201815584529282902090920180546001600160a01b031916948916948517905581519384528301919091527f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5910160405180910390a15060009392505050565b6040805160208101909152600081526040518060200160405280670de0b6b3a7640000614717866000015186600001516141a5565b614721919061538e565b90529392505050565b604080516020810190915260008152604051806020016040528061472161475d8660000151670de0b6b3a76400006141a5565b8551614942565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0846011811115614799576147996152c2565b8460138111156147ab576147ab6152c2565b604080519283526020830191909152810184905260600160405180910390a18360118111156112f6576112f66152c2565b60008164010000000084106148045760405162461bcd60e51b8152600401610cdd91906153b0565b509192915050565b600061158561482384670de0b6b3a76400006141a5565b8351614942565b604080516020810190915260008152604051806020016040528061472161485f866a0c097ce7bc90715b34b9f160241b6141a5565b85614942565b6040805160208101909152600081526040518060200160405280614721856000015185600001516135d7565b600081600160e01b84106148045760405162461bcd60e51b8152600401610cdd91906153b0565b60006a0c097ce7bc90715b34b9f160241b6148d78484600001516141a5565b611585919061538e565b6000806148ee8585614902565b9050611d1e6148fc8261492a565b846135d7565b60408051602081019091526000815260405180602001604052806147218560000151856141a5565b805160009061105990670de0b6b3a76400009061538e565b6000611585828461538e565b60405180610140016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200161499a6040518060200160405280600081525090565b81526020016149b56040518060200160405280600081525090565b81526020016149d06040518060200160405280600081525090565b81526020016149eb6040518060200160405280600081525090565b905290565b60008083601f840112614a0257600080fd5b50813567ffffffffffffffff811115614a1a57600080fd5b6020830191508360208260051b8501011115614a3557600080fd5b9250929050565b60008060008060408587031215614a5257600080fd5b843567ffffffffffffffff80821115614a6a57600080fd5b614a76888389016149f0565b90965094506020870135915080821115614a8f57600080fd5b50614a9c878288016149f0565b95989497509550505050565b6001600160a01b038116811461123d57600080fd5b801515811461123d57600080fd5b60008060408385031215614ade57600080fd5b8235614ae981614aa8565b91506020830135614af981614abd565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614b4357614b43614b04565b604052919050565b600067ffffffffffffffff821115614b6557614b65614b04565b5060051b60200190565b600082601f830112614b8057600080fd5b81356020614b95614b9083614b4b565b614b1a565b82815260059290921b84018101918181019086841115614bb457600080fd5b8286015b84811015614bd8578035614bcb81614aa8565b8352918301918301614bb8565b509695505050505050565b60008060408385031215614bf657600080fd5b8235614c0181614aa8565b9150602083013567ffffffffffffffff811115614c1d57600080fd5b614c2985828601614b6f565b9150509250929050565b600060208284031215614c4557600080fd5b813561158581614aa8565b600080600080600060a08688031215614c6857600080fd5b8535614c7381614aa8565b94506020860135614c8381614aa8565b93506040860135614c9381614aa8565b94979396509394606081013594506080013592915050565b60008060008060808587031215614cc157600080fd5b8435614ccc81614aa8565b93506020850135614cdc81614aa8565b92506040850135614cec81614aa8565b9396929550929360600135925050565b60008060408385031215614d0f57600080fd5b8235614d1a81614aa8565b946020939093013593505050565b600060208284031215614d3a57600080fd5b813561158581614abd565b600060208284031215614d5757600080fd5b5035919050565b60008060008060808587031215614d7457600080fd5b8435614d7f81614aa8565b93506020850135614d8f81614aa8565b93969395505050506040820135916060013590565b60008060008060008060c08789031215614dbd57600080fd5b8635614dc881614aa8565b95506020870135614dd881614aa8565b94506040870135614de881614aa8565b93506060870135614df881614aa8565b9598949750929560808101359460a0909101359350915050565b600080600060608486031215614e2757600080fd5b8335614e3281614aa8565b92506020840135614e4281614aa8565b929592945050506040919091013590565b600080600080600060a08688031215614e6b57600080fd5b8535614e7681614aa8565b94506020860135614e8681614aa8565b93506040860135614e9681614aa8565b92506060860135614ea681614aa8565b949793965091946080013592915050565b600082601f830112614ec857600080fd5b81356020614ed8614b9083614b4b565b82815260059290921b84018101918181019086841115614ef757600080fd5b8286015b84811015614bd8578035614f0e81614aa8565b8352918301918301614efb565b60008060008060808587031215614f3157600080fd5b843567ffffffffffffffff80821115614f4957600080fd5b614f5588838901614eb7565b95506020870135915080821115614f6b57600080fd5b50614f7887828801614b6f565b9350506040850135614f8981614abd565b91506060850135614f9981614abd565b939692955090935050565b60008060408385031215614fb757600080fd5b8235614fc281614aa8565b91506020830135614af981614aa8565b600082601f830112614fe357600080fd5b81356020614ff3614b9083614b4b565b82815260059290921b8401810191818101908684111561501257600080fd5b8286015b84811015614bd85780358352918301918301615016565b60008060006060848603121561504257600080fd5b833567ffffffffffffffff8082111561505a57600080fd5b61506687838801614b6f565b9450602086013591508082111561507c57600080fd5b61508887838801614fd2565b9350604086013591508082111561509e57600080fd5b506150ab86828701614fd2565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156150f65783516001600160a01b0316835292840192918401916001016150d1565b50909695505050505050565b60006020828403121561511457600080fd5b813567ffffffffffffffff81111561512b57600080fd5b6112f684828501614eb7565b6020808252825182820181905260009190848201906040850190845b818110156150f657835183529284019291840191600101615153565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156151ad576151ad615185565b500390565b60006000198214156151c6576151c6615185565b5060010190565b60208082526028908201527f63616e6e6f742070617573652061206d61726b65742074686174206973206e6f6040820152671d081b1a5cdd195960c21b606082015260800190565b60208082526027908201527f6f6e6c7920706175736520677561726469616e20616e642061646d696e2063616040820152666e20706175736560c81b606082015260800190565b6020808252601690820152756f6e6c792061646d696e2063616e20756e706175736560501b604082015260600190565b60006020828403121561529e57600080fd5b815161158581614aa8565b6000602082840312156152bb57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156152ea57600080fd5b815161158581614abd565b634e487b7160e01b600052600160045260246000fd5b6000806000806080858703121561532157600080fd5b505082516020840151604085015160609095015191969095509092509050565b634e487b7160e01b600052603160045260246000fd5b6000821982111561536a5761536a615185565b500190565b600081600019048311821515161561538957615389615185565b500290565b6000826153ab57634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b818110156153dd578581018301518582016040015282016153c1565b818111156153ef576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220e8ebe49b2e7b498ccb9b786dc415308a311b4018cfe83d434e848377b0108e7964736f6c634300080a0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x48A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x731F0C2B GT PUSH2 0x262 JUMPI DUP1 PUSH4 0xB21BE7FD GT PUSH2 0x151 JUMPI DUP1 PUSH4 0xDCE15449 GT PUSH2 0xCE JUMPI DUP1 PUSH4 0xE9AF0292 GT PUSH2 0x92 JUMPI DUP1 PUSH4 0xE9AF0292 EQ PUSH2 0xC04 JUMPI DUP1 PUSH4 0xEABE7D91 EQ PUSH2 0xC17 JUMPI DUP1 PUSH4 0xEDE4EDD0 EQ PUSH2 0xC2A JUMPI DUP1 PUSH4 0xF00A7A92 EQ PUSH2 0xC3D JUMPI DUP1 PUSH4 0xF4A433C0 EQ PUSH2 0xC4A JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0xC6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xDCE15449 EQ PUSH2 0xBAE JUMPI DUP1 PUSH4 0xDCFBC0C7 EQ PUSH2 0xBC1 JUMPI DUP1 PUSH4 0xE4028EEE EQ PUSH2 0xBD4 JUMPI DUP1 PUSH4 0xE6653F3D EQ PUSH2 0xBE7 JUMPI DUP1 PUSH4 0xE8755446 EQ PUSH2 0xBFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC488847B GT PUSH2 0x115 JUMPI DUP1 PUSH4 0xC488847B EQ PUSH2 0xB15 JUMPI DUP1 PUSH4 0xCA0AF043 EQ PUSH2 0xB3D JUMPI DUP1 PUSH4 0xCC7EBDC4 EQ PUSH2 0xB68 JUMPI DUP1 PUSH4 0xD02F7351 EQ PUSH2 0xB88 JUMPI DUP1 PUSH4 0xDA3D454C EQ PUSH2 0xB9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB21BE7FD EQ PUSH2 0xA84 JUMPI DUP1 PUSH4 0xBB82AA5E EQ PUSH2 0xAAF JUMPI DUP1 PUSH4 0xBDCDC258 EQ PUSH2 0xAC2 JUMPI DUP1 PUSH4 0xBEA6B8B8 EQ PUSH2 0xAD5 JUMPI DUP1 PUSH4 0xC2998238 EQ PUSH2 0xAF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x94B2294B GT PUSH2 0x1DF JUMPI DUP1 PUSH4 0xA8B43948 GT PUSH2 0x1A3 JUMPI DUP1 PUSH4 0xA8B43948 EQ PUSH2 0xA2C JUMPI DUP1 PUSH4 0xAA900754 EQ PUSH2 0xA3F JUMPI DUP1 PUSH4 0xABFCEFFC EQ PUSH2 0xA48 JUMPI DUP1 PUSH4 0xAC0B0BB7 EQ PUSH2 0xA68 JUMPI DUP1 PUSH4 0xB0772D0B EQ PUSH2 0xA7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x94B2294B EQ PUSH2 0x9A9 JUMPI DUP1 PUSH4 0x986AB838 EQ PUSH2 0x9B2 JUMPI DUP1 PUSH4 0x9D1B5A0A EQ PUSH2 0x9D2 JUMPI DUP1 PUSH4 0xA76B3FDA EQ PUSH2 0x9EC JUMPI DUP1 PUSH4 0xA7F0E231 EQ PUSH2 0x9FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8C57804E GT PUSH2 0x226 JUMPI DUP1 PUSH4 0x8C57804E EQ PUSH2 0x8B7 JUMPI DUP1 PUSH4 0x8E8F294B EQ PUSH2 0x8EF JUMPI DUP1 PUSH4 0x8EBF6364 EQ PUSH2 0x942 JUMPI DUP1 PUSH4 0x929FE9A1 EQ PUSH2 0x955 JUMPI DUP1 PUSH4 0x94543C15 EQ PUSH2 0x996 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x731F0C2B EQ PUSH2 0x83A JUMPI DUP1 PUSH4 0x741B2525 EQ PUSH2 0x85D JUMPI DUP1 PUSH4 0x7DC0D1D0 EQ PUSH2 0x870 JUMPI DUP1 PUSH4 0x85B7BEB8 EQ PUSH2 0x883 JUMPI DUP1 PUSH4 0x87F76303 EQ PUSH2 0x8A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4A584432 GT PUSH2 0x37E JUMPI DUP1 PUSH4 0x5EC88C79 GT PUSH2 0x2FB JUMPI DUP1 PUSH4 0x6A56947E GT PUSH2 0x2BF JUMPI DUP1 PUSH4 0x6A56947E EQ PUSH2 0x77F JUMPI DUP1 PUSH4 0x6AA875B5 EQ PUSH2 0x78D JUMPI DUP1 PUSH4 0x6B79C38D EQ PUSH2 0x7AD JUMPI DUP1 PUSH4 0x6D154EA5 EQ PUSH2 0x809 JUMPI DUP1 PUSH4 0x6D35BF91 EQ PUSH2 0x82C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5EC88C79 EQ PUSH2 0x720 JUMPI DUP1 PUSH4 0x5F5AF1AA EQ PUSH2 0x733 JUMPI DUP1 PUSH4 0x5FC7E71E EQ PUSH2 0x746 JUMPI DUP1 PUSH4 0x607EF6C1 EQ PUSH2 0x759 JUMPI DUP1 PUSH4 0x6810DFA6 EQ PUSH2 0x76C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x51DFF989 GT PUSH2 0x342 JUMPI DUP1 PUSH4 0x51DFF989 EQ PUSH2 0x6C1 JUMPI DUP1 PUSH4 0x52D84D1E EQ PUSH2 0x6D4 JUMPI DUP1 PUSH4 0x55EE1FE1 EQ PUSH2 0x6E7 JUMPI DUP1 PUSH4 0x598EE1CB EQ PUSH2 0x6FA JUMPI DUP1 PUSH4 0x5C778605 EQ PUSH2 0x70D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4A584432 EQ PUSH2 0x644 JUMPI DUP1 PUSH4 0x4ADA90AF EQ PUSH2 0x664 JUMPI DUP1 PUSH4 0x4E79238F EQ PUSH2 0x66D JUMPI DUP1 PUSH4 0x4EF4C3E1 EQ PUSH2 0x69B JUMPI DUP1 PUSH4 0x4FD42E17 EQ PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x26782247 GT PUSH2 0x40C JUMPI DUP1 PUSH4 0x3BCF7EC1 GT PUSH2 0x3D0 JUMPI DUP1 PUSH4 0x3BCF7EC1 EQ PUSH2 0x5ED JUMPI DUP1 PUSH4 0x3C94786F EQ PUSH2 0x600 JUMPI DUP1 PUSH4 0x41C728B9 EQ PUSH2 0x614 JUMPI DUP1 PUSH4 0x42CBB15C EQ PUSH2 0x628 JUMPI DUP1 PUSH4 0x47EF3B3B EQ PUSH2 0x62E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x26782247 EQ PUSH2 0x58E JUMPI DUP1 PUSH4 0x27EFE3CB EQ PUSH2 0x5A1 JUMPI DUP1 PUSH4 0x2D70DB78 EQ PUSH2 0x5B4 JUMPI DUP1 PUSH4 0x317B0B77 EQ PUSH2 0x5C7 JUMPI DUP1 PUSH4 0x391957D7 EQ PUSH2 0x5DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1D7B33D7 GT PUSH2 0x453 JUMPI DUP1 PUSH4 0x1D7B33D7 EQ PUSH2 0x4FA JUMPI DUP1 PUSH4 0x1EDEDC91 EQ PUSH2 0x528 JUMPI DUP1 PUSH4 0x21AF4569 EQ PUSH2 0x53D JUMPI DUP1 PUSH4 0x24008A62 EQ PUSH2 0x568 JUMPI DUP1 PUSH4 0x24A3D622 EQ PUSH2 0x57B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x7E3DD2 EQ PUSH2 0x48F JUMPI DUP1 PUSH4 0x16B95E8F EQ PUSH2 0x4AC JUMPI DUP1 PUSH4 0x18C882A5 EQ PUSH2 0x4C1 JUMPI DUP1 PUSH4 0x1C3DB2E0 EQ PUSH2 0x4D4 JUMPI DUP1 PUSH4 0x1D504DC6 EQ PUSH2 0x4E7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x497 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4BF PUSH2 0x4BA CALLDATASIZE PUSH1 0x4 PUSH2 0x4A3C JUMP JUMPDEST PUSH2 0xC7D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x497 PUSH2 0x4CF CALLDATASIZE PUSH1 0x4 PUSH2 0x4ACB JUMP JUMPDEST PUSH2 0xF26 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x4E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4BE3 JUMP JUMPDEST PUSH2 0x105F JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x4F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x10C2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x508 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x536 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C50 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x15 SLOAD PUSH2 0x550 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x576 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CAB JUMP JUMPDEST PUSH2 0x1240 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x550 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x550 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x5AF CALLDATASIZE PUSH1 0x4 PUSH2 0x4CFC JUMP JUMPDEST PUSH2 0x12FE JUMP JUMPDEST PUSH2 0x497 PUSH2 0x5C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D28 JUMP JUMPDEST PUSH2 0x13F5 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x5D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D45 JUMP JUMPDEST PUSH2 0x14E5 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x5E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x158C JUMP JUMPDEST PUSH2 0x497 PUSH2 0x5FB CALLDATASIZE PUSH1 0x4 PUSH2 0x4ACB JUMP JUMPDEST PUSH2 0x1656 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x497 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x622 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D5E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST TIMESTAMP PUSH2 0x51A JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x63C CALLDATASIZE PUSH1 0x4 PUSH2 0x4DA4 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x51A PUSH2 0x652 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x680 PUSH2 0x67B CALLDATASIZE PUSH1 0x4 PUSH2 0x4D5E JUMP JUMPDEST PUSH2 0x1780 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x6A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E12 JUMP JUMPDEST PUSH2 0x17C0 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x6BC CALLDATASIZE PUSH1 0x4 PUSH2 0x4D45 JUMP JUMPDEST PUSH2 0x1861 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x6CF CALLDATASIZE PUSH1 0x4 PUSH2 0x4D5E JUMP JUMPDEST PUSH2 0x18BE JUMP JUMPDEST PUSH2 0x550 PUSH2 0x6E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D45 JUMP JUMPDEST PUSH2 0x190D JUMP JUMPDEST PUSH2 0x51A PUSH2 0x6F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x1937 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x708 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CFC JUMP JUMPDEST PUSH2 0x19B0 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x71B CALLDATASIZE PUSH1 0x4 PUSH2 0x4E12 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x680 PUSH2 0x72E CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x1AA4 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x741 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x1ADF JUMP JUMPDEST PUSH2 0x51A PUSH2 0x754 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E53 JUMP JUMPDEST PUSH2 0x1B58 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x767 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A3C JUMP JUMPDEST PUSH2 0x1D27 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x77A CALLDATASIZE PUSH1 0x4 PUSH2 0x4F1B JUMP JUMPDEST PUSH2 0x1F05 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x622 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CAB JUMP JUMPDEST PUSH2 0x51A PUSH2 0x79B CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x7E5 PUSH2 0x7BB CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x497 PUSH2 0x817 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x536 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E53 JUMP JUMPDEST PUSH2 0x497 PUSH2 0x848 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x86B CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x218F JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x550 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x891 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x497 SWAP1 PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x7E5 PUSH2 0x8C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP3 JUMP JUMPDEST PUSH2 0x923 PUSH2 0x8FD CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP3 SWAP2 AND DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 ISZERO ISZERO DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x497 PUSH2 0x950 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D28 JUMP JUMPDEST PUSH2 0x223B JUMP JUMPDEST PUSH2 0x497 PUSH2 0x963 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FA4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP4 ADD SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x497 PUSH2 0x9A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x2322 JUMP JUMPDEST PUSH2 0x51A PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x9C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH20 0xD86C8D4279CCAFBEC840C782BCC50D201F277419 PUSH2 0x550 JUMP JUMPDEST PUSH2 0x51A PUSH2 0x9FA CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x23E1 JUMP JUMPDEST PUSH2 0xA14 PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0xA3A CALLDATASIZE PUSH1 0x4 PUSH2 0x502D JUMP JUMPDEST PUSH2 0x2513 JUMP JUMPDEST PUSH2 0x51A PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH2 0xA5B PUSH2 0xA56 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x2648 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4A3 SWAP2 SWAP1 PUSH2 0x50B5 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x497 SWAP1 PUSH1 0x1 PUSH1 0xB8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xA5B PUSH2 0x26BE JUMP JUMPDEST PUSH2 0x51A PUSH2 0xA92 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FA4 JUMP JUMPDEST PUSH1 0x12 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x550 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xAD0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CAB JUMP JUMPDEST PUSH2 0x2720 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xAE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x18 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xB08 PUSH2 0xB03 CALLDATASIZE PUSH1 0x4 PUSH2 0x5102 JUMP JUMPDEST PUSH2 0x27AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4A3 SWAP2 SWAP1 PUSH2 0x5137 JUMP JUMPDEST PUSH2 0xB28 PUSH2 0xB23 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E12 JUMP JUMPDEST PUSH2 0x2873 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xB4B CALLDATASIZE PUSH1 0x4 PUSH2 0x4FA4 JUMP JUMPDEST PUSH1 0x13 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xB76 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xB96 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E53 JUMP JUMPDEST PUSH2 0x2A91 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xBA9 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E12 JUMP JUMPDEST PUSH2 0x2C38 JUMP JUMPDEST PUSH2 0x550 PUSH2 0xBBC CALLDATASIZE PUSH1 0x4 PUSH2 0x4CFC JUMP JUMPDEST PUSH2 0x3008 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x550 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xBE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CFC JUMP JUMPDEST PUSH2 0x3040 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x497 SWAP1 PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x4BF PUSH2 0xC12 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x31D2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xC25 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E12 JUMP JUMPDEST PUSH2 0x3236 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xC38 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x3271 JUMP JUMPDEST PUSH1 0x1B SLOAD PUSH2 0x497 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x51A PUSH2 0xC58 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x550 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCE6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792061646D696E2063616E2063616C6C20746869732066756E6374696F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1B SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD48 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C72656164792065786563757465642074686973206F6E652D6F6666206675 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x3731BA34B7B7 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCDD JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0xD87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x125B9D985B1A59081A5B9C1D5D PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0xF0E JUMPI DUP9 DUP9 DUP3 DUP2 DUP2 LT PUSH2 0xDAA JUMPI PUSH2 0xDAA PUSH2 0x516F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xDBF SWAP2 SWAP1 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP6 POP SWAP4 POP DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0xDEF JUMPI PUSH2 0xDEF PUSH2 0x516F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP3 POP DUP4 DUP4 GT ISZERO PUSH2 0xE93 JUMPI PUSH1 0x0 PUSH2 0xE0C DUP6 DUP6 PUSH2 0x519B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH2 0xE32 DUP3 DUP5 PUSH2 0x35D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH32 0x17FEA09D9A7CA41B2F9F9118F18F44848A62E9C70D55DD4385131EB2CF1B7E47 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP7 SWAP6 POP POP POP POP JUMPDEST DUP3 ISZERO PUSH2 0xEFE JUMPI PUSH2 0xEA3 DUP5 DUP5 PUSH2 0x35E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP9 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE SWAP3 SWAP5 POP SWAP1 SWAP2 PUSH32 0x4A5C134E28B537A76546993EA37F3B60D9190476DF7356D3842AA40902E20F04 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH2 0xF07 DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP1 POP PUSH2 0xD90 JUMP JUMPDEST POP POP PUSH1 0x1B DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xF5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x51CD JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0xF81 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0xF9D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x5215 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0xFB8 JUMPI POP PUSH1 0x1 DUP3 ISZERO ISZERO EQ JUMPDEST PUSH2 0xFD4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x525C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x60 SWAP2 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x6 SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH6 0x426F72726F77 PUSH1 0xD0 SHL PUSH1 0x80 DUP5 ADD MSTORE SWAP1 DUP3 ADD MSTORE PUSH32 0x71AEC636243F9709BB0007AE15E9AFB8150AB01716D75FD7573BE5CC096E03B0 SWAP1 PUSH1 0xA0 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP DUP1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1095 JUMPI PUSH2 0x1095 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH2 0x71B DUP2 DUP4 PUSH1 0x1 DUP1 PUSH2 0x1F05 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF851A440 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1100 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1124 SWAP2 SWAP1 PUSH2 0x528C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1194 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C7920756E6974726F6C6C65722061646D696E2063616E206368616E6765 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x20627261696E73 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCDD JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC1E80334 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11F8 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST ISZERO PUSH2 0x123D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x18DA185B99D9481B9BDD08185D5D1A1BDC9A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1268 JUMPI POP PUSH1 0x9 PUSH2 0x12F6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAA5AF0FD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12D7 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 MSTORE SWAP1 POP PUSH2 0x12E5 DUP7 DUP3 PUSH2 0x35EF JUMP JUMPDEST PUSH2 0x12F0 DUP7 DUP6 DUP4 PUSH2 0x37E2 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1306 PUSH2 0x3962 JUMP JUMPDEST PUSH2 0x1352 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E206772616E7420636F6D7000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x135E DUP4 DUP4 PUSH2 0x398B JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x13AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E7420636F6D7020666F72206772616E740000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x98B2F82A3A07F223A0BE64B3D0F47711C64DCCD1FEAFB94AA28156B38CD9695C SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x141B JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0x1437 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x5215 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x1452 JUMPI POP PUSH1 0x1 DUP3 ISZERO ISZERO EQ JUMPDEST PUSH2 0x146E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x525C JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD DUP4 ISZERO ISZERO PUSH1 0x1 PUSH1 0xB8 SHL MUL PUSH1 0xFF PUSH1 0xB8 SHL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xEF159D9A32B2472E32B098F954F3CE62D232939F1C207070B584DF1814DE2DE0 SWAP1 PUSH2 0x14D9 SWAP1 DUP5 SWAP1 PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0x5 SWAP1 DUP3 ADD MSTORE PUSH5 0x5365697A65 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1540 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E2073657420636C6F736520666163746F7200 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x3B9670CF975D26958E754B57098EAA2AC914D8D2A31B83257997B9F346110FD9 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x15F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E2073657420626F72726F7720636170206775 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x30B93234B0B7 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x15 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 AND DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH32 0xEDA98690E518E9A05F8EC6837663E188211B2DA8F4906648B323F2C1D4434E29 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x168E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x51CD JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x16B1 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0x16CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x5215 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x16E8 JUMPI POP PUSH1 0x1 DUP3 ISZERO ISZERO EQ JUMPDEST PUSH2 0x1704 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x525C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x60 SWAP2 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x4 SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH4 0x135A5B9D PUSH1 0xE2 SHL PUSH1 0x80 DUP5 ADD MSTORE SWAP1 DUP3 ADD MSTORE PUSH32 0x71AEC636243F9709BB0007AE15E9AFB8150AB01716D75FD7573BE5CC096E03B0 SWAP1 PUSH1 0xA0 ADD PUSH2 0x104E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1795 DUP11 DUP11 DUP11 DUP11 PUSH2 0x3AB0 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP3 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x17AD JUMPI PUSH2 0x17AD PUSH2 0x52C2 JUMP JUMPDEST SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x181A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1B5A5B9D081A5CC81C185D5CD959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1844 JUMPI PUSH1 0x9 JUMPDEST SWAP1 POP PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x184D DUP5 PUSH2 0x3DDE JUMP JUMPDEST PUSH2 0x1857 DUP5 DUP5 PUSH2 0x3F56 JUMP JUMPDEST PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1880 JUMPI PUSH2 0x1059 PUSH1 0x1 PUSH1 0xB PUSH2 0x40F4 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0xAEBA5A6C40A8AC138134BFF1AAA65DEBF25971188A58804BAD717F82F0EC1316 SWAP2 ADD PUSH2 0x157A JUMP JUMPDEST DUP1 ISZERO DUP1 ISZERO PUSH2 0x18CC JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST ISZERO PUSH2 0x622 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x72656465656D546F6B656E73207A65726F PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0xD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x191D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1956 JUMPI PUSH2 0x1059 PUSH1 0x1 PUSH1 0x10 PUSH2 0x40F4 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 AND DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH32 0xD52B2B9B7E9EE655FCB95D2E5B9E0C9F69E7EF2B8E9D2D0EA78402D576D22E22 SWAP2 ADD PUSH2 0x157A JUMP JUMPDEST PUSH2 0x19B8 PUSH2 0x3962 JUMP JUMPDEST PUSH2 0x1A04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E2073657420636F6D70207370656564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH2 0x1A0D DUP3 PUSH2 0x218F JUMP JUMPDEST DUP1 PUSH2 0x1A30 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x18 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x1A4B JUMP JUMPDEST TIMESTAMP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x18 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE MLOAD PUSH32 0x386537FA92EDC3319AF95F1F904DCF1900021E4F3F4E08169A577A09076E66B3 SWAP1 PUSH2 0x1A98 SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1ABB DUP8 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3AB0 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP3 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x1AD3 JUMPI PUSH2 0x1AD3 PUSH2 0x52C2 JUMP JUMPDEST SWAP8 SWAP2 SWAP7 POP SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1AFE JUMPI PUSH2 0x1059 PUSH1 0x1 PUSH1 0x13 PUSH2 0x40F4 JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 AND DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH32 0x613B6EE6A04F0D09F390E4D9318894B9F6AC7FD83897CD8D18896BA579C401E SWAP2 ADD PUSH2 0x157A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO DUP1 PUSH2 0x1B99 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0x1BA8 JUMPI PUSH1 0x9 JUMPDEST SWAP1 POP PUSH2 0x1D1E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95DD9193 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP9 AND SWAP1 PUSH4 0x95DD9193 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BF2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C16 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 POP PUSH2 0x1C21 DUP8 PUSH2 0x2322 JUMP JUMPDEST ISZERO PUSH2 0x1C8C JUMPI DUP3 DUP2 LT ISZERO PUSH2 0x1C87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E206E6F74207265706179206D6F7265207468616E2074686520746F7461 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6C20626F72726F77 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH2 0x1D18 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C98 DUP7 PUSH2 0x416D JUMP JUMPDEST SWAP2 SWAP4 POP SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 POP DUP3 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x1CB4 JUMPI PUSH2 0x1CB4 PUSH2 0x52C2 JUMP JUMPDEST EQ PUSH2 0x1CD5 JUMPI DUP2 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x1CCB JUMPI PUSH2 0x1CCB PUSH2 0x52C2 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x1D1E JUMP JUMPDEST DUP1 PUSH2 0x1CE1 JUMPI PUSH1 0x3 PUSH2 0x1CCB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CFD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 SLOAD DUP2 MSTORE POP DUP6 PUSH2 0x418D JUMP JUMPDEST SWAP1 POP DUP1 DUP7 GT ISZERO PUSH2 0x1D14 JUMPI PUSH1 0x11 SWAP5 POP POP POP POP POP PUSH2 0x1D1E JUMP JUMPDEST POP POP POP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x1D4A JUMPI POP PUSH1 0x15 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0x1DB4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E206F7220626F72726F77206361702067756172646961 PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0x6E2063616E2073657420626F72726F772063617073 PUSH1 0x58 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCDD JUMP JUMPDEST DUP3 DUP2 DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1DC4 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x1E00 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x1A5B9D985B1A59081A5B9C1D5D PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1EFC JUMPI DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x1E1D JUMPI PUSH2 0x1E1D PUSH2 0x516F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x16 PUSH1 0x0 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x1E3A JUMPI PUSH2 0x1E3A PUSH2 0x516F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1E4F SWAP2 SWAP1 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x1E7B JUMPI PUSH2 0x1E7B PUSH2 0x516F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1E90 SWAP2 SWAP1 PUSH2 0x4C33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x6F1951B2AAD10F3FC81B86D91105B413A5B3F847A34BBC5CE1904201B14438F6 DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x1ECC JUMPI PUSH2 0x1ECC PUSH2 0x516F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x40 MLOAD PUSH2 0x1EE2 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH2 0x1EF4 DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1E03 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x20CC JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1F25 JUMPI PUSH2 0x1F25 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND PUSH2 0x1F95 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1B585C9AD95D081B5D5CDD081899481B1A5CDD1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x1 DUP5 ISZERO ISZERO EQ ISZERO PUSH2 0x2062 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAA5AF0FD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FEB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x200F SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 MSTORE SWAP1 POP PUSH2 0x201D DUP3 DUP3 PUSH2 0x35EF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x205F JUMPI PUSH2 0x204D DUP4 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x203F JUMPI PUSH2 0x203F PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH2 0x37E2 JUMP JUMPDEST DUP1 PUSH2 0x2057 DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2020 JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 DUP4 ISZERO ISZERO EQ ISZERO PUSH2 0x20B9 JUMPI PUSH2 0x2076 DUP2 PUSH2 0x3DDE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x20B7 JUMPI PUSH2 0x20A5 DUP3 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2098 JUMPI PUSH2 0x2098 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3F56 JUMP JUMPDEST DUP1 PUSH2 0x20AF DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2079 JUMP JUMPDEST POP JUMPDEST POP DUP1 PUSH2 0x20C4 DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1F08 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x536 JUMPI PUSH2 0x213A DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x20EE JUMPI PUSH2 0x20EE PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x14 PUSH1 0x0 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x210C JUMPI PUSH2 0x210C PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x398B JUMP JUMPDEST PUSH1 0x14 PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2150 JUMPI PUSH2 0x2150 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0x2187 SWAP1 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x20D0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x17 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x18 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD SWAP1 SWAP2 TIMESTAMP SWAP2 PUSH2 0x21C2 SWAP1 DUP4 SWAP1 PUSH2 0x35E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x21D4 JUMPI POP PUSH1 0x0 DUP4 GT JUMPDEST ISZERO PUSH2 0x622 JUMPI PUSH1 0x0 PUSH2 0x21E5 DUP3 DUP6 PUSH2 0x41A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x220C SWAP1 DUP4 PUSH2 0x35D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x18 SWAP1 MSTORE KECCAK256 DUP5 SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x2261 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST PUSH2 0x227D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x5215 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x2298 JUMPI POP PUSH1 0x1 DUP3 ISZERO ISZERO EQ JUMPDEST PUSH2 0x22B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP1 PUSH2 0x525C JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD DUP4 ISZERO ISZERO PUSH1 0x1 PUSH1 0xB0 SHL MUL PUSH1 0xFF PUSH1 0xB0 SHL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xEF159D9A32B2472E32B098F954F3CE62D232939F1C207070B584DF1814DE2DE0 SWAP1 PUSH2 0x14D9 SWAP1 DUP5 SWAP1 PUSH1 0x40 DUP1 DUP3 MSTORE PUSH1 0x8 SWAP1 DUP3 ADD MSTORE PUSH8 0x2A3930B739B332B9 PUSH1 0xC1 SHL PUSH1 0x60 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD ISZERO DUP1 ISZERO PUSH2 0x2368 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ JUMPDEST DUP1 ISZERO PUSH2 0x1059 JUMPI POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x173B9904 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x23AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x23D1 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2400 JUMPI PUSH2 0x1059 PUSH1 0x1 PUSH1 0x12 PUSH2 0x40F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x242D JUMPI PUSH2 0x1059 PUSH1 0xA PUSH1 0x11 PUSH2 0x40F4 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFE9C44AE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x246B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x248F SWAP2 SWAP1 PUSH2 0x52D8 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR DUP4 SSTORE PUSH1 0x3 DUP4 ADD DUP1 SLOAD SWAP1 SWAP3 AND SWAP1 SWAP2 SSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x24D1 DUP4 PUSH2 0x41B1 JUMP JUMPDEST PUSH2 0x24DA DUP4 PUSH2 0x429A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH32 0xCF583BB0C569EB967F806B11601C4CB93C10310485C67ADD5F8362C2F212321F SWAP1 PUSH1 0x20 ADD PUSH2 0x157A JUMP JUMPDEST PUSH2 0x251B PUSH2 0x3962 JUMP JUMPDEST PUSH2 0x2567 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E2073657420636F6D70207370656564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST DUP3 MLOAD DUP3 MLOAD DUP2 EQ DUP1 ISZERO PUSH2 0x2579 JUMPI POP DUP2 MLOAD DUP2 EQ JUMPDEST PUSH2 0x25D7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6D7074726F6C6C65723A3A5F736574436F6D7053706565647320696E7661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1B1A59081A5B9C1D5D PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x536 JUMPI PUSH2 0x2638 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x25F7 JUMPI PUSH2 0x25F7 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2611 JUMPI PUSH2 0x2611 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x262B JUMPI PUSH2 0x262B PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4356 JUMP JUMPDEST PUSH2 0x2641 DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP1 POP PUSH2 0x25DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH1 0x60 SWAP5 SWAP4 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x26B1 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2693 JUMPI JUMPDEST POP SWAP4 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x2716 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x26F8 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x2772 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1D1C985B9CD9995C881A5CC81C185D5CD959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x277F DUP7 DUP7 DUP6 PUSH2 0x4535 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x278E JUMPI SWAP1 POP PUSH2 0x12F6 JUMP JUMPDEST PUSH2 0x2797 DUP7 PUSH2 0x3DDE JUMP JUMPDEST PUSH2 0x27A1 DUP7 DUP7 PUSH2 0x3F56 JUMP JUMPDEST PUSH2 0x12F0 DUP7 DUP6 PUSH2 0x3F56 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27CB JUMPI PUSH2 0x27CB PUSH2 0x4B04 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x27F4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x286B JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2816 JUMPI PUSH2 0x2816 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x282A DUP2 CALLER PUSH2 0x45ED JUMP JUMPDEST PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x283B JUMPI PUSH2 0x283B PUSH2 0x52C2 JUMP JUMPDEST DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x284D JUMPI PUSH2 0x284D PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP DUP1 PUSH2 0x2863 DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x27FA JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xFC57D4DF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 SWAP2 AND SWAP1 PUSH4 0xFC57D4DF SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x28C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x28EA SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xFC57D4DF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 SWAP2 AND SWAP1 PUSH4 0xFC57D4DF SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x293C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2960 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 PUSH2 0x296D JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x2981 JUMPI PUSH1 0xD PUSH1 0x0 SWAP4 POP SWAP4 POP POP POP PUSH2 0x2A89 JUMP JUMPDEST PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x182DF0F5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x29E5 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x29FF PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP4 ADD DUP6 MSTORE SWAP1 DUP2 MSTORE DUP4 MLOAD DUP1 DUP4 ADD DUP6 MSTORE PUSH1 0x6 SLOAD DUP2 MSTORE DUP5 MLOAD SWAP3 DUP4 ADD SWAP1 SWAP5 MSTORE DUP9 DUP3 MSTORE SWAP2 SWAP3 PUSH2 0x2A3B SWAP2 PUSH2 0x46E2 JUMP JUMPDEST SWAP3 POP PUSH2 0x2A63 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE POP PUSH2 0x46E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x2A6F DUP4 DUP4 PUSH2 0x472A JUMP JUMPDEST SWAP1 POP PUSH2 0x2A7B DUP2 DUP12 PUSH2 0x418D JUMP JUMPDEST PUSH1 0x0 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xB8 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x2AE0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1CD95A5E99481A5CC81C185D5CD959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO DUP1 PUSH2 0x2B21 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0x2B2D JUMPI PUSH1 0x9 PUSH2 0x1BA1 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5FE3B567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2B6B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2B8F SWAP2 SWAP1 PUSH2 0x528C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5FE3B567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2BD6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BFA SWAP2 SWAP1 PUSH2 0x528C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2C0F JUMPI PUSH1 0x2 PUSH2 0x1BA1 JUMP JUMPDEST PUSH2 0x2C18 DUP7 PUSH2 0x3DDE JUMP JUMPDEST PUSH2 0x2C22 DUP7 DUP5 PUSH2 0x3F56 JUMP JUMPDEST PUSH2 0x2C2C DUP7 DUP6 PUSH2 0x3F56 JUMP JUMPDEST PUSH1 0x0 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2C94 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x189BDC9C9BDDC81A5CC81C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2CBB JUMPI PUSH1 0x9 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP4 ADD SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2DB8 JUMPI CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EQ PUSH2 0x2D3C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x39B2B73232B91036BAB9BA1031329031AA37B5B2B7 PUSH1 0x59 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D48 CALLER DUP6 PUSH2 0x45ED JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x2D5E JUMPI PUSH2 0x2D5E PUSH2 0x52C2 JUMP JUMPDEST EQ PUSH2 0x2D7D JUMPI DUP1 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x2D75 JUMPI PUSH2 0x2D75 PUSH2 0x52C2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1585 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP4 ADD SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2DB6 JUMPI PUSH2 0x2DB6 PUSH2 0x52F5 JUMP JUMPDEST POP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xFC57D4DF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 AND SWAP1 PUSH4 0xFC57D4DF SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E04 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E28 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST PUSH2 0x2E33 JUMPI PUSH1 0xD PUSH2 0x183D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x2F18 JUMPI PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x47BD3718 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E92 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2EB6 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2EC4 DUP3 DUP7 PUSH2 0x35D7 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT PUSH2 0x2F15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D61726B657420626F72726F7720636170207265616368656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2F28 DUP7 DUP9 PUSH1 0x0 DUP9 PUSH2 0x3AB0 JUMP JUMPDEST SWAP2 SWAP4 POP SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 POP DUP3 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x2F44 JUMPI PUSH2 0x2F44 PUSH2 0x52C2 JUMP JUMPDEST EQ PUSH2 0x2F65 JUMPI DUP2 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x2F5B JUMPI PUSH2 0x2F5B PUSH2 0x52C2 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x1585 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2F72 JUMPI PUSH1 0x4 PUSH2 0x2F5B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAA5AF0FD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2FBD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2FE1 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 MSTORE SWAP1 POP PUSH2 0x2FEF DUP9 DUP3 PUSH2 0x35EF JUMP JUMPDEST PUSH2 0x2FFA DUP9 DUP9 DUP4 PUSH2 0x37E2 JUMP JUMPDEST PUSH1 0x0 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3024 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP DUP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3066 JUMPI PUSH2 0x305F PUSH1 0x1 PUSH1 0x6 PUSH2 0x40F4 JUMP JUMPDEST SWAP1 POP PUSH2 0x1059 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x309B JUMPI PUSH2 0x3093 PUSH1 0x9 PUSH1 0x7 PUSH2 0x40F4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1059 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP4 MSTORE DUP6 DUP3 MSTORE DUP3 MLOAD SWAP1 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH8 0xC7D713B49DA0000 DUP3 MSTORE SWAP1 PUSH2 0x30C9 DUP2 DUP4 MLOAD SWAP1 MLOAD LT SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x30E4 JUMPI PUSH2 0x30DA PUSH1 0x6 PUSH1 0x8 PUSH2 0x40F4 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x1059 JUMP JUMPDEST DUP5 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3160 JUMPI POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xFC57D4DF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 AND SWAP1 PUSH4 0xFC57D4DF SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x313A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x315E SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x3171 JUMPI PUSH2 0x30DA PUSH1 0xD PUSH1 0x9 PUSH2 0x40F4 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD DUP1 SLOAD SWAP1 DUP7 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE PUSH32 0x70483E6592CD5182D45AC970E05BC62CDCC90E9D8EF2C2DBE686CF383BCD7FC5 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x123D DUP2 PUSH1 0xD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x322C JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x320E JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x105F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3244 DUP6 DUP6 DUP6 PUSH2 0x4535 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x3253 JUMPI SWAP1 POP PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x325C DUP6 PUSH2 0x3DDE JUMP JUMPDEST PUSH2 0x3266 DUP6 DUP6 PUSH2 0x3F56 JUMP JUMPDEST PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x61BFB471 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP3 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xC37F68E2 SWAP1 PUSH1 0x24 ADD PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x32C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x32E4 SWAP2 SWAP1 PUSH2 0x530B JUMP JUMPDEST POP SWAP3 POP SWAP3 POP SWAP3 POP DUP3 PUSH1 0x0 EQ PUSH2 0x3349 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x657869744D61726B65743A206765744163636F756E74536E617073686F742066 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x185A5B1959 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCDD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3365 JUMPI PUSH2 0x335B PUSH1 0xC PUSH1 0x2 PUSH2 0x40F4 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3372 DUP8 CALLER DUP6 PUSH2 0x4535 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x3392 JUMPI PUSH2 0x3387 PUSH1 0xE PUSH1 0x3 DUP4 PUSH2 0x4764 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x2 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x33D0 JUMPI PUSH1 0x0 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x8 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x3442 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3424 JUMPI JUMPDEST POP POP DUP4 MLOAD SWAP4 SWAP5 POP DUP4 SWAP3 POP PUSH1 0x0 SWAP2 POP POP JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x34A7 JUMPI DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3476 JUMPI PUSH2 0x3476 PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x3495 JUMPI DUP1 SWAP2 POP PUSH2 0x34A7 JUMP JUMPDEST DUP1 PUSH2 0x349F DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3452 JUMP JUMPDEST POP DUP2 DUP2 LT PUSH2 0x34B7 JUMPI PUSH2 0x34B7 PUSH2 0x52F5 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP2 SWAP1 PUSH2 0x34D6 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x519B JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x34E6 JUMPI PUSH2 0x34E6 PUSH2 0x516F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3516 JUMPI PUSH2 0x3516 PUSH2 0x516F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP1 DUP1 SLOAD DUP1 PUSH2 0x3554 JUMPI PUSH2 0x3554 PUSH2 0x5341 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE ADD SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xE699A64C18B07AC5B7301AA273F36A2287239EB9501D81950672794AFBA29A0D SWAP1 PUSH2 0x35BD SWAP1 DUP13 SWAP1 CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1585 DUP3 DUP5 PUSH2 0x5357 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1585 DUP3 DUP5 PUSH2 0x519B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x19 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x3654 TIMESTAMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x626C6F636B206E756D6265722065786365656473203332206269747300000000 DUP2 MSTORE POP PUSH2 0x47DC JUMP JUMPDEST DUP4 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x3676 SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP6 AND SWAP2 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV AND PUSH2 0x35E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3688 JUMPI POP PUSH1 0x0 DUP4 GT JUMPDEST ISZERO PUSH2 0x37B7 JUMPI PUSH1 0x0 PUSH2 0x36FA DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x47BD3718 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36D0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36F4 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST DUP8 PUSH2 0x480C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3708 DUP4 DUP7 PUSH2 0x41A5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x3728 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x3732 JUMP JUMPDEST PUSH2 0x3732 DUP3 DUP5 PUSH2 0x482A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE DUP9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP2 MSTORE SWAP1 SWAP2 POP PUSH2 0x3795 SWAP1 PUSH2 0x375B SWAP1 DUP4 PUSH2 0x4865 JUMP JUMPDEST MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH32 0x6E657720696E6465782065786365656473203232342062697473000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x4891 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0xE0 SHL PUSH4 0xFFFFFFFF DUP8 AND MUL OR DUP8 SSTORE POP PUSH2 0x63C SWAP2 POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x63C JUMPI DUP4 SLOAD PUSH4 0xFFFFFFFF DUP4 AND PUSH1 0x1 PUSH1 0xE0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP2 AND OR DUP5 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x13 DUP5 MSTORE DUP3 DUP6 KECCAK256 SWAP6 DUP9 AND DUP6 MSTORE SWAP5 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP4 AND SWAP1 DUP2 SWAP1 SSTORE SWAP1 SWAP2 DUP1 ISZERO DUP1 ISZERO PUSH2 0x3842 JUMPI POP PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL DUP3 LT ISZERO JUMPDEST ISZERO PUSH2 0x3858 JUMPI POP PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x386F DUP6 DUP6 PUSH2 0x35E3 JUMP JUMPDEST SWAP1 MSTORE PUSH1 0x40 MLOAD PUSH4 0x95DD9193 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x38C2 SWAP2 SWAP1 DUP11 AND SWAP1 PUSH4 0x95DD9193 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36D0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x38D0 DUP3 DUP5 PUSH2 0x48B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x38F7 SWAP1 DUP4 PUSH2 0x35D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP1 DUP2 ADD DUP12 SWAP1 MSTORE SWAP4 SWAP5 POP SWAP1 SWAP3 SWAP2 DUP14 AND SWAP2 PUSH32 0x1FC3ECC087D8D2D15E23D0032AF5A47059C3892D003D8E139FDCB6BB327C99A6 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x3986 JUMPI POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xD86C8D4279CCAFBEC840C782BCC50D201F277419 PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x39ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3A11 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 GT DUP1 ISZERO PUSH2 0x3A23 JUMPI POP DUP1 DUP5 GT ISZERO JUMPDEST ISZERO PUSH2 0x3AA7 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3A77 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3A9B SWAP2 SWAP1 PUSH2 0x52D8 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x1059 JUMP JUMPDEST POP SWAP2 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3ABD PUSH2 0x494E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE DUP5 SWAP4 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x3B24 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3B06 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x3D88 JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B4B JUMPI PUSH2 0x3B4B PUSH2 0x516F JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x61BFB471 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP3 AND SWAP1 PUSH4 0xC37F68E2 SWAP1 PUSH1 0x24 ADD PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3BA0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3BC4 SWAP2 SWAP1 PUSH2 0x530B JUMP JUMPDEST PUSH1 0x80 DUP10 ADD MSTORE PUSH1 0x60 DUP9 ADD MSTORE PUSH1 0x40 DUP8 ADD MSTORE SWAP4 POP DUP4 ISZERO PUSH2 0x3BF0 JUMPI PUSH1 0xF PUSH1 0x0 DUP1 SWAP8 POP SWAP8 POP SWAP8 POP POP POP POP POP POP PUSH2 0x17B6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 DUP5 MSTORE DUP6 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD DUP5 MSTORE PUSH1 0xC0 DUP11 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 MLOAD DUP1 DUP4 ADD DUP6 MSTORE PUSH1 0x80 DUP11 ADD MLOAD DUP2 MSTORE PUSH1 0xE0 DUP11 ADD MSTORE PUSH1 0x4 DUP1 SLOAD DUP6 MLOAD PUSH4 0xFC57D4DF PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP4 MLOAD SWAP3 AND SWAP3 PUSH4 0xFC57D4DF SWAP3 PUSH1 0x24 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C75 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3C99 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST PUSH1 0xA0 DUP7 ADD DUP2 SWAP1 MSTORE PUSH2 0x3CB9 JUMPI PUSH1 0xD PUSH1 0x0 DUP1 SWAP8 POP SWAP8 POP SWAP8 POP POP POP POP POP POP PUSH2 0x17B6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP7 ADD MLOAD DUP2 MSTORE PUSH2 0x100 DUP7 ADD MSTORE PUSH1 0xC0 DUP6 ADD MLOAD PUSH1 0xE0 DUP7 ADD MLOAD PUSH2 0x3CF3 SWAP2 PUSH2 0x3CE8 SWAP2 PUSH2 0x46E2 JUMP JUMPDEST DUP7 PUSH2 0x100 ADD MLOAD PUSH2 0x46E2 JUMP JUMPDEST PUSH2 0x120 DUP7 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP7 ADD MLOAD DUP7 MLOAD PUSH2 0x3D0D SWAP3 SWAP2 SWAP1 PUSH2 0x48E1 JUMP JUMPDEST DUP6 MSTORE PUSH2 0x100 DUP6 ADD MLOAD PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x20 DUP8 ADD MLOAD PUSH2 0x3D2A SWAP3 SWAP2 SWAP1 PUSH2 0x48E1 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP1 DUP13 AND EQ ISZERO PUSH2 0x3D75 JUMPI PUSH2 0x3D57 DUP6 PUSH2 0x120 ADD MLOAD DUP12 DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x48E1 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 DUP7 ADD MLOAD PUSH2 0x3D6F SWAP2 DUP12 SWAP1 PUSH2 0x48E1 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE JUMPDEST POP DUP1 PUSH2 0x3D80 DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3B2E JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD DUP4 MLOAD GT ISZERO PUSH2 0x3DB9 JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP4 MLOAD PUSH1 0x0 SWAP2 PUSH2 0x3DA9 SWAP2 PUSH2 0x519B JUMP JUMPDEST PUSH1 0x0 SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP PUSH2 0x17B6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x3DD0 SWAP2 SWAP1 PUSH2 0x519B JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP PUSH2 0x17B6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1A SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x3E0C TIMESTAMP PUSH2 0x3619 JUMP JUMPDEST DUP4 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x3E2E SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP6 AND SWAP2 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV AND PUSH2 0x35E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3E40 JUMPI POP PUSH1 0x0 DUP4 GT JUMPDEST ISZERO PUSH2 0x3F2C JUMPI PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3E85 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3EA9 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3EB7 DUP4 DUP7 PUSH2 0x41A5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x3ED7 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x3EE1 JUMP JUMPDEST PUSH2 0x3EE1 DUP3 DUP5 PUSH2 0x482A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE DUP9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP2 MSTORE SWAP1 SWAP2 POP PUSH2 0x3F0A SWAP1 PUSH2 0x375B SWAP1 DUP4 PUSH2 0x4865 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0xE0 SHL PUSH4 0xFFFFFFFF DUP8 AND MUL OR DUP8 SSTORE POP PUSH2 0x536 SWAP2 POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x536 JUMPI DUP4 SLOAD PUSH4 0xFFFFFFFF DUP4 AND PUSH1 0x1 PUSH1 0xE0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP2 AND OR DUP5 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x12 DUP5 MSTORE DUP3 DUP6 KECCAK256 SWAP6 DUP8 AND DUP6 MSTORE SWAP5 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP4 AND SWAP1 DUP2 SWAP1 SSTORE SWAP1 SWAP2 DUP1 ISZERO DUP1 ISZERO PUSH2 0x3FB6 JUMPI POP PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL DUP3 LT ISZERO JUMPDEST ISZERO PUSH2 0x3FCC JUMPI POP PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x3FE3 DUP6 DUP6 PUSH2 0x35E3 JUMP JUMPDEST SWAP1 MSTORE PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 DUP9 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4031 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4055 SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4063 DUP3 DUP5 PUSH2 0x48B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x408A SWAP1 DUP4 PUSH2 0x35D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x14 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP1 DUP2 ADD DUP12 SWAP1 MSTORE SWAP4 SWAP5 POP SWAP1 SWAP3 SWAP2 DUP13 AND SWAP2 PUSH32 0x2CAECD17D02F56FA897705DCC740DA2D237C373F70686F4E0D9BD3BF0400EA7A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x45B96FE442630264581B197E84BBADA861235052C5A1AADFFF9EA4E40A969AA0 DUP4 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x4129 JUMPI PUSH2 0x4129 PUSH2 0x52C2 JUMP JUMPDEST DUP4 PUSH1 0x13 DUP2 GT ISZERO PUSH2 0x413B JUMPI PUSH2 0x413B PUSH2 0x52C2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP3 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x1585 JUMPI PUSH2 0x1585 PUSH2 0x52C2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4180 DUP5 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3AB0 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x419A DUP5 DUP5 PUSH2 0x4902 JUMP JUMPDEST SWAP1 POP PUSH2 0x12F6 DUP2 PUSH2 0x492A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1585 DUP3 DUP5 PUSH2 0x536F JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xD SLOAD DUP2 LT ISZERO PUSH2 0x4247 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x41DB JUMPI PUSH2 0x41DB PUSH2 0x516F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x4235 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x1B585C9AD95D08185B1C9958591E481859191959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST DUP1 PUSH2 0x423F DUP2 PUSH2 0x51B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x41B4 JUMP JUMPDEST POP PUSH1 0xD DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42A5 TIMESTAMP PUSH2 0x3619 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x11 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP2 SLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x42FB JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL OR DUP3 SSTORE JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x4329 JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL OR DUP2 SSTORE JUMPDEST DUP1 SLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0xE0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP4 DUP5 AND DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SLOAD SWAP1 SWAP3 AND SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x43BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636F6D70206D61726B6574206973206E6F74206C697374656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 EQ PUSH2 0x443D JUMPI PUSH2 0x43E7 DUP5 PUSH2 0x3DDE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE MLOAD PUSH32 0xDEAFCCD0C0B768B2529F7DCBBE58E155D6023059150B7490ED4535CC3744B92D SWAP1 PUSH2 0x4434 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 EQ PUSH2 0x622 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAA5AF0FD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x44A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x44CB SWAP2 SWAP1 PUSH2 0x52A9 JUMP JUMPDEST SWAP1 MSTORE SWAP1 POP PUSH2 0x44D9 DUP6 DUP3 PUSH2 0x35EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE MLOAD PUSH32 0x20AF8E791CC98F74B2D7A391C80980CA8E5AEBF3D4060BF581997B6ACAE2E537 SWAP1 PUSH2 0x4526 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x455C JUMPI PUSH1 0x9 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP4 ADD SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x4594 JUMPI PUSH1 0x0 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x45A4 DUP6 DUP8 DUP7 PUSH1 0x0 PUSH2 0x3AB0 JUMP JUMPDEST SWAP2 SWAP4 POP SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 POP DUP3 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x45C0 JUMPI PUSH2 0x45C0 PUSH2 0x52C2 JUMP JUMPDEST EQ PUSH2 0x45E0 JUMPI DUP2 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x45D7 JUMPI PUSH2 0x45D7 PUSH2 0x52C2 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1585 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2C2C JUMPI PUSH1 0x4 PUSH2 0x45D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x4618 JUMPI PUSH1 0x9 SWAP2 POP POP PUSH2 0x1059 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0x464A JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1059 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x8 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE DUP5 MSTORE SWAP3 DUP3 SWAP1 KECCAK256 SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP5 DUP10 AND SWAP5 DUP6 OR SWAP1 SSTORE DUP2 MLOAD SWAP4 DUP5 MSTORE DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x3AB23AB0D51CCCC0C3085AEC51F99228625AA1A922B3A8CA89A26B0F2027A1A5 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH8 0xDE0B6B3A7640000 PUSH2 0x4717 DUP7 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x41A5 JUMP JUMPDEST PUSH2 0x4721 SWAP2 SWAP1 PUSH2 0x538E JUMP JUMPDEST SWAP1 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x4721 PUSH2 0x475D DUP7 PUSH1 0x0 ADD MLOAD PUSH8 0xDE0B6B3A7640000 PUSH2 0x41A5 JUMP JUMPDEST DUP6 MLOAD PUSH2 0x4942 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x45B96FE442630264581B197E84BBADA861235052C5A1AADFFF9EA4E40A969AA0 DUP5 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x4799 JUMPI PUSH2 0x4799 PUSH2 0x52C2 JUMP JUMPDEST DUP5 PUSH1 0x13 DUP2 GT ISZERO PUSH2 0x47AB JUMPI PUSH2 0x47AB PUSH2 0x52C2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP4 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x12F6 JUMPI PUSH2 0x12F6 PUSH2 0x52C2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH5 0x100000000 DUP5 LT PUSH2 0x4804 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP2 SWAP1 PUSH2 0x53B0 JUMP JUMPDEST POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1585 PUSH2 0x4823 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0x41A5 JUMP JUMPDEST DUP4 MLOAD PUSH2 0x4942 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x4721 PUSH2 0x485F DUP7 PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL PUSH2 0x41A5 JUMP JUMPDEST DUP6 PUSH2 0x4942 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x4721 DUP6 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x35D7 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0xE0 SHL DUP5 LT PUSH2 0x4804 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCDD SWAP2 SWAP1 PUSH2 0x53B0 JUMP JUMPDEST PUSH1 0x0 PUSH11 0xC097CE7BC90715B34B9F1 PUSH1 0x24 SHL PUSH2 0x48D7 DUP5 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x41A5 JUMP JUMPDEST PUSH2 0x1585 SWAP2 SWAP1 PUSH2 0x538E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48EE DUP6 DUP6 PUSH2 0x4902 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D1E PUSH2 0x48FC DUP3 PUSH2 0x492A JUMP JUMPDEST DUP5 PUSH2 0x35D7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x4721 DUP6 PUSH1 0x0 ADD MLOAD DUP6 PUSH2 0x41A5 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x1059 SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x538E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1585 DUP3 DUP5 PUSH2 0x538E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x499A PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x49B5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x49D0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x49EB PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4A02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4A1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x4A35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4A52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4A6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4A76 DUP9 DUP4 DUP10 ADD PUSH2 0x49F0 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4A8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A9C DUP8 DUP3 DUP9 ADD PUSH2 0x49F0 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x123D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x123D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4ADE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4AE9 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4AF9 DUP2 PUSH2 0x4ABD JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x4B43 JUMPI PUSH2 0x4B43 PUSH2 0x4B04 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4B65 JUMPI PUSH2 0x4B65 PUSH2 0x4B04 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4B80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x4B95 PUSH2 0x4B90 DUP4 PUSH2 0x4B4B JUMP JUMPDEST PUSH2 0x4B1A JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x4BB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x4BD8 JUMPI DUP1 CALLDATALOAD PUSH2 0x4BCB DUP2 PUSH2 0x4AA8 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x4BB8 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4BF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4C01 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4C1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C29 DUP6 DUP3 DUP7 ADD PUSH2 0x4B6F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4C45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1585 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4C68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4C73 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4C83 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x4C93 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4CC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x4CCC DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x4CDC DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x4CEC DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4D0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4D1A DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4D3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1585 DUP2 PUSH2 0x4ABD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4D57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4D74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x4D7F DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x4D8F DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4DBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x4DC8 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x4DD8 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x4DE8 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH2 0x4DF8 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP5 PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4E27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x4E32 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x4E42 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4E6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4E76 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4E86 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x4E96 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x4EA6 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4EC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x4ED8 PUSH2 0x4B90 DUP4 PUSH2 0x4B4B JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x4EF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x4BD8 JUMPI DUP1 CALLDATALOAD PUSH2 0x4F0E DUP2 PUSH2 0x4AA8 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x4EFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4F31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4F49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4F55 DUP9 DUP4 DUP10 ADD PUSH2 0x4EB7 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4F6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F78 DUP8 DUP3 DUP9 ADD PUSH2 0x4B6F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x4F89 DUP2 PUSH2 0x4ABD JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x4F99 DUP2 PUSH2 0x4ABD JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4FB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4FC2 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4AF9 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4FE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x4FF3 PUSH2 0x4B90 DUP4 PUSH2 0x4B4B JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x5012 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x4BD8 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x5016 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5042 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x505A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5066 DUP8 DUP4 DUP9 ADD PUSH2 0x4B6F JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x507C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5088 DUP8 DUP4 DUP9 ADD PUSH2 0x4FD2 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x509E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x50AB DUP7 DUP3 DUP8 ADD PUSH2 0x4FD2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x50F6 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x50D1 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5114 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x512B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12F6 DUP5 DUP3 DUP6 ADD PUSH2 0x4EB7 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x50F6 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5153 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x51AD JUMPI PUSH2 0x51AD PUSH2 0x5185 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x51C6 JUMPI PUSH2 0x51C6 PUSH2 0x5185 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742070617573652061206D61726B65742074686174206973206E6F PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x1D081B1A5CDD1959 PUSH1 0xC2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x6F6E6C7920706175736520677561726469616E20616E642061646D696E206361 PUSH1 0x40 DUP3 ADD MSTORE PUSH7 0x6E207061757365 PUSH1 0xC8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x6F6E6C792061646D696E2063616E20756E7061757365 PUSH1 0x50 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x529E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1585 DUP2 PUSH2 0x4AA8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1585 DUP2 PUSH2 0x4ABD JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x5321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x536A JUMPI PUSH2 0x536A PUSH2 0x5185 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x5389 JUMPI PUSH2 0x5389 PUSH2 0x5185 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x53AB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x53DD JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x53C1 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x53EF JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 0xEB 0xE4 SWAP12 0x2E PUSH28 0x498CCB9B786DC415308A311B4018CFE83D434E848377B0108E796473 PUSH16 0x6C634300080A00330000000000000000 ",
          "sourceMapi;:::-;;:::i;:::-;;47752:569;;;;;;:::i;:::-;;:::i;61971:205::-;;;;;;:::i;:::-;;:::i;49140:299::-;;;;;;:::i;:::-;;:::i;3246:45:4:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;4611:25:13;;;4599:2;4584:18;3246:45:4;4465:177:13;19173:461:2;;;;;;:::i;:::-;;;;;;;4264:32:4;;;;;-1:-1:-1;;;;;4264:32:4;;;;;;-1:-1:-1;;;;;5507:32:13;;;5489:51;;5477:2;5462:18;4264:32:4;5343:203:13;18215:645:2;;;;;;:::i;:::-;;:::i;2423:28:4:-;;;;;-1:-1:-1;;;;;2423:28:4;;;318:27;;;;;-1:-1:-1;;;;;318:27:4;;;64816:315:2;;;;;;:::i;:::-;;:::i;48738:396::-;;;;;;:::i;:::-;;:::i;37958:443::-;;;;;;:::i;:::-;;:::i;45714:546::-;;;;;;:::i;:::-;;:::i;47183:563::-;;;;;;:::i;:::-;;:::i;2457:31:4:-;;;;;-1:-1:-1;;;2457:31:4;;;;;;11377:404:2;;;;;;:::i;:::-;;;;;;67704:103;67785:15;67704:103;;22207:547;;;;;;:::i;:::-;;;;;;;;4440:45:4;;;;;;:::i;:::-;;;;;;;;;;;;;;1003:43;;;;;;29769:554:2;;;;;;:::i;:::-;;:::i;:::-;;;;8531:25:13;;;8587:2;8572:18;;8565:34;;;;8615:18;;;8608:34;8519:2;8504:18;29769:554:2;8329:319:13;10424:630:2;;;;;;:::i;:::-;;:::i;41086:860::-;;;;;;:::i;:::-;;:::i;14079:393::-;;;;;;:::i;:::-;;:::i;3032:26:4:-;;;;;;:::i;:::-;;:::i;37067:636:2:-;;;;;;:::i;:::-;;:::i;66256:656::-;;;;;;:::i;:::-;;:::i;17374:354::-;;;;;;:::i;:::-;62038:138;61971:205;;;28132:429;;;;;;:::i;:::-;;:::i;46491:686::-;;;;;;:::i;:::-;;:::i;20078:1665::-;;;;;;:::i;:::-;;:::i;44853:697::-;;;;;;:::i;:::-;;:::i;62510:1267::-;;;;;;:::i;:::-;;:::i;26758:384::-;;;;;;:::i;5155:51:4:-;;;;;;:::i;:::-;;;;;;;;;;;;;;3359:58;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;3359:58:4;;;-1:-1:-1;;;3359:58:4;;;;;;;;;;-1:-1:-1;;;;;13039:32:13;;;13021:51;;13120:10;13108:23;;;13103:2;13088:18;;13081:51;12994:18;3359:58:4;12849:289:13;2666:52:4;;;;;;:::i;:::-;;;;;;;;;;;;;;;;24701:475:2;;;;;;:::i;2610:50:4:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;60855:672:2;;;;;;:::i;:::-;;:::i;711:25:4:-;;;;;-1:-1:-1;;;;;711:25:4;;;5526:49;;;;;;:::i;:::-;;;;;;;;;;;;;;2533:34;;;;;-1:-1:-1;;;2533:34:4;;;;;;3485:58;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;3485:58:4;;;-1:-1:-1;;;3485:58:4;;;;;;2112:41;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13586:14:13;;13579:22;13561:41;;13633:2;13618:18;;13611:34;;;;13688:14;13681:22;13661:18;;;13654:50;13549:2;13534:18;2112:41:4;13371:339:13;48327:405:2;;;;;;:::i;:::-;;:::i;5023:183::-;;;;;;:::i;:::-;-1:-1:-1;;;;;5148:24:2;;;5125:4;5148:24;;;:7;:24;;;;;;;;:51;;;;;:42;;;;:51;;;;;;5023:183;;;;;67429:269;;;;;;:::i;:::-;;:::i;1171:24:4:-;;;;;;4627:56;;;;;;:::i;:::-;;;;;;;;;;;;;;67916:130:2;67997:42;67916:130;;42260:984;;;;;;:::i;:::-;;:::i;3818:47::-;;-1:-1:-1;;;3818:47:2;;;;;-1:-1:-1;;;;;14578:32:13;;;14560:51;;14548:2;14533:18;3818:47:2;14414:203:13;65459:596:2;;;;;;:::i;:::-;;:::i;3140:23:4:-;;;;;;4570:184:2;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2573:31:4:-;;;;;-1:-1:-1;;;2573:31:4;;;;;;67096:97:2;;;:::i;3660:72:4:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;411:40;;;;;-1:-1:-1;;;;;411:40:4;;;25633:809:2;;;;;;:::i;:::-;;:::i;4775:55:4:-;;;;;;:::i;:::-;;;;;;;;;;;;;;5465:409:2;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;35097:1718::-;;;;;;:::i;:::-;;:::i;:::-;;;;18397:25:13;;;18453:2;18438:18;;18431:34;;;;18370:18;35097:1718:2;18223:248:13;3849:72:4;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;3998:46;;;;;;:::i;:::-;;;;;;;;;;;;;;23207:1043:2;;;;;;:::i;:::-;;:::i;14904:2171::-;;;;;;:::i;:::-;;:::i;1297:49:4:-;;;;;;:::i;:::-;;:::i;518:47::-;;;;;-1:-1:-1;;;;;518:47:4;;;38760:2038:2;;;;;;:::i;:::-;;:::i;2494:33:4:-;;;;;-1:-1:-1;;;2494:33:4;;;;;;853:34;;;;;;61667:95:2;;;;;;:::i;:::-;;:::i;12223:488::-;;;;;;:::i;:::-;;:::i;7552:2404::-;;;;;;:::i;:::-;;:::i;5385:33:4:-;;;;;;;;;4996:51;;;;;;:::i;:::-;;;;;;;;;;;;;;220:20;;;;;-1:-1:-1;;;;;220:20:4;;;49512:2251:2;49661:5;;-1:-1:-1;;;;;49661:5:2;49647:10;:19;49639:65;;;;-1:-1:-1;;;49639:65:2;;19021:2:13;49639:65:2;;;19003:21:13;19060:2;19040:18;;;19033:30;19099:34;19079:18;;;19072:62;-1:-1:-1;;;19150:18:13;;;19143:31;19191:19;;49639:65:2;;;;;;;;;49780:21;;;;49779:22;49758:107;;;;-1:-1:-1;;;49758:107:2;;19423:2:13;49758:107:2;;;19405:21:13;19462:2;19442:18;;;19435:30;19501:34;19481:18;;;19474:62;-1:-1:-1;;;19552:18:13;;;19545:36;19598:19;;49758:107:2;19221:402:13;49758:107:2;49933:38;;;49925:64;;;;-1:-1:-1;;;49925:64:2;;19830:2:13;49925:64:2;;;19812:21:13;19869:2;19849:18;;;19842:30;-1:-1:-1;;;19888:18:13;;;19881:43;19941:18;;49925:64:2;19628:337:13;49925:64:2;50026:12;50048:22;50080:24;50114:18;50194:9;50189:1472;50209:24;;;50189:1472;;;50261:13;;50275:1;50261:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;50308:17:2;;;;;;:11;:17;;;;;;50254:23;;-1:-1:-1;50308:17:2;-1:-1:-1;50359:7:2;;50367:1;50359:10;;;;;;;:::i;:::-;;;;;;;50340:29;;50594:14;50575:16;:33;50571:648;;;50689:25;50717:33;50736:14;50717:16;:33;:::i;:::-;-1:-1:-1;;;;;50851:20:2;;50827:21;50851:20;;;:14;:20;;;;;;50689:61;;-1:-1:-1;50913:38:2;50851:20;50689:61;50913:4;:38::i;:::-;-1:-1:-1;;;;;51035:20:2;;;;;;:14;:20;;;;;;;;;:36;;;51095:57;;18397:25:13;;;18438:18;;;18431:34;;;51035:36:2;;-1:-1:-1;51035:20:2;;51095:57;;18370:18:13;51095:57:2;;;;;;;51190:14;51171:33;;50610:609;;;50571:648;51237:20;;51233:418;;51463:96;51489:14;51525:16;51463:4;:96::i;:::-;-1:-1:-1;;;;;51430:17:2;;;;;;:11;:17;;;;;;;;;:129;;;51583:53;;18397:25:13;;;18438:18;;;18431:34;;;51430:129:2;;-1:-1:-1;51430:17:2;;51583:53;;18370:18:13;51583:53:2;;;;;;;51233:418;50235:3;;;:::i;:::-;;;50189:1472;;;-1:-1:-1;;51671:21:2;:28;;-1:-1:-1;;51671:28:2;51695:4;51671:28;;;-1:-1:-1;;;;;;;49512:2251:2:o;47752:569::-;-1:-1:-1;;;;;47858:24:2;;47821:4;47858:24;;;:7;:24;;;;;:33;;;47837:120;;;;-1:-1:-1;;;47837:120:2;;;;;;;:::i;:::-;48002:13;;-1:-1:-1;;;;;48002:13:2;47988:10;:27;;:50;;-1:-1:-1;48033:5:2;;-1:-1:-1;;;;;48033:5:2;48019:10;:19;47988:50;47967:136;;;;-1:-1:-1;;;47967:136:2;;;;;;;:::i;:::-;48135:5;;-1:-1:-1;;;;;48135:5:2;48121:10;:19;;:36;;-1:-1:-1;48153:4:2;48144:13;;;;48121:36;48113:71;;;;-1:-1:-1;;;48113:71:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;48195:37:2;;;;;;:20;:37;;;;;;;;;:45;;-1:-1:-1;;48195:45:2;;;;;;;;;;48255:37;;21921:51:13;;;22008:2;21988:18;;;21981:30;;;22047:1;22027:18;;;22020:29;;;;-1:-1:-1;;;22080:3:13;22065:19;;22058:37;22147:18;;;22140:50;48255:37:2;;21959:3:13;22112:19;48255:37:2;;;;;;;;-1:-1:-1;48309:5:2;47752:569;;;;;:::o;61971:205::-;62075:16;;;62089:1;62075:16;;;;;;;;;62048:24;;62075:16;;;;;;;;;;;-1:-1:-1;62075:16:2;62048:43;;62114:6;62101:7;62109:1;62101:10;;;;;;;;:::i;:::-;;;;;;:19;-1:-1:-1;;;;;62101:19:2;;;-1:-1:-1;;;;;62101:19:2;;;;;62130:39;62140:7;62149;62158:4;62164;62130:9;:39::i;49140:299::-;49232:10;-1:-1:-1;;;;;49232:16:2;;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;49218:32:2;:10;-1:-1:-1;;;;;49218:32:2;;49197:118;;;;-1:-1:-1;;;49197:118:2;;22667:2:13;49197:118:2;;;22649:21:13;22706:2;22686:18;;;22679:30;22745:34;22725:18;;;22718:62;-1:-1:-1;;;22796:18:13;;;22789:37;22843:19;;49197:118:2;22465:403:13;49197:118:2;49346:10;-1:-1:-1;;;;;49346:32:2;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:39;49325:107;;;;-1:-1:-1;;;49325:107:2;;23264:2:13;49325:107:2;;;23246:21:13;23303:2;23283:18;;;23276:30;-1:-1:-1;;;23322:18:13;;;23315:51;23383:18;;49325:107:2;23062:345:13;49325:107:2;49140:299;:::o;18215:645::-;-1:-1:-1;;;;;18491:15:2;;18378:7;18491:15;;;:7;:15;;;;;:24;;;18486:95;;-1:-1:-1;18546:23:2;18531:39;;18486:95;18627:22;18652:45;;;;;;;;18674:6;-1:-1:-1;;;;;18667:26:2;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18652:45;;18627:70;-1:-1:-1;18707:42:2;18729:6;18627:70;18707:21;:42::i;:::-;18759:53;18782:6;18790:8;18800:11;18759:22;:53::i;:::-;18838:14;18823:30;;;18215:645;;;;;;;:::o;64816:315::-;64896:21;:19;:21::i;:::-;64888:59;;;;-1:-1:-1;;;64888:59:2;;23746:2:13;64888:59:2;;;23728:21:13;23785:2;23765:18;;;23758:30;23824:27;23804:18;;;23797:55;23869:18;;64888:59:2;23544:349:13;64888:59:2;64957:18;64978:36;64996:9;65007:6;64978:17;:36::i;:::-;64957:57;-1:-1:-1;65032:15:2;;65024:55;;;;-1:-1:-1;;;65024:55:2;;24100:2:13;65024:55:2;;;24082:21:13;24139:2;24119:18;;;24112:30;24178:29;24158:18;;;24151:57;24225:18;;65024:55:2;23898:351:13;65024:55:2;65094:30;;;-1:-1:-1;;;;;24446:32:13;;24428:51;;24510:2;24495:18;;24488:34;;;65094:30:2;;24401:18:13;65094:30:2;;;;;;;64878:253;64816:315;;:::o;48738:396::-;48842:13;;48791:4;;-1:-1:-1;;;;;48842:13:2;48828:10;:27;;:50;;-1:-1:-1;48873:5:2;;-1:-1:-1;;;;;48873:5:2;48859:10;:19;48828:50;48807:136;;;;-1:-1:-1;;;48807:136:2;;;;;;;:::i;:::-;48975:5;;-1:-1:-1;;;;;48975:5:2;48961:10;:19;;:36;;-1:-1:-1;48993:4:2;48984:13;;;;48961:36;48953:71;;;;-1:-1:-1;;;48953:71:2;;;;;;;:::i;:::-;49035:19;:27;;;;;-1:-1:-1;;;49035:27:2;-1:-1:-1;;;;49035:27:2;;;;;;49077:28;;;;;;49057:5;;24757:2:13;24739:21;;;24796:1;24776:18;;;24769:29;-1:-1:-1;;;24829:2:13;24814:18;;24807:35;24923:14;;24916:22;24909:4;24894:20;;24887:52;24874:3;24859:19;;24533:412;49077:28:2;;;;;;;;-1:-1:-1;49122:5:2;48738:396::o;37958:443::-;38047:7;38121:5;;-1:-1:-1;;;;;38121:5:2;38107:10;:19;38099:63;;;;-1:-1:-1;;;38099:63:2;;25152:2:13;38099:63:2;;;25134:21:13;25191:2;25171:18;;;25164:30;25230:33;25210:18;;;25203:61;25281:18;;38099:63:2;24950:355:13;38099:63:2;38206:19;;;38235:44;;;;38294:59;;;18397:25:13;;;18453:2;18438:18;;18431:34;;;38294:59:2;;18370:18:13;38294:59:2;;;;;;;;38379:14;38371:23;38364:30;37958:443;-1:-1:-1;;;37958:443:2:o;45714:546::-;45816:5;;-1:-1:-1;;;;;45816:5:2;45802:10;:19;45794:70;;;;-1:-1:-1;;;45794:70:2;;25512:2:13;45794:70:2;;;25494:21:13;25551:2;25531:18;;;25524:30;25590:34;25570:18;;;25563:62;-1:-1:-1;;;25641:18:13;;;25634:36;25687:19;;45794:70:2;25310:402:13;45794:70:2;45957:17;;;-1:-1:-1;;;;;46052:40:2;;;-1:-1:-1;;;;;;46052:40:2;;;;;;;46189:64;;;45957:17;;;;25929:34:13;;;25994:2;25979:18;;25972:43;;;;46189:64:2;;25864:18:13;46189:64:2;;;;;;;45784:476;45714:546;:::o;47183:563::-;-1:-1:-1;;;;;47287:24:2;;47250:4;47287:24;;;:7;:24;;;;;:33;;;47266:120;;;;-1:-1:-1;;;47266:120:2;;;;;;;:::i;:::-;47431:13;;-1:-1:-1;;;;;47431:13:2;47417:10;:27;;:50;;-1:-1:-1;47462:5:2;;-1:-1:-1;;;;;47462:5:2;47448:10;:19;47417:50;47396:136;;;;-1:-1:-1;;;47396:136:2;;;;;;;:::i;:::-;47564:5;;-1:-1:-1;;;;;47564:5:2;47550:10;:19;;:36;;-1:-1:-1;47582:4:2;47573:13;;;;47550:36;47542:71;;;;-1:-1:-1;;;47542:71:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;47624:35:2;;;;;;:18;:35;;;;;;;;;:43;;-1:-1:-1;;47624:43:2;;;;;;;;;;47682:35;;26275:51:13;;;26362:2;26342:18;;;26335:30;;;26401:1;26381:18;;;26374:29;;;;-1:-1:-1;;;26434:3:13;26419:19;;26412:35;26499:18;;;26492:50;47682:35:2;;26313:3:13;26464:19;47682:35:2;26026:522:13;29769:554:2;29952:7;29961;29970;30003:9;30026:17;30057;30087:176;30144:7;30176:12;30207;30237;30087:39;:176::i;:::-;29989:274;;;;;;30289:3;30281:12;;;;;;;;:::i;:::-;30273:43;-1:-1:-1;30295:9:2;;-1:-1:-1;30306:9:2;-1:-1:-1;;29769:554:2;;;;;;;;;:::o;10424:630::-;-1:-1:-1;;;;;10661:26:2;;10554:7;10661:26;;;:18;:26;;;;;;;;10660:27;10652:54;;;;-1:-1:-1;;;10652:54:2;;26755:2:13;10652:54:2;;;26737:21:13;26794:2;26774:18;;;26767:30;-1:-1:-1;;;26813:18:13;;;26806:44;26867:18;;10652:54:2;26553:338:13;10652:54:2;-1:-1:-1;;;;;10793:15:2;;;;;;:7;:15;;;;;:24;;;10788:95;;10848:23;10840:32;10833:39;;;;10788:95;10929:29;10951:6;10929:21;:29::i;:::-;10968:38;10991:6;10999;10968:22;:38::i;:::-;11032:14;11017:30;10424:630;-1:-1:-1;;;;10424:630:2:o;41086:860::-;41193:7;41263:5;;-1:-1:-1;;;;;41263:5:2;41249:10;:19;41245:206;;41307:133;41333:18;41373:49;41307:4;:133::i;41245:206::-;41548:28;;;41641:62;;;;41775:123;;;18397:25:13;;;18453:2;18438:18;;18431:34;;;41775:123:2;;18370:18:13;41775:123:2;18223:248:13;14079:393:2;14375:17;;:37;;;;;14411:1;14396:12;:16;14375:37;14371:95;;;14428:27;;-1:-1:-1;;;14428:27:2;;27098:2:13;14428:27:2;;;27080:21:13;27137:2;27117:18;;;27110:30;-1:-1:-1;;;27156:18:13;;;27149:47;27213:18;;14428:27:2;26896:341:13;3032:26:4;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3032:26:4;;-1:-1:-1;3032:26:4;:::o;37067:636:2:-;37131:7;37201:5;;-1:-1:-1;;;;;37201:5:2;37187:10;:19;37183:197;;37245:124;37271:18;37311:40;37245:4;:124::i;37183:197::-;37466:6;;;-1:-1:-1;;;;;37532:18:2;;;-1:-1:-1;;;;;;37532:18:2;;;;;;;37619:36;;;37466:6;;;;25929:34:13;;;25994:2;25979:18;;25972:43;;;;37619:36:2;;25864:18:13;37619:36:2;25717:304:13;66256:656:2;66377:21;:19;:21::i;:::-;66369:63;;;;-1:-1:-1;;;66369:63:2;;27793:2:13;66369:63:2;;;27775:21:13;27832:2;27812:18;;;27805:30;27871:31;27851:18;;;27844:59;27920:18;;66369:63:2;27591:353:13;66369:63:2;66537:37;66562:11;66537:24;:37::i;:::-;66588:14;66584:199;;-1:-1:-1;;;;;66656:33:2;;;;;;:20;:33;;;;;66649:40;66584:199;;;67785:15;-1:-1:-1;;;;;66720:33:2;;;;;;:20;:33;;;;;:52;66584:199;-1:-1:-1;;;;;66792:34:2;;;;;;:21;:34;;;;;;;:46;;;66854:51;;;;;66829:9;4611:25:13;;4599:2;4584:18;;4465:177;66854:51:2;;;;;;;;66256:656;;:::o;28132:429::-;28213:7;28222;28231;28264:9;28287:17;28318;28348:152;28405:7;28445:1;28466;28485;28348:39;:152::i;:::-;28250:250;;;;;;28527:3;28519:12;;;;;;;;:::i;:::-;28511:43;28533:9;;-1:-1:-1;28533:9:2;-1:-1:-1;28132:429:2;-1:-1:-1;;;28132:429:2:o;46491:686::-;46574:7;46611:5;;-1:-1:-1;;;;;46611:5:2;46597:10;:19;46593:199;;46655:126;46681:18;46721:42;46655:4;:126::i;46593:199::-;46880:13;;;-1:-1:-1;;;;;46963:32:2;;;-1:-1:-1;;;;;;46963:32:2;;;;;;;47080:49;;;46880:13;;;;25929:34:13;;;25994:2;25979:18;;25972:43;;;;47080:49:2;;25864:18:13;47080:49:2;25717:304:13;20078:1665:2;-1:-1:-1;;;;;20384:23:2;;20292:7;20384:23;;;:7;:23;;;;;:32;;;20383:33;;:84;;-1:-1:-1;;;;;;20433:25:2;;;;;;:7;:25;;;;;:34;;;20432:35;20383:84;20366:176;;;20507:23;20499:32;20492:39;;;;20366:176;20576:74;;-1:-1:-1;;;20576:74:2;;-1:-1:-1;;;;;5507:32:13;;;20576:74:2;;;5489:51:13;20552:21:2;;20576:42;;;;;;5462:18:13;;20576:74:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;20552:98;;20739:36;20759:14;20739:12;:36::i;:::-;20735:962;;;20833:11;20816:13;:28;;20791:127;;;;-1:-1:-1;;;20791:127:2;;28151:2:13;20791:127:2;;;28133:21:13;28190:2;28170:18;;;28163:30;28229:34;28209:18;;;28202:62;-1:-1:-1;;;28280:18:13;;;28273:38;28328:19;;20791:127:2;27949:404:13;20791:127:2;20735:962;;;21029:9;21042:17;21063:67;21108:8;21063:27;:67::i;:::-;21028:102;;-1:-1:-1;21028:102:2;;-1:-1:-1;21155:14:2;;-1:-1:-1;21148:3:2;:21;;;;;;;;:::i;:::-;;21144:79;;21204:3;21196:12;;;;;;;;:::i;:::-;21189:19;;;;;;;21144:79;21241:14;21237:97;;21290:28;21282:37;;21237:97;21440:16;21459:117;21495:36;;;;;;;;21510:19;;21495:36;;;21549:13;21459:18;:117::i;:::-;21440:136;;21608:8;21594:11;:22;21590:97;;;21651:20;21636:36;;;;;;;;21590:97;20935:762;;;20735:962;21721:14;21706:30;;;20078:1665;;;;;;;;:::o;44853:697::-;45020:5;;-1:-1:-1;;;;;45020:5:2;45006:10;:19;;:54;;-1:-1:-1;45043:17:2;;-1:-1:-1;;;;;45043:17:2;45029:10;:31;45006:54;44985:154;;;;-1:-1:-1;;;44985:154:2;;28560:2:13;44985:154:2;;;28542:21:13;28599:2;28579:18;;;28572:30;28638:34;28618:18;;;28611:62;-1:-1:-1;;;28689:18:13;;;28682:51;28750:19;;44985:154:2;28358:417:13;44985:154:2;45171:7;45219:13;45271:15;;;;;:46;;;45304:13;45290:10;:27;45271:46;45250:106;;;;-1:-1:-1;;;45250:106:2;;28982:2:13;45250:106:2;;;28964:21:13;29021:2;29001:18;;;28994:30;-1:-1:-1;;;29040:18:13;;;29033:43;29093:18;;45250:106:2;28780:337:13;45250:106:2;45372:9;45367:177;45391:10;45387:1;:14;45367:177;;;45456:13;;45470:1;45456:16;;;;;;;:::i;:::-;;;;;;;45422:10;:31;45441:7;;45449:1;45441:10;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;45422:31:2;;;;;;;;;;;;-1:-1:-1;45422:31:2;:50;45504:7;;45512:1;45504:10;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;45491:42:2;;45516:13;;45530:1;45516:16;;;;;;;:::i;:::-;;;;;;;45491:42;;;;4611:25:13;;4599:2;4584:18;;4465:177;45491:42:2;;;;;;;;45403:3;;;;:::i;:::-;;;;45367:177;;;;44975:575;;44853:697;;;;:::o;62510:1267::-;62672:9;62667:899;62691:7;:14;62687:1;:18;62667:899;;;62726:13;62742:7;62750:1;62742:10;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;62774:24:2;;;;;;:7;:24;;;;;;;:33;62742:10;;-1:-1:-1;62774:33:2;;62766:67;;;;-1:-1:-1;;;62766:67:2;;29324:2:13;62766:67:2;;;29306:21:13;29363:2;29343:18;;;29336:30;-1:-1:-1;;;29382:18:13;;;29375:51;29443:18;;62766:67:2;29122:345:13;62766:67:2;62864:4;62851:17;;;;62847:448;;;62888:22;62913:37;;;;;;;;62928:6;-1:-1:-1;;;;;62928:18:2;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;62913:37;;62888:62;-1:-1:-1;62968:51:2;62998:6;62888:62;62968:21;:51::i;:::-;63042:9;63037:244;63061:7;:14;63057:1;:18;63037:244;;;63104:158;63160:6;63193:7;63201:1;63193:10;;;;;;;;:::i;:::-;;;;;;;63229:11;63104:22;:158::i;:::-;63077:3;;;;:::i;:::-;;;;63037:244;;;;62870:425;62847:448;63325:4;63312:17;;;;63308:248;;;63349:38;63379:6;63349:21;:38::i;:::-;63410:9;63405:137;63429:7;:14;63425:1;:18;63405:137;;;63472:51;63503:6;63512:7;63520:1;63512:10;;;;;;;;:::i;:::-;;;;;;;63472:22;:51::i;:::-;63445:3;;;;:::i;:::-;;;;63405:137;;;;63308:248;-1:-1:-1;62707:3:2;;;;:::i;:::-;;;;62667:899;;;;63580:9;63575:196;63599:7;:14;63595:1;:18;63575:196;;;63660:100;63695:7;63703:1;63695:10;;;;;;;;:::i;:::-;;;;;;;63723:11;:23;63735:7;63743:1;63735:10;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;63723:23:2;-1:-1:-1;;;;;63723:23:2;;;;;;;;;;;;;63660:17;:100::i;:::-;63634:11;:23;63646:7;63654:1;63646:10;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;63634:23:2;-1:-1:-1;;;;;63634:23:2;;;;;;;;;;;;:126;;;;63615:3;;;;;:::i;:::-;;;;63575:196;;60855:672;-1:-1:-1;;;;;60947:34:2;;60927:17;60947:34;;;:21;:34;;;;;;;;;61104:20;:33;;;;;;60947:34;;67785:15;;61061:86;;67785:15;;61061:4;:86::i;:::-;61039:108;;61175:1;61161:11;:15;:32;;;;;61192:1;61180:9;:13;61161:32;61157:364;;;61209:18;61230:28;61235:11;61248:9;61230:4;:28::i;:::-;-1:-1:-1;;;;;61323:24:2;;61272:26;61323:24;;;:11;:24;;;;;;61209:49;;-1:-1:-1;61272:26:2;61301:88;;61209:49;61301:4;:88::i;:::-;-1:-1:-1;;;;;61404:24:2;;;;;;:11;:24;;;;;;;;:45;;;;61463:20;:33;;;:47;;;-1:-1:-1;;60917:610:2;;;60855:672;:::o;48327:405::-;48434:13;;48383:4;;-1:-1:-1;;;;;48434:13:2;48420:10;:27;;:50;;-1:-1:-1;48465:5:2;;-1:-1:-1;;;;;48465:5:2;48451:10;:19;48420:50;48399:136;;;;-1:-1:-1;;;48399:136:2;;;;;;;:::i;:::-;48567:5;;-1:-1:-1;;;;;48567:5:2;48553:10;:19;;:36;;-1:-1:-1;48585:4:2;48576:13;;;;48553:36;48545:71;;;;-1:-1:-1;;;48545:71:2;;;;;;;:::i;:::-;48627:22;:30;;;;;-1:-1:-1;;;48627:30:2;-1:-1:-1;;;;48627:30:2;;;;;;48672:31;;;;;;48652:5;;29696:2:13;29678:21;;;29735:1;29715:18;;;29708:29;-1:-1:-1;;;29768:2:13;29753:18;;29746:38;29865:14;;29858:22;29851:4;29836:20;;29829:52;29816:3;29801:19;;29472:415;67429:269:2;-1:-1:-1;;;;;67522:24:2;;67487:4;67522:24;;;:7;:24;;;;;:49;;;:54;:115;;;;-1:-1:-1;;;;;;67592:37:2;;;;;;:20;:37;;;;;;;;:45;;:37;:45;67522:115;:169;;;;;67653:6;-1:-1:-1;;;;;67653:28:2;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;67687:4;67653:38;67503:188;67429:269;-1:-1:-1;;67429:269:2:o;42260:984::-;42317:7;42354:5;;-1:-1:-1;;;;;42354:5:2;42340:10;:19;42336:195;;42398:122;42424:18;42464:38;42398:4;:122::i;42336:195::-;-1:-1:-1;;;;;42545:24:2;;;;;;:7;:24;;;;;:33;;;42541:213;;;42617:126;42643:27;42692:33;42617:4;:126::i;42541:213::-;42764:6;-1:-1:-1;;;;;42764:15:2;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;42927:24:2;;42900;42927;;;:7;:24;;;;;42961:25;;42982:4;-1:-1:-1;;42961:25:2;;;;;;;42996:18;;;:26;;;;;;;;43032:34;;:38;;;;43081:35;42927:24;43081:18;:35::i;:::-;43126:34;43152:6;43126:17;:34::i;:::-;43176:20;;-1:-1:-1;;;;;5507:32:13;;5489:51;;43176:20:2;;5477:2:13;5462:18;43176:20:2;5343:203:13;65459:596:2;65625:21;:19;:21::i;:::-;65617:63;;;;-1:-1:-1;;;65617:63:2;;27793:2:13;65617:63:2;;;27775:21:13;27832:2;27812:18;;;27805:30;27871:31;27851:18;;;27844:59;27920:18;;65617:63:2;27591:353:13;65617:63:2;65711:14;;65769:19;;65756:32;;:84;;;;;65821:12;:19;65808:9;:32;65756:84;65735:172;;;;-1:-1:-1;;;65735:172:2;;30344:2:13;65735:172:2;;;30326:21:13;30383:2;30363:18;;;30356:30;30422:34;30402:18;;;30395:62;-1:-1:-1;;;30473:18:13;;;30466:39;30522:19;;65735:172:2;30142:405:13;65735:172:2;65923:9;65918:131;65942:9;65938:1;:13;65918:131;;;65972:66;65993:7;66001:1;65993:10;;;;;;;;:::i;:::-;;;;;;;66005:12;66018:1;66005:15;;;;;;;;:::i;:::-;;;;;;;66022:12;66035:1;66022:15;;;;;;;;:::i;:::-;;;;;;;65972:20;:66::i;:::-;65953:3;;;:::i;:::-;;;65918:131;;4570:184;-1:-1:-1;;;;;4699:22:2;;4672:24;4699:22;;;:13;:22;;;;;;;;4672:49;;;;;;;;;;;;;;;;;4645:15;;4672:24;:49;;4699:22;4672:49;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4672:49:2;;;;;;;;;;;;;;;;-1:-1:-1;4672:49:2;;4570:184;-1:-1:-1;;;;;;;4570:184:2:o;67096:97::-;67142:15;67176:10;67169:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;67169:17:2;;;;;;;;;;;;;;;;;;;;;;;67096:97;:::o;25633:809::-;25896:22;;25789:7;;-1:-1:-1;;;25896:22:2;;;;25895:23;25887:54;;;;-1:-1:-1;;;25887:54:2;;30754:2:13;25887:54:2;;;30736:21:13;30793:2;30773:18;;;30766:30;-1:-1:-1;;;30812:18:13;;;30805:48;30870:18;;25887:54:2;30552:342:13;25887:54:2;26072:15;26090:50;26112:6;26120:3;26125:14;26090:21;:50::i;:::-;26072:68;-1:-1:-1;26154:34:2;;26150:79;;26211:7;-1:-1:-1;26204:14:2;;26150:79;26275:29;26297:6;26275:21;:29::i;:::-;26314:35;26337:6;26345:3;26314:22;:35::i;:::-;26359;26382:6;26390:3;26359:22;:35::i;5465:409::-;5594:14;;5552:16;;5580:11;5594:14;5646:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5646:18:2;;5619:45;;5679:9;5674:169;5698:3;5694:1;:7;5674:169;;;5722:13;5745:7;5753:1;5745:10;;;;;;;;:::i;:::-;;;;;;;5722:34;;5792:39;5812:6;5820:10;5792:19;:39::i;:::-;5784:48;;;;;;;;:::i;:::-;5771:7;5779:1;5771:10;;;;;;;;:::i;:::-;;;;;;;;;;:61;-1:-1:-1;5703:3:2;;;;:::i;:::-;;;;5674:169;;;-1:-1:-1;5860:7:2;5465:409;-1:-1:-1;;;5465:409:2:o;35097:1718::-;35404:6;;;:71;;-1:-1:-1;;;35404:71:2;;-1:-1:-1;;;;;5507:32:13;;;35404:71:2;;;5489:51:13;;;;35275:7:2;;;;;;35404:6;;;:25;;5462:18:13;;35404:71:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;35519:6;;;:73;;-1:-1:-1;;;35519:73:2;;-1:-1:-1;;;;;5507:32:13;;;35519:73:2;;;5489:51:13;;;;35372:103:2;;-1:-1:-1;35485:31:2;;35519:6;;;:25;;5462:18:13;;35519:73:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;35485:107;-1:-1:-1;35606:26:2;;;:58;;-1:-1:-1;35636:28:2;;35606:58;35602:127;;;35696:17;35716:1;35680:38;;;;;;;;35602:127;36114:28;36152:16;-1:-1:-1;;;;;36145:56:2;;:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;36114:89;;36239:19;36268:20;-1:-1:-1;;;;;;;;;;;;;;36268:20:2;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;36387:45:2;;;;;;;36402:28;;36387:45;;36446:38;;;;;;;;;;;-1:-1:-1;;36369:125:2;;:4;:125::i;:::-;36357:137;;36518:119;36536:40;;;;;;;;36551:23;36536:40;;;36590:37;;;;;;;;36605:20;36590:37;;;36518:4;:119::i;:::-;36504:133;;36655:28;36660:9;36671:11;36655:4;:28::i;:::-;36647:36;;36708:44;36727:5;36734:17;36708:18;:44::i;:::-;36779:14;;-1:-1:-1;36694:58:2;-1:-1:-1;;;;;;;;35097:1718:2;;;;;;;:::o;23207:1043::-;23518:19;;23411:7;;-1:-1:-1;;;23518:19:2;;;;23517:20;23509:48;;;;-1:-1:-1;;;23509:48:2;;31101:2:13;23509:48:2;;;31083:21:13;31140:2;31120:18;;;31113:30;-1:-1:-1;;;31159:18:13;;;31152:45;31214:18;;23509:48:2;30899:339:13;23509:48:2;-1:-1:-1;;;;;23642:25:2;;;;;;:7;:25;;;;;:34;;;23641:35;;:84;;-1:-1:-1;;;;;;23693:23:2;;;;;;:7;:23;;;;;:32;;;23692:33;23641:84;23624:176;;;23765:23;23757:32;;23624:176;23888:14;-1:-1:-1;;;;;23881:34:2;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;23827:90:2;23834:16;-1:-1:-1;;;;;23827:36:2;;:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;23827:90:2;;23810:185;;23957:26;23949:35;;23810:185;24041:39;24063:16;24041:21;:39::i;:::-;24090:50;24113:16;24131:8;24090:22;:50::i;:::-;24150:52;24173:16;24191:10;24150:22;:52::i;:::-;24228:14;24213:30;23207:1043;-1:-1:-1;;;;;;23207:1043:2:o;14904:2171::-;-1:-1:-1;;;;;15147:28:2;;15040:7;15147:28;;;:20;:28;;;;;;;;15146:29;15138:58;;;;-1:-1:-1;;;15138:58:2;;31738:2:13;15138:58:2;;;31720:21:13;31777:2;31757:18;;;31750:30;-1:-1:-1;;;31796:18:13;;;31789:46;31852:18;;15138:58:2;31536:340:13;15138:58:2;-1:-1:-1;;;;;15212:15:2;;;;;;:7;:15;;;;;:24;;;15207:95;;15267:23;15259:32;;15207:95;-1:-1:-1;;;;;15317:15:2;;;;;;;:7;:15;;;;;;;;:43;;;;;:33;;;;:43;;;;;;15312:565;;15461:10;-1:-1:-1;;;;;15461:20:2;;;15453:54;;;;-1:-1:-1;;;15453:54:2;;32083:2:13;15453:54:2;;;32065:21:13;32122:2;32102:18;;;32095:30;-1:-1:-1;;;32141:18:13;;;32134:51;32202:18;;15453:54:2;31881:345:13;15453:54:2;15575:9;15587:49;15614:10;15627:8;15587:19;:49::i;:::-;15575:61;-1:-1:-1;15661:14:2;15654:3;:21;;;;;;;;:::i;:::-;;15650:79;;15710:3;15702:12;;;;;;;;:::i;:::-;15695:19;;;;;15650:79;-1:-1:-1;;;;;15822:15:2;;;;;;;:7;:15;;;;;;;;:43;;;;;:33;;;;:43;;;;;;15815:51;;;;:::i;:::-;15362:515;15312:565;15891:6;;;:41;;-1:-1:-1;;;15891:41:2;;-1:-1:-1;;;;;5507:32:13;;;15891:41:2;;;5489:51:13;;;;15891:6:2;;;:25;;5462:18:13;;15891:41:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;15887:110;;15968:17;15960:26;;15887:110;-1:-1:-1;;;;;16027:18:2;;16007:17;16027:18;;;:10;:18;;;;;;16121:14;;16117:250;;16151:20;16181:6;-1:-1:-1;;;;;16174:27:2;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;16151:52;;16217:24;16244:32;16249:12;16263;16244:4;:32::i;:::-;16217:59;;16317:9;16298:16;:28;16290:66;;;;-1:-1:-1;;;16290:66:2;;32565:2:13;16290:66:2;;;32547:21:13;32604:2;32584:18;;;32577:30;32643:27;32623:18;;;32616:55;32688:18;;16290:66:2;32363:349:13;16290:66:2;16137:230;;16117:250;16391:9;16428:17;16458:160;16515:8;16548:6;16573:1;16592:12;16458:39;:160::i;:::-;16377:241;;-1:-1:-1;16377:241:2;;-1:-1:-1;16639:14:2;;-1:-1:-1;16632:3:2;:21;;;;;;;;:::i;:::-;;16628:71;;16684:3;16676:12;;;;;;;;:::i;:::-;16669:19;;;;;;;16628:71;16712:13;;16708:88;;16756:28;16748:37;;16708:88;16842:22;16867:45;;;;;;;;16889:6;-1:-1:-1;;;;;16882:26:2;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;16867:45;;16842:70;-1:-1:-1;16922:42:2;16944:6;16842:70;16922:21;:42::i;:::-;16974:53;16997:6;17005:8;17015:11;16974:22;:53::i;:::-;17053:14;17038:30;14904:2171;-1:-1:-1;;;;;;;;14904:2171:2:o;1297:49:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1297:49:4;;-1:-1:-1;1297:49:4;;-1:-1:-1;1297:49:4:o;38760:2038:2:-;38882:7;38952:5;;-1:-1:-1;;;;;38952:5:2;38938:10;:19;38934:202;;38996:129;39022:18;39062:45;38996:4;:129::i;:::-;38973:152;;;;38934:202;-1:-1:-1;;;;;39205:24:2;;39181:21;39205:24;;;:7;:24;;;;;39244:15;;;;39239:202;;39298:132;39324:23;39369:43;39298:4;:132::i;:::-;39275:155;;;;;39239:202;39487:66;;;;;;;;;;;;39629:44;;;;;;;;4251:6;39629:44;;39487:66;39687:46;39629:44;39487:66;1937:14:8;1921:13;;:30;;1797:161;39687:46:2;39683:241;;;39772:141;39798:31;39851:44;39772:4;:141::i;:::-;39749:164;;;;;;;39683:241;40008:32;;;;;:86;;-1:-1:-1;40056:6:2;;;:33;;-1:-1:-1;;;40056:33:2;;-1:-1:-1;;;;;5507:32:13;;;40056:33:2;;;5489:51:13;;;;40056:6:2;;;:25;;5462:18:13;;40056:33:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:38;40008:86;39991:292;;;40142:130;40168:17;40207:47;40142:4;:130::i;39991:292::-;40418:31;;;;;40459:61;;;;40619:131;;;-1:-1:-1;;;;;32952:32:13;;32934:51;;33016:2;33001:18;;32994:34;;;33044:18;;;33037:34;;;40619:131:2;;32922:2:13;32907:18;40619:131:2;;;;;;;40776:14;40761:30;38760:2038;-1:-1:-1;;;;;;;38760:2038:2:o;61667:95::-;61726:29;61736:6;61744:10;61726:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;61726:29:2;;;;;;;;;;;;;;;;;;;;;:9;:29::i;12223:488::-;12359:7;12378:15;12396:53;12418:6;12426:8;12436:12;12396:21;:53::i;:::-;12378:71;-1:-1:-1;12463:34:2;;12459:79;;12520:7;-1:-1:-1;12513:14:2;;12459:79;12584:29;12606:6;12584:21;:29::i;:::-;12623:40;12646:6;12654:8;12623:22;:40::i;:::-;12689:14;12674:30;12223:488;-1:-1:-1;;;;;12223:488:2:o;7552:2404::-;7839:50;;-1:-1:-1;;;7839:50:2;;7878:10;7839:50;;;5489:51:13;7636:7:2;;7678:13;;7636:7;;;;;;-1:-1:-1;;;;;7839:38:2;;;;;5462:18:13;;7839:50:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7780:109;;;;;;;7907:4;7915:1;7907:9;7899:59;;;;-1:-1:-1;;;7899:59:2;;33657:2:13;7899:59:2;;;33639:21:13;33696:2;33676:18;;;33669:30;33735:34;33715:18;;;33708:62;-1:-1:-1;;;33786:18:13;;;33779:35;33831:19;;7899:59:2;33455:401:13;7899:59:2;8053:15;;8049:199;;8107:130;8133:28;8183:36;8107:4;:130::i;:::-;8084:153;7552:2404;-1:-1:-1;;;;;;7552:2404:2:o;8049:199::-;8338:15;8356:106;8391:13;8418:10;8442;8356:21;:106::i;:::-;8338:124;-1:-1:-1;8476:12:2;;8472:215;;8527:149;8559:15;8596:33;8651:7;8527:10;:149::i;:::-;8504:172;7552:2404;-1:-1:-1;;;;;;;7552:2404:2:o;8472:215::-;-1:-1:-1;;;;;8727:24:2;;8697:27;8727:24;;;:7;:24;;;;;;;;8873:10;8842:42;;:30;;;:42;;;;;;;;;8837:104;;8915:14;8900:30;7552:2404;-1:-1:-1;;;;;;;;7552:2404:2:o;8837:104::-;9042:10;9011:42;;;;:30;;;:42;;;;;;;;9004:49;;-1:-1:-1;;9004:49:2;;;9209:13;:25;;;;;9177:57;;;;;;;;;;;;;;;;;;;9209:25;;9177:57;;;9209:25;9177:57;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9177:57:2;;;;;;;;;;;;;;;;-1:-1:-1;;9258:20:2;;9177:57;;-1:-1:-1;9258:20:2;;-1:-1:-1;9244:11:2;;-1:-1:-1;;9322:160:2;9346:3;9342:1;:7;9322:160;;;9394:6;-1:-1:-1;;;;;9374:26:2;:13;9388:1;9374:16;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;9374:26:2;;9370:102;;;9433:1;9420:14;;9452:5;;9370:102;9351:3;;;;:::i;:::-;;;;9322:160;;;;9608:3;9595:10;:16;9588:24;;;;:::i;:::-;9755:10;9711:27;9741:25;;;:13;:25;;;;;9812:17;;9741:25;;9812:21;;9832:1;;9812:21;:::i;:::-;9801:33;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9801:33:2;9776:10;9787;9776:22;;;;;;;;:::i;:::-;;;;;;;;;:58;;;;;-1:-1:-1;;;;;9776:58:2;;;;;-1:-1:-1;;;;;9776:58:2;;;;;;9844:10;:16;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;9844:16:2;;;;;-1:-1:-1;;;;;;9844:16:2;;;;;;9876:32;;;;;;9889:6;;9897:10;;-1:-1:-1;;;;;25947:15:13;;;25929:34;;25999:15;;25994:2;25979:18;;25972:43;25879:2;25864:18;;25717:304;9876:32:2;;;;;;;;9934:14;9919:30;7552:2404;-1:-1:-1;;;;;;;;;;;;7552:2404:2:o;3349:88:8:-;3402:4;3425:5;3429:1;3425;:5;:::i;3803:88::-;3856:4;3879:5;3883:1;3879;:5;:::i;55201:1198:2:-;-1:-1:-1;;;;;55357:23:2;;55319:35;55357:23;;;:15;:23;;;;;;;;55412:16;:24;;;;;;55357:23;;55467:90;67785:15;55487:16;55467:90;;;;;;;;;;;;;;;;;:6;:90::i;:::-;55649:17;;55446:111;;-1:-1:-1;55567:19:2;;55589:88;;55607:20;;;;;-1:-1:-1;;;55649:17:2;;;55589:4;:88::i;:::-;55567:110;;55705:1;55691:11;:15;:34;;;;;55724:1;55710:11;:15;55691:34;55687:706;;;55741:20;55764:100;55793:6;-1:-1:-1;;;;;55786:27:2;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;55833:17;55764:4;:100::i;:::-;55741:123;;55878:19;55900:30;55905:11;55918;55900:4;:30::i;:::-;55878:52;;55944:19;55981:1;55966:12;:16;:110;;56055:21;;;;;;;;56073:1;56055:21;;;55966:110;;;56001:35;56010:11;56023:12;56001:8;:35::i;:::-;56140:37;;;;;;;;;56158:17;;-1:-1:-1;;;;;56158:17:2;56140:37;;55944:132;;-1:-1:-1;56110:144:2;;56135:50;;55944:132;56135:4;:50::i;:::-;:59;56110:144;;;;;;;;;;;;;;;;;:7;:144::i;:::-;-1:-1:-1;;;;;56090:164:2;-1:-1:-1;;;56268:31:2;;;;;;;-1:-1:-1;55687:706:2;;-1:-1:-1;;55687:706:2;;56320:15;;56316:77;;56351:31;;;;;-1:-1:-1;;;56351:31:2;-1:-1:-1;;;;;56351:31:2;;;;;;55309:1090;;;;55201:1198;;:::o;58763:1909::-;-1:-1:-1;;;;;59241:23:2;;;59203:35;59241:23;;;:15;:23;;;;;;;;59296:17;;59347;:25;;;;;:35;;;;;;;;;;;;;;-1:-1:-1;;;;;59296:17:2;;;59489:49;;;;59241:23;;59553:18;;:53;;;;-1:-1:-1;;;;59575:31:2;;;59553:53;59549:359;;;-1:-1:-1;;;;59549:359:2;60006:24;60033:74;;;;;;;;60064:32;60069:11;60082:13;60064:4;:32::i;:::-;60033:74;;60161:44;;-1:-1:-1;;;60161:44:2;;-1:-1:-1;;;;;5507:32:13;;;60161:44:2;;;5489:51:13;60006:101:2;;-1:-1:-1;60118:22:2;;60143:103;;60161:34;;;;;;5462:18:13;;60161:44:2;;;;;;;;;;;;;;;;;;;;;;60143:103;60118:128;;60330:21;60354:32;60359:14;60375:10;60354:4;:32::i;:::-;-1:-1:-1;;;;;60428:21:2;;60397:23;60428:21;;;:11;:21;;;;;;60330:56;;-1:-1:-1;60397:23:2;60423:42;;60330:56;60423:4;:42::i;:::-;-1:-1:-1;;;;;60475:21:2;;;;;;;:11;:21;;;;;;;;;:39;;;60530:135;;18397:25:13;;;18438:18;;;18431:34;;;60475:39:2;;-1:-1:-1;60475:21:2;;60530:135;;;;;;18370:18:13;60530:135:2;;;;;;;58898:1774;;;;;;;58763:1909;;;:::o;51876:146::-;51930:4;51967:5;;-1:-1:-1;;;;;51967:5:2;51953:10;:19;;:62;;-1:-1:-1;51990:25:2;;-1:-1:-1;;;;;51990:25:2;51976:10;:39;51953:62;51946:69;;51876:146;:::o;64121:369::-;64218:7;;67997:42;64305:29;;-1:-1:-1;;;64305:29:2;;64328:4;64305:29;;;5489:51:13;64237:34:2;;-1:-1:-1;64281:21:2;;-1:-1:-1;;;;;64305:14:2;;;;;5462:18:13;;64305:29:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;64281:53;;64357:1;64348:6;:10;:37;;;;;64372:13;64362:6;:23;;64348:37;64344:117;;;64401:27;;-1:-1:-1;;;64401:27:2;;-1:-1:-1;;;;;24446:32:13;;;64401:27:2;;;24428:51:13;24495:18;;;24488:34;;;64401:13:2;;;;;24401:18:13;;64401:27:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;64449:1;64442:8;;;;;;64344:117;-1:-1:-1;64477:6:2;;64121:369;-1:-1:-1;;;64121:369:2:o;31088:3481::-;31280:5;31287:7;31296;31315:37;;:::i;:::-;-1:-1:-1;;;;;31491:22:2;;31399:12;31491:22;;;:13;:22;;;;;;;;31466:47;;;;;;;;;;;;;;;;;31399:12;;31466:47;;31491:22;31466:47;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;31466:47:2;;;;;;;;;;;;;;;;;;;;;;;31528:9;31523:2579;31547:6;:13;31543:1;:17;31523:2579;;;31581:12;31596:6;31603:1;31596:9;;;;;;;;:::i;:::-;;;;;;;;;;;31841:33;;-1:-1:-1;;;31841:33:2;;-1:-1:-1;;;;;5507:32:13;;;31841:33:2;;;5489:51:13;31596:9:2;;-1:-1:-1;31841:24:2;;;;;;5462:18:13;;31841:33:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;31799:25;;;31687:187;31763:18;;;31687:187;31727:18;;;31687:187;;-1:-1:-1;31892:9:2;;31888:180;;32026:20;32048:1;32051;32018:35;;;;;;;;;;;;;31888:180;32105:95;;;;;;;;;-1:-1:-1;;;;;32137:23:2;;;-1:-1:-1;32137:23:2;;;:7;:23;;;;;:48;;;32105:95;;32081:21;;;:119;;;;32234:42;;;;;;;-1:-1:-1;;;32249:25:2;32234:42;;32214:17;;;:62;32371:6;;;:32;;-1:-1:-1;;;32371:32:2;;;;;5489:51:13;;;;32371:32:2;;:6;;;:25;;5462:18:13;;;;;32105:95:2;32371:32;;;;;:6;:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;32344:24;;;:59;;;32417:100;;32478:17;32497:1;32500;32470:32;;;;;;;;;;;;;32417:100;32549:41;;;;;;;;;32564:24;;;;32549:41;;32530:16;;;:60;32746:21;;;;32769:17;;;;32719:116;;32741:46;;:4;:46::i;:::-;32805:4;:16;;;32719:4;:116::i;:::-;32698:18;;;:137;;;33012:18;;;;33048;;32933:147;;32698:137;33012:18;32933:25;:147::i;:::-;32912:168;;33233:16;;;;33267:18;;;;33303:25;;;;33190:152;;33233:16;33267:18;33190:25;:152::i;:::-;33162:25;;;:180;-1:-1:-1;;;;;33427:21:2;;;;;;;33423:669;;;33601:164;33648:4;:18;;;33688:12;33722:4;:25;;;33601;:164::i;:::-;33573:25;;;:192;;;33962:16;;;;33915:162;;34000:12;;33915:25;:162::i;:::-;33887:25;;;:190;33423:669;-1:-1:-1;31562:3:2;;;;:::i;:::-;;;;31523:2579;;;-1:-1:-1;34208:25:2;;;;34187:18;;:46;34183:380;;;34327:25;;;;34306:18;;34274:14;;34306:46;;;:::i;:::-;34370:1;34249:136;;;;;;;;;;;34183:380;34441:14;34473:1;34520:4;:18;;;34492:4;:25;;;:46;;;;:::i;:::-;34416:136;;;;;;;;;;;53904:1074;-1:-1:-1;;;;;54008:23:2;;53970:35;54008:23;;;:15;:23;;;;;;;;54063:16;:24;;;;;;54008:23;;54118:90;67785:15;54138:16;67704:103;54118:90;54300:17;;54097:111;;-1:-1:-1;54218:19:2;;54240:88;;54258:20;;;;;-1:-1:-1;;;54300:17:2;;;54240:4;:88::i;:::-;54218:110;;54356:1;54342:11;:15;:34;;;;;54375:1;54361:11;:15;54342:34;54338:634;;;54392:20;54422:6;-1:-1:-1;;;;;54415:26:2;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;54392:51;;54457:19;54479:30;54484:11;54497;54479:4;:30::i;:::-;54457:52;;54523:19;54560:1;54545:12;:16;:110;;54634:21;;;;;;;;54652:1;54634:21;;;54545:110;;;54580:35;54589:11;54602:12;54580:8;:35::i;:::-;54719:37;;;;;;;;;54737:17;;-1:-1:-1;;;;;54737:17:2;54719:37;;54523:132;;-1:-1:-1;54689:144:2;;54714:50;;54523:132;54714:4;:50::i;54689:144::-;-1:-1:-1;;;;;54669:164:2;-1:-1:-1;;;54847:31:2;;;;;;;-1:-1:-1;54338:634:2;;-1:-1:-1;;54338:634:2;;54899:15;;54895:77;;54930:31;;;;;-1:-1:-1;;;54930:31:2;-1:-1:-1;;;;;54930:31:2;;;;;;53960:1018;;;;53904:1074;:::o;56648:1766::-;-1:-1:-1;;;;;57066:23:2;;;57028:35;57066:23;;;:15;:23;;;;;;;;57121:17;;57172;:25;;;;;:35;;;;;;;;;;;;;;-1:-1:-1;;;;;57121:17:2;;;57313:49;;;;57066:23;;57377:18;;:53;;;;-1:-1:-1;;;;57399:31:2;;;57377:53;57373:359;;;-1:-1:-1;;;;57373:359:2;57823:24;57850:74;;;;;;;;57881:32;57886:11;57899:13;57881:4;:32::i;:::-;57850:74;;57960:34;;-1:-1:-1;;;57960:34:2;;-1:-1:-1;;;;;5507:32:13;;;57960:34:2;;;5489:51:13;57823:101:2;;-1:-1:-1;57935:22:2;;57960:24;;;;;5462:18:13;;57960:34:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;57935:59;;58072:21;58096:32;58101:14;58117:10;58096:4;:32::i;:::-;-1:-1:-1;;;;;58170:21:2;;58139:23;58170:21;;;:11;:21;;;;;;58072:56;;-1:-1:-1;58139:23:2;58165:42;;58072:56;58165:4;:42::i;:::-;-1:-1:-1;;;;;58217:21:2;;;;;;;:11;:21;;;;;;;;;:39;;;58272:135;;18397:25:13;;;18438:18;;;18431:34;;;58217:39:2;;-1:-1:-1;58217:21:2;;58272:135;;;;;;18370:18:13;58272:135:2;;;;;;;56723:1691;;;;;;;56648:1766;;:::o;1891:149:7:-;1952:4;1973:33;1986:3;1981:9;;;;;;;;:::i;:::-;1997:4;1992:10;;;;;;;;:::i;:::-;1973:33;;;8531:25:13;;;8587:2;8572:18;;8565:34;;;;2004:1:7;8615:18:13;;;8608:34;8519:2;8504:18;1973:33:7;;;;;;;2029:3;2024:9;;;;;;;;:::i;28840:304:2:-;28931:5;28938:7;28947;28985:152;29042:7;29082:1;29103;29122;28985:39;:152::i;:::-;28966:171;;;;;;28840:304;;;;;:::o;1150:193:8:-;1250:4;1266:18;1287:15;1292:1;1295:6;1287:4;:15::i;:::-;1266:36;;1319:17;1328:7;1319:8;:17::i;4843:88::-;4896:4;4919:5;4923:1;4919;:5;:::i;43250:247:2:-;43318:9;43313:137;43337:10;:17;43333:21;;43313:137;;;43407:6;-1:-1:-1;;;;;43383:31:2;:10;43394:1;43383:13;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;43383:13:2;:31;;43375:64;;;;-1:-1:-1;;;43375:64:2;;35157:2:13;43375:64:2;;;35139:21:13;35196:2;35176:18;;;35169:30;-1:-1:-1;;;35215:18:13;;;35208:50;35275:18;;43375:64:2;34955:344:13;43375:64:2;43356:3;;;;:::i;:::-;;;;43313:137;;;-1:-1:-1;43459:10:2;:31;;;;;;;-1:-1:-1;43459:31:2;;;;;;;;-1:-1:-1;;;;;;43459:31:2;-1:-1:-1;;;;;43459:31:2;;;;;;;;;;43250:247::o;43503:841::-;43565:18;43586:90;67785:15;43606:16;67704:103;43586:90;-1:-1:-1;;;;;43725:23:2;;43687:35;43725:23;;;:15;:23;;;;;;;;43796:15;:23;;;;;;43896:17;;43565:111;;-1:-1:-1;43725:23:2;;-1:-1:-1;;;;;43896:17:2;43892:153;;43998:36;;-1:-1:-1;;;;;;43998:36:2;-1:-1:-1;;;43998:36:2;;;43892:153;44059:17;;-1:-1:-1;;;;;44059:17:2;44055:153;;44161:36;;-1:-1:-1;;;;;;44161:36:2;-1:-1:-1;;;44161:36:2;;;44055:153;44306:31;;;;;;-1:-1:-1;;;44306:31:2;-1:-1:-1;;;;;44306:31:2;;;;;;;;44286:51;;;;;;;;;;-1:-1:-1;43503:841:2:o;52314:1367::-;-1:-1:-1;;;;;52474:24:2;;52450:21;52474:24;;;:7;:24;;;;;52516:15;;;;52508:53;;;;-1:-1:-1;;;52508:53:2;;35506:2:13;52508:53:2;;;35488:21:13;35545:2;35525:18;;;35518:30;35584:27;35564:18;;;35557:55;35629:18;;52508:53:2;35304:349:13;52508:53:2;-1:-1:-1;;;;;52576:33:2;;;;;;:16;:33;;;;;;:48;;52572:502;;52858:38;52888:6;52858:21;:38::i;:::-;-1:-1:-1;;;;;52954:33:2;;;;;;:16;:33;;;;;;;:47;;;53020:43;;;;;52990:11;4611:25:13;;4599:2;4584:18;;4465:177;53020:43:2;;;;;;;;52572:502;-1:-1:-1;;;;;53088:33:2;;;;;;:16;:33;;;;;;:48;;53084:591;;53370:22;53395:37;;;;;;;;53410:6;-1:-1:-1;;;;;53410:18:2;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;53395:37;;53370:62;-1:-1:-1;53446:51:2;53476:6;53370:62;53446:21;:51::i;:::-;-1:-1:-1;;;;;53555:33:2;;;;;;:16;:33;;;;;;;:47;;;53621:43;;;;;53591:11;4611:25:13;;4599:2;4584:18;;4465:177;53621:43:2;;;;;;;;53138:537;52440:1241;52314:1367;;;:::o;12717:1029::-;-1:-1:-1;;;;;12881:15:2;;12857:7;12881:15;;;:7;:15;;;;;:24;;;12876:95;;12936:23;12928:32;;12876:95;-1:-1:-1;;;;;13079:15:2;;;;;;;:7;:15;;;;;;;;:43;;;;;:33;;;;:43;;;;;;13074:105;;13153:14;13145:23;;13074:105;13294:9;13331:17;13361:160;13418:8;13451:6;13476:12;13506:1;13361:39;:160::i;:::-;13280:241;;-1:-1:-1;13280:241:2;;-1:-1:-1;13542:14:2;;-1:-1:-1;13535:3:2;:21;;;;;;;;:::i;:::-;;13531:71;;13587:3;13579:12;;;;;;;;:::i;:::-;13572:19;;;;;;13531:71;13615:13;;13611:88;;13659:28;13651:37;;6152:1016;-1:-1:-1;;;;;6301:24:2;;6254:5;6301:24;;;:7;:24;;;;;6341:21;;;;6336:132;;6434:23;6427:30;;;;;6336:132;-1:-1:-1;;;;;6482:40:2;;;;;;:30;;;:40;;;;;;;;:48;;:40;:48;6478:130;;;6583:14;6576:21;;;;;6478:130;-1:-1:-1;;;;;6989:40:2;;;;;;;:30;;;:40;;;;;;;;:47;;7032:4;-1:-1:-1;;6989:47:2;;;;;;;;7046:13;:23;;;;;:36;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;7046:36:2;;;;;;;;;7098:31;;25929:34:13;;;25979:18;;25972:43;;;;7098:31:2;;25864:18:13;7098:31:2;;;;;;;-1:-1:-1;7147:14:2;;6152:1016;-1:-1:-1;;;6152:1016:2:o;3897:179:8:-;-1:-1:-1;;;;;;;;;;;;4013:56:8;;;;;;;;451:4;4028:28;4033:1;:10;;;4045:1;:10;;;4028:4;:28::i;:::-;:39;;;;:::i;:::-;4013:56;;4006:63;3897:179;-1:-1:-1;;;3897:179:8:o;4937:184::-;-1:-1:-1;;;;;;;;;;;;5053:61:8;;;;;;;;5068:44;5073:26;5078:1;:10;;;451:4;5073;:26::i;:::-;5101:10;;5068:4;:44::i;2156:213:7:-;2271:4;2292:43;2305:3;2300:9;;;;;;;;:::i;:::-;2316:4;2311:10;;;;;;;;:::i;:::-;2292:43;;;8531:25:13;;;8587:2;8572:18;;8565:34;;;;8615:18;;8608:34;;;8519:2;8504:18;2292:43:7;;;;;;;2358:3;2353:9;;;;;;;;:::i;2801:182:8:-;2898:6;2937:12;2928:7;2924:11;;2916:34;;;;-1:-1:-1;;;2916:34:8;;;;;;;;:::i;:::-;-1:-1:-1;2974:1:8;;2801:182;-1:-1:-1;;2801:182:8:o;5264:124::-;5323:4;5346:35;5351:17;5356:1;451:4;5351;:17::i;:::-;5370:10;;5346:4;:35::i;6009:145::-;-1:-1:-1;;;;;;;;;;;;6098:49:8;;;;;;;;6116:29;6121:20;6126:1;-1:-1:-1;;;6121:4:8;:20::i;:::-;6143:1;6116:4;:29::i;3163:180::-;-1:-1:-1;;;;;;;;;;;;3288:48:8;;;;;;;;3306:28;3311:1;:10;;;3323:1;:10;;;3306:4;:28::i;2609:186::-;2707:7;2748:12;-1:-1:-1;;;2734:12:8;;2726:35;;;;-1:-1:-1;;;2726:35:8;;;;;;;;:::i;4712:125::-;4774:4;-1:-1:-1;;;4797:19:8;4802:1;4805;:10;;;4797:4;:19::i;:::-;:33;;;;:::i;1483:235::-;1611:4;1627:18;1648:15;1653:1;1656:6;1648:4;:15::i;:::-;1627:36;;1680:31;1685:17;1694:7;1685:8;:17::i;:::-;1704:6;1680:4;:31::i;4082:131::-;-1:-1:-1;;;;;;;;;;;;4170:36:8;;;;;;;;4185:19;4190:1;:10;;;4202:1;4185:4;:19::i;832:210::-;1012:12;;889:4;;1012:23;;451:4;;1012:23;:::i;5915:88::-;5968:4;5991:5;5995:1;5991;:5;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;206:367:13:-;269:8;279:6;333:3;326:4;318:6;314:17;310:27;300:55;;351:1;348;341:12;300:55;-1:-1:-1;374:20:13;;417:18;406:30;;403:50;;;449:1;446;439:12;403:50;486:4;478:6;474:17;462:29;;546:3;539:4;529:6;526:1;522:14;514:6;510:27;506:38;503:47;500:67;;;563:1;560;553:12;500:67;206:367;;;;;:::o;578:773::-;700:6;708;716;724;777:2;765:9;756:7;752:23;748:32;745:52;;;793:1;790;783:12;745:52;833:9;820:23;862:18;903:2;895:6;892:14;889:34;;;919:1;916;909:12;889:34;958:70;1020:7;1011:6;1000:9;996:22;958:70;:::i;:::-;1047:8;;-1:-1:-1;932:96:13;-1:-1:-1;1135:2:13;1120:18;;1107:32;;-1:-1:-1;1151:16:13;;;1148:36;;;1180:1;1177;1170:12;1148:36;;1219:72;1283:7;1272:8;1261:9;1257:24;1219:72;:::i;:::-;578:773;;;;-1:-1:-1;1310:8:13;-1:-1:-1;;;;578:773:13:o;1356:139::-;-1:-1:-1;;;;;1439:31:13;;1429:42;;1419:70;;1485:1;1482;1475:12;1500:118;1586:5;1579:13;1572:21;1565:5;1562:32;1552:60;;1608:1;1605;1598:12;1623:405;1703:6;1711;1764:2;1752:9;1743:7;1739:23;1735:32;1732:52;;;1780:1;1777;1770:12;1732:52;1819:9;1806:23;1838:39;1871:5;1838:39;:::i;:::-;1896:5;-1:-1:-1;1953:2:13;1938:18;;1925:32;1966:30;1925:32;1966:30;:::i;:::-;2015:7;2005:17;;;1623:405;;;;;:::o;2033:127::-;2094:10;2089:3;2085:20;2082:1;2075:31;2125:4;2122:1;2115:15;2149:4;2146:1;2139:15;2165:275;2236:2;2230:9;2301:2;2282:13;;-1:-1:-1;;2278:27:13;2266:40;;2336:18;2321:34;;2357:22;;;2318:62;2315:88;;;2383:18;;:::i;:::-;2419:2;2412:22;2165:275;;-1:-1:-1;2165:275:13:o;2445:191::-;2513:4;2546:18;2538:6;2535:30;2532:56;;;2568:18;;:::i;:::-;-1:-1:-1;2613:1:13;2609:14;2625:4;2605:25;;2445:191::o;2641:761::-;2703:5;2756:3;2749:4;2741:6;2737:17;2733:27;2723:55;;2774:1;2771;2764:12;2723:55;2810:6;2797:20;2836:4;2860:68;2876:51;2924:2;2876:51;:::i;:::-;2860:68;:::i;:::-;2962:15;;;3048:1;3044:10;;;;3032:23;;3028:32;;;2993:12;;;;3072:15;;;3069:35;;;3100:1;3097;3090:12;3069:35;3136:2;3128:6;3124:15;3148:225;3164:6;3159:3;3156:15;3148:225;;;3244:3;3231:17;3261:39;3294:5;3261:39;:::i;:::-;3313:18;;3351:12;;;;3181;;3148:225;;;-1:-1:-1;3391:5:13;2641:761;-1:-1:-1;;;;;;2641:761:13:o;3407:514::-;3515:6;3523;3576:2;3564:9;3555:7;3551:23;3547:32;3544:52;;;3592:1;3589;3582:12;3544:52;3631:9;3618:23;3650:39;3683:5;3650:39;:::i;:::-;3708:5;-1:-1:-1;3764:2:13;3749:18;;3736:32;3791:18;3780:30;;3777:50;;;3823:1;3820;3813:12;3777:50;3846:69;3907:7;3898:6;3887:9;3883:22;3846:69;:::i;:::-;3836:79;;;3407:514;;;;;:::o;3926:274::-;4004:6;4057:2;4045:9;4036:7;4032:23;4028:32;4025:52;;;4073:1;4070;4063:12;4025:52;4112:9;4099:23;4131:39;4164:5;4131:39;:::i;4647:691::-;4742:6;4750;4758;4766;4774;4827:3;4815:9;4806:7;4802:23;4798:33;4795:53;;;4844:1;4841;4834:12;4795:53;4883:9;4870:23;4902:39;4935:5;4902:39;:::i;:::-;4960:5;-1:-1:-1;5017:2:13;5002:18;;4989:32;5030:41;4989:32;5030:41;:::i;:::-;5090:7;-1:-1:-1;5149:2:13;5134:18;;5121:32;5162:41;5121:32;5162:41;:::i;:::-;4647:691;;;;-1:-1:-1;5222:7:13;;5276:2;5261:18;;5248:32;;-1:-1:-1;5327:3:13;5312:19;5299:33;;4647:691;-1:-1:-1;;4647:691:13:o;5551:622::-;5637:6;5645;5653;5661;5714:3;5702:9;5693:7;5689:23;5685:33;5682:53;;;5731:1;5728;5721:12;5682:53;5770:9;5757:23;5789:39;5822:5;5789:39;:::i;:::-;5847:5;-1:-1:-1;5904:2:13;5889:18;;5876:32;5917:41;5876:32;5917:41;:::i;:::-;5977:7;-1:-1:-1;6036:2:13;6021:18;;6008:32;6049:41;6008:32;6049:41;:::i;:::-;5551:622;;;;-1:-1:-1;6109:7:13;;6163:2;6148:18;6135:32;;-1:-1:-1;;5551:622:13:o;6178:323::-;6246:6;6254;6307:2;6295:9;6286:7;6282:23;6278:32;6275:52;;;6323:1;6320;6313:12;6275:52;6362:9;6349:23;6381:39;6414:5;6381:39;:::i;:::-;6439:5;6491:2;6476:18;;;;6463:32;;-1:-1:-1;;;6178:323:13:o;6506:241::-;6562:6;6615:2;6603:9;6594:7;6590:23;6586:32;6583:52;;;6631:1;6628;6621:12;6583:52;6670:9;6657:23;6689:28;6711:5;6689:28;:::i;6752:180::-;6811:6;6864:2;6852:9;6843:7;6839:23;6835:32;6832:52;;;6880:1;6877;6870:12;6832:52;-1:-1:-1;6903:23:13;;6752:180;-1:-1:-1;6752:180:13:o;6937:541::-;7023:6;7031;7039;7047;7100:3;7088:9;7079:7;7075:23;7071:33;7068:53;;;7117:1;7114;7107:12;7068:53;7156:9;7143:23;7175:39;7208:5;7175:39;:::i;:::-;7233:5;-1:-1:-1;7290:2:13;7275:18;;7262:32;7303:41;7262:32;7303:41;:::i;:::-;6937:541;;7363:7;;-1:-1:-1;;;;7417:2:13;7402:18;;7389:32;;7468:2;7453:18;7440:32;;6937:541::o;7483:841::-;7587:6;7595;7603;7611;7619;7627;7680:3;7668:9;7659:7;7655:23;7651:33;7648:53;;;7697:1;7694;7687:12;7648:53;7736:9;7723:23;7755:39;7788:5;7755:39;:::i;:::-;7813:5;-1:-1:-1;7870:2:13;7855:18;;7842:32;7883:41;7842:32;7883:41;:::i;:::-;7943:7;-1:-1:-1;8002:2:13;7987:18;;7974:32;8015:41;7974:32;8015:41;:::i;:::-;8075:7;-1:-1:-1;8134:2:13;8119:18;;8106:32;8147:41;8106:32;8147:41;:::i;:::-;7483:841;;;;-1:-1:-1;7483:841:13;;8261:3;8246:19;;8233:33;;8313:3;8298:19;;;8285:33;;-1:-1:-1;7483:841:13;-1:-1:-1;;7483:841:13:o;8653:472::-;8730:6;8738;8746;8799:2;8787:9;8778:7;8774:23;8770:32;8767:52;;;8815:1;8812;8805:12;8767:52;8854:9;8841:23;8873:39;8906:5;8873:39;:::i;:::-;8931:5;-1:-1:-1;8988:2:13;8973:18;;8960:32;9001:41;8960:32;9001:41;:::i;:::-;8653:472;;9061:7;;-1:-1:-1;;;9115:2:13;9100:18;;;;9087:32;;8653:472::o;9633:772::-;9728:6;9736;9744;9752;9760;9813:3;9801:9;9792:7;9788:23;9784:33;9781:53;;;9830:1;9827;9820:12;9781:53;9869:9;9856:23;9888:39;9921:5;9888:39;:::i;:::-;9946:5;-1:-1:-1;10003:2:13;9988:18;;9975:32;10016:41;9975:32;10016:41;:::i;:::-;10076:7;-1:-1:-1;10135:2:13;10120:18;;10107:32;10148:41;10107:32;10148:41;:::i;:::-;10208:7;-1:-1:-1;10267:2:13;10252:18;;10239:32;10280:41;10239:32;10280:41;:::i;:::-;9633:772;;;;-1:-1:-1;9633:772:13;;10394:3;10379:19;10366:33;;9633:772;-1:-1:-1;;9633:772:13:o;11203:753::-;11257:5;11310:3;11303:4;11295:6;11291:17;11287:27;11277:55;;11328:1;11325;11318:12;11277:55;11364:6;11351:20;11390:4;11414:68;11430:51;11478:2;11430:51;:::i;11414:68::-;11516:15;;;11602:1;11598:10;;;;11586:23;;11582:32;;;11547:12;;;;11626:15;;;11623:35;;;11654:1;11651;11644:12;11623:35;11690:2;11682:6;11678:15;11702:225;11718:6;11713:3;11710:15;11702:225;;;11798:3;11785:17;11815:39;11848:5;11815:39;:::i;:::-;11867:18;;11905:12;;;;11735;;11702:225;;11961:883;12106:6;12114;12122;12130;12183:3;12171:9;12162:7;12158:23;12154:33;12151:53;;;12200:1;12197;12190:12;12151:53;12240:9;12227:23;12269:18;12310:2;12302:6;12299:14;12296:34;;;12326:1;12323;12316:12;12296:34;12349:61;12402:7;12393:6;12382:9;12378:22;12349:61;:::i;:::-;12339:71;;12463:2;12452:9;12448:18;12435:32;12419:48;;12492:2;12482:8;12479:16;12476:36;;;12508:1;12505;12498:12;12476:36;;12531:71;12594:7;12583:8;12572:9;12568:24;12531:71;:::i;:::-;12521:81;;;12652:2;12641:9;12637:18;12624:32;12665:28;12687:5;12665:28;:::i;:::-;12712:5;-1:-1:-1;12769:2:13;12754:18;;12741:32;12782:30;12741:32;12782:30;:::i;:::-;11961:883;;;;-1:-1:-1;11961:883:13;;-1:-1:-1;;11961:883:13:o;13715:419::-;13798:6;13806;13859:2;13847:9;13838:7;13834:23;13830:32;13827:52;;;13875:1;13872;13865:12;13827:52;13914:9;13901:23;13933:39;13966:5;13933:39;:::i;:::-;13991:5;-1:-1:-1;14048:2:13;14033:18;;14020:32;14061:41;14020:32;14061:41;:::i;14622:670::-;14676:5;14729:3;14722:4;14714:6;14710:17;14706:27;14696:55;;14747:1;14744;14737:12;14696:55;14783:6;14770:20;14809:4;14833:68;14849:51;14897:2;14849:51;:::i;14833:68::-;14935:15;;;15021:1;15017:10;;;;15005:23;;15001:32;;;14966:12;;;;15045:15;;;15042:35;;;15073:1;15070;15063:12;15042:35;15109:2;15101:6;15097:15;15121:142;15137:6;15132:3;15129:15;15121:142;;;15203:17;;15191:30;;15241:12;;;;15154;;15121:142;;15297:844;15464:6;15472;15480;15533:2;15521:9;15512:7;15508:23;15504:32;15501:52;;;15549:1;15546;15539:12;15501:52;15589:9;15576:23;15618:18;15659:2;15651:6;15648:14;15645:34;;;15675:1;15672;15665:12;15645:34;15698:69;15759:7;15750:6;15739:9;15735:22;15698:69;:::i;:::-;15688:79;;15820:2;15809:9;15805:18;15792:32;15776:48;;15849:2;15839:8;15836:16;15833:36;;;15865:1;15862;15855:12;15833:36;15888:63;15943:7;15932:8;15921:9;15917:24;15888:63;:::i;:::-;15878:73;;16004:2;15993:9;15989:18;15976:32;15960:48;;16033:2;16023:8;16020:16;16017:36;;;16049:1;16046;16039:12;16017:36;;16072:63;16127:7;16116:8;16105:9;16101:24;16072:63;:::i;:::-;16062:73;;;15297:844;;;;;:::o;16146:673::-;16332:2;16384:21;;;16454:13;;16357:18;;;16476:22;;;16303:4;;16332:2;16555:15;;;;16529:2;16514:18;;;16303:4;16598:195;16612:6;16609:1;16606:13;16598:195;;;16677:13;;-1:-1:-1;;;;;16673:39:13;16661:52;;16768:15;;;;16733:12;;;;16709:1;16627:9;16598:195;;;-1:-1:-1;16810:3:13;;16146:673;-1:-1:-1;;;;;;16146:673:13:o;17233:348::-;17317:6;17370:2;17358:9;17349:7;17345:23;17341:32;17338:52;;;17386:1;17383;17376:12;17338:52;17426:9;17413:23;17459:18;17451:6;17448:30;17445:50;;;17491:1;17488;17481:12;17445:50;17514:61;17567:7;17558:6;17547:9;17543:22;17514:61;:::i;17586:632::-;17757:2;17809:21;;;17879:13;;17782:18;;;17901:22;;;17728:4;;17757:2;17980:15;;;;17954:2;17939:18;;;17728:4;18023:169;18037:6;18034:1;18031:13;18023:169;;;18098:13;;18086:26;;18167:15;;;;18132:12;;;;18059:1;18052:9;18023:169;;19970:127;20031:10;20026:3;20022:20;20019:1;20012:31;20062:4;20059:1;20052:15;20086:4;20083:1;20076:15;20102:127;20163:10;20158:3;20154:20;20151:1;20144:31;20194:4;20191:1;20184:15;20218:4;20215:1;20208:15;20234:125;20274:4;20302:1;20299;20296:8;20293:34;;;20307:18;;:::i;:::-;-1:-1:-1;20344:9:13;;20234:125::o;20364:135::-;20403:3;-1:-1:-1;;20424:17:13;;20421:43;;;20444:18;;:::i;:::-;-1:-1:-1;20491:1:13;20480:13;;20364:135::o;20504:404::-;20706:2;20688:21;;;20745:2;20725:18;;;20718:30;20784:34;20779:2;20764:18;;20757:62;-1:-1:-1;;;20850:2:13;20835:18;;20828:38;20898:3;20883:19;;20504:404::o;20913:403::-;21115:2;21097:21;;;21154:2;21134:18;;;21127:30;21193:34;21188:2;21173:18;;21166:62;-1:-1:-1;;;21259:2:13;21244:18;;21237:37;21306:3;21291:19;;20913:403::o;21321:346::-;21523:2;21505:21;;;21562:2;21542:18;;;21535:30;-1:-1:-1;;;21596:2:13;21581:18;;21574:52;21658:2;21643:18;;21321:346::o;22201:259::-;22271:6;22324:2;22312:9;22303:7;22299:23;22295:32;22292:52;;;22340:1;22337;22330:12;22292:52;22372:9;22366:16;22391:39;22424:5;22391:39;:::i;22873:184::-;22943:6;22996:2;22984:9;22975:7;22971:23;22967:32;22964:52;;;23012:1;23009;23002:12;22964:52;-1:-1:-1;23035:16:13;;22873:184;-1:-1:-1;22873:184:13:o;23412:127::-;23473:10;23468:3;23464:20;23461:1;23454:31;23504:4;23501:1;23494:15;23528:4;23525:1;23518:15;29892:245;29959:6;30012:2;30000:9;29991:7;29987:23;29983:32;29980:52;;;30028:1;30025;30018:12;29980:52;30060:9;30054:16;30079:28;30101:5;30079:28;:::i;32231:127::-;32292:10;32287:3;32283:20;32280:1;32273:31;32323:4;32320:1;32313:15;32347:4;32344:1;32337:15;33082:368;33179:6;33187;33195;33203;33256:3;33244:9;33235:7;33231:23;33227:33;33224:53;;;33273:1;33270;33263:12;33224:53;-1:-1:-1;;33296:16:13;;33352:2;33337:18;;33331:25;33396:2;33381:18;;33375:25;33440:2;33425:18;;;33419:25;33296:16;;33331:25;;-1:-1:-1;33419:25:13;;-1:-1:-1;33082:368:13;-1:-1:-1;33082:368:13:o;33861:127::-;33922:10;33917:3;33913:20;33910:1;33903:31;33953:4;33950:1;33943:15;33977:4;33974:1;33967:15;34317:128;34357:3;34388:1;34384:6;34381:1;34378:13;34375:39;;;34394:18;;:::i;:::-;-1:-1:-1;34430:9:13;;34317:128::o;34782:168::-;34822:7;34888:1;34884;34880:6;34876:14;34873:1;34870:21;34865:1;34858:9;34851:17;34847:45;34844:71;;;34895:18;;:::i;:::-;-1:-1:-1;34935:9:13;;34782:168::o;35658:217::-;35698:1;35724;35714:132;;35768:10;35763:3;35759:20;35756:1;35749:31;35803:4;35800:1;35793:15;35831:4;35828:1;35821:15;35714:132;-1:-1:-1;35860:9:13;;35658:217::o;35880:597::-;35992:4;36021:2;36050;36039:9;36032:21;36082:6;36076:13;36125:6;36120:2;36109:9;36105:18;36098:34;36150:1;36160:140;36174:6;36171:1;36168:13;36160:140;;;36269:14;;;36265:23;;36259:30;36235:17;;;36254:2;36231:26;36224:66;36189:10;;36160:140;;;36318:6;36315:1;36312:13;36309:91;;;36388:1;36383:2;36374:6;36363:9;36359:22;36355:31;36348:42;36309:91;-1:-1:-1;36461:2:13;36440:15;-1:-1:-1;;36436:29:13;36421:45;;;;36468:2;36417:54;;35880:597;-1:-1:-1;;;35880:597:13:o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "4312600",
            "executionCost": "29217",
            "totalCost": "4341817"
          },
          "external": {
            "_become(address)": "infinite",
            "_borrowGuardianPaused()": "2449",
            "_grantComp(address,uint256)": "infinite",
            "_mintGuardianPaused()": "2406",
            "_setBorrowCapGuardian(address)": "28212",
            "_setBorrowPaused(address,bool)": "infinite",
            "_setCloseFactor(uint256)": "28116",
            "_setCollateralFactor(address,uint256)": "infinite",
            "_setCompSpeeds(address[],uint256[],uint256[])": "infinite",
            "_setContributorCompSpeed(address,uint256)": "infinite",
            "_setLiquidationIncentive(uint256)": "28149",
            "_setMarketBorrowCaps(address[],uint256[])": "infinite",
            "_setMintPaused(address,bool)": "infinite",
            "_setPauseGuardian(address)": "infinite",
            "_setPriceOracle(address)": "infinite",
            "_setSeizePaused(bool)": "33087",
            "_setTransferPaused(bool)": "33086",
            "_supportMarket(address)": "infinite",
            "accountAssets(address,uint256)": "4845",
            "admin()": "2513",
            "allMarkets(uint256)": "4704",
            "borrowAllowed(address,address,uint256)": "infinite",
            "borrowCapGuardian()": "2450",
            "borrowCaps(address)": "2582",
            "borrowGuardianPaused(address)": "2647",
            "borrowVerify(address,address,uint256)": "infinite",
            "checkMembership(address,address)": "infinite",
            "claimComp(address)": "infinite",
            "claimComp(address,address[])": "infinite",
            "claimComp(address[],address[],bool,bool)": "infinite",
            "closeFactorMantissa()": "2450",
            "compAccrued(address)": "2624",
            "compBorrowSpeeds(address)": "2667",
            "compBorrowState(address)": "2676",
            "compBorrowerIndex(address,address)": "infinite",
            "compContributorSpeeds(address)": "2603",
            "compInitialIndex()": "378",
            "compRate()": "2384",
            "compReceivable(address)": "2648",
            "compSpeeds(address)": "2582",
            "compSupplierIndex(address,address)": "infinite",
            "compSupplySpeeds(address)": "2602",
            "compSupplyState(address)": "2719",
            "comptrollerImplementation()": "2427",
            "enterMarkets(address[])": "infinite",
            "exitMarket(address)": "infinite",
            "fixBadAccruals(address[],uint256[])": "infinite",
            "getAccountLiquidity(address)": "infinite",
            "getAllMarkets()": "infinite",
            "getAssetsIn(address)": "infinite",
            "getBlockNumber()": "325",
            "getCompAddress()": "325",
            "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": "infinite",
            "isComptroller()": "260",
            "isDeprecated(address)": "infinite",
            "lastContributorBlock(address)": "2647",
            "liquidateBorrowAllowed(address,address,address,address,uint256)": "infinite",
            "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": "infinite",
            "liquidateCalculateSeizeTokens(address,address,uint256)": "infinite",
            "liquidationIncentiveMantissa()": "2386",
            "markets(address)": "6902",
            "maxAssets()": "2363",
            "mintAllowed(address,address,uint256)": "infinite",
            "mintGuardianPaused(address)": "2583",
            "mintVerify(address,address,uint256,uint256)": "infinite",
            "oracle()": "2450",
            "pauseGuardian()": "2494",
            "pendingAdmin()": "2406",
            "pendingComptrollerImplementation()": "2426",
            "proposal65FixExecuted()": "2431",
            "redeemAllowed(address,address,uint256)": "infinite",
            "redeemVerify(address,address,uint256,uint256)": "infinite",
            "repayBorrowAllowed(address,address,address,uint256)": "infinite",
            "repayBorrowVerify(address,address,address,uint256,uint256)": "infinite",
            "seizeAllowed(address,address,address,address,uint256)": "infinite",
            "seizeGuardianPaused()": "2449",
            "seizeVerify(address,address,address,address,uint256)": "infinite",
            "transferAllowed(address,address,address,uint256)": "infinite",
            "transferGuardianPaused()": "2473",
            "transferVerify(address,address,address,uint256)": "infinite",
            "updateContributorRewards(address)": "infinite"
          },
          "internal": {
            "_addMarketInternal(address)": "infinite",
            "_initializeMarket(address)": "infinite",
            "addToMarketInternal(contract CToken,address)": "infinite",
            "adminOrInitializing()": "4291",
            "distributeBorrowerComp(address,address,struct ExponentialNoError.Exp memory)": "infinite",
            "distributeSupplierComp(address,address)": "infinite",
            "getAccountLiquidityInternal(address)": "infinite",
            "getHypotheticalAccountLiquidityInternal(address,contract CToken,uint256,uint256)": "infinite",
            "grantCompInternal(address,uint256)": "infinite",
            "redeemAllowedInternal(address,address,uint256)": "infinite",
            "setCompSpeedInternal(contract CToken,uint256,uint256)": "infinite",
            "updateCompBorrowIndex(address,struct ExponentialNoError.Exp memory)": "infinite",
            "updateCompSupplyIndex(address)": "infinite"
          }
        },
        "methodIdentifiers": {
          "_become(address)": "1d504dc6",
          "_borrowGuardianPaused()": "e6653f3d",
          "_grantComp(address,uint256)": "27efe3cb",
          "_mintGuardianPaused()": "3c94786f",
          "_setBorrowCapGuardian(address)": "391957d7",
          "_setBorrowPaused(address,bool)": "18c882a5",
          "_setCloseFactor(uint256)": "317b0b77",
          "_setCollateralFactor(address,uint256)": "e4028eee",
          "_setCompSpeeds(address[],uint256[],uint256[])": "a8b43948",
          "_setContributorCompSpeed(address,uint256)": "598ee1cb",
          "_setLiquidationIncentive(uint256)": "4fd42e17",
          "_setMarketBorrowCaps(address[],uint256[])": "607ef6c1",
          "_setMintPaused(address,bool)": "3bcf7ec1",
          "_setPauseGuardian(address)": "5f5af1aa",
          "_setPriceOracle(address)": "55ee1fe1",
          "_setSeizePaused(bool)": "2d70db78",
          "_setTransferPaused(bool)": "8ebf6364",
          "_supportMarket(address)": "a76b3fda",
          "accountAssets(address,uint256)": "dce15449",
          "admin()": "f851a440",
          "allMarkets(uint256)": "52d84d1e",
          "borrowAllowed(address,address,uint256)": "da3d454c",
          "borrowCapGuardian()": "21af4569",
          "borrowCaps(address)": "4a584432",
          "borrowGuardianPaused(address)": "6d154ea5",
          "borrowVerify(address,address,uint256)": "5c778605",
          "checkMembership(address,address)": "929fe9a1",
          "claimComp(address)": "e9af0292",
          "claimComp(address,address[])": "1c3db2e0",
          "claimComp(address[],address[],bool,bool)": "6810dfa6",
          "closeFactorMantissa()": "e8755446",
          "compAccrued(address)": "cc7ebdc4",
          "compBorrowSpeeds(address)": "f4a433c0",
          "compBorrowState(address)": "8c57804e",
          "compBorrowerIndex(address,address)": "ca0af043",
          "compContributorSpeeds(address)": "986ab838",
          "compInitialIndex()": "a7f0e231",
          "compRate()": "aa900754",
          "compReceivable(address)": "85b7beb8",
          "compSpeeds(address)": "1d7b33d7",
          "compSupplierIndex(address,address)": "b21be7fd",
          "compSupplySpeeds(address)": "6aa875b5",
          "compSupplyState(address)": "6b79c38d",
          "comptrollerImplementation()": "bb82aa5e",
          "enterMarkets(address[])": "c2998238",
          "exitMarket(address)": "ede4edd0",
          "fixBadAccruals(address[],uint256[])": "16b95e8f",
          "getAccountLiquidity(address)": "5ec88c79",
          "getAllMarkets()": "b0772d0b",
          "getAssetsIn(address)": "abfceffc",
          "getBlockNumber()": "42cbb15c",
          "getCompAddress()": "9d1b5a0a",
          "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": "4e79238f",
          "isComptroller()": "007e3dd2",
          "isDeprecated(address)": "94543c15",
          "lastContributorBlock(address)": "bea6b8b8",
          "liquidateBorrowAllowed(address,address,address,address,uint256)": "5fc7e71e",
          "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": "47ef3b3b",
          "liquidateCalculateSeizeTokens(address,address,uint256)": "c488847b",
          "liquidationIncentiveMantissa()": "4ada90af",
          "markets(address)": "8e8f294b",
          "maxAssets()": "94b2294b",
          "mintAllowed(address,address,uint256)": "4ef4c3e1",
          "mintGuardianPaused(address)": "731f0c2b",
          "mintVerify(address,address,uint256,uint256)": "41c728b9",
          "oracle()": "7dc0d1d0",
          "pauseGuardian()": "24a3d622",
          "pendingAdmin()": "26782247",
          "pendingComptrollerImplementation()": "dcfbc0c7",
          "proposal65FixExecuted()": "f00a7a92",
          "redeemAllowed(address,address,uint256)": "eabe7d91",
          "redeemVerify(address,address,uint256,uint256)": "51dff989",
          "repayBorrowAllowed(address,address,address,uint256)": "24008a62",
          "repayBorrowVerify(address,address,address,uint256,uint256)": "1ededc91",
          "seizeAllowed(address,address,address,address,uint256)": "d02f7351",
          "seizeGuardianPaused()": "ac0b0bb7",
          "seizeVerify(address,address,address,address,uint256)": "6d35bf91",
          "transferAllowed(address,address,address,uint256)": "bdcdc258",
          "transferGuardianPaused()": "87f76303",
          "transferVerify(address,address,address,uint256)": "6a56947e",
          "updateContributorRewards(address)": "741b2525"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCompAccrued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCompAccrued\",\"type\":\"uint256\"}],\"name\":\"CompAccruedAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"CompBorrowSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCompReceivable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCompReceivable\",\"type\":\"uint256\"}],\"name\":\"CompReceivableUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"CompSupplySpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"ContributorCompSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedBorrowerComp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compSupplyIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedSupplierComp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"MarketListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"NewBorrowCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBorrowCapGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"NewBorrowCapGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCloseFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCloseFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCollateralFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationIncentiveMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPauseGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"NewPauseGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"oldPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract Unitroller\",\"name\":\"unitroller\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_grantComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"_setBorrowCapGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setBorrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"supplySpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowSpeeds\",\"type\":\"uint256[]\"}],\"name\":\"_setCompSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"compSpeed\",\"type\":\"uint256\"}],\"name\":\"_setContributorCompSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setMintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setSeizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setTransferPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"_supportMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowCapGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"checkMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"claimComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"borrowers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"suppliers\",\"type\":\"bool\"}],\"name\":\"claimComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compContributorSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compInitialIndex\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compReceivable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplySpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplyState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"affectedUsers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"fixBadAccruals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAssetsIn\",\"outputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCompAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenModify\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"getHypotheticalAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isComptroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"isDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastContributorBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculateSeizeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isComped\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"mintVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposal65FixExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowerIndex\",\"type\":\"uint256\"}],\"name\":\"repayBorrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seizeGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"updateContributorRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound\",\"kind\":\"dev\",\"methods\":{\"_grantComp(address,uint256)\":{\"details\":\"Note: If there is not enough COMP, we do not perform the transfer all.\",\"params\":{\"amount\":\"The amount of COMP to (possibly) transfer\",\"recipient\":\"The address of the recipient to transfer COMP to\"}},\"_setBorrowCapGuardian(address)\":{\"params\":{\"newBorrowCapGuardian\":\"The address of the new Borrow Cap Guardian\"}},\"_setCloseFactor(uint256)\":{\"details\":\"Admin function to set closeFactor\",\"params\":{\"newCloseFactorMantissa\":\"New close factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure\"}},\"_setCollateralFactor(address,uint256)\":{\"details\":\"Admin function to set per-market collateralFactor\",\"params\":{\"cToken\":\"The market to set the factor on\",\"newCollateralFactorMantissa\":\"The new collateral factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setCompSpeeds(address[],uint256[],uint256[])\":{\"params\":{\"borrowSpeeds\":\"New borrow-side COMP speed for the corresponding market.\",\"cTokens\":\"The markets whose COMP speed to update.\",\"supplySpeeds\":\"New supply-side COMP speed for the corresponding market.\"}},\"_setContributorCompSpeed(address,uint256)\":{\"params\":{\"compSpeed\":\"New COMP speed for contributor\",\"contributor\":\"The contributor whose COMP speed to update\"}},\"_setLiquidationIncentive(uint256)\":{\"details\":\"Admin function to set liquidationIncentive\",\"params\":{\"newLiquidationIncentiveMantissa\":\"New liquidationIncentive scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setMarketBorrowCaps(address[],uint256[])\":{\"details\":\"Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\",\"params\":{\"cTokens\":\"The addresses of the markets (tokens) to change the borrow caps for\",\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\"}},\"_setPauseGuardian(address)\":{\"params\":{\"newPauseGuardian\":\"The address of the new Pause Guardian\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"_setPriceOracle(address)\":{\"details\":\"Admin function to set a new price oracle\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_supportMarket(address)\":{\"details\":\"Admin function to set isListed and add support for the market\",\"params\":{\"cToken\":\"The address of the market (token) to list\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"borrowAllowed(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of underlying the account would borrow\",\"borrower\":\"The account which would borrow the asset\",\"cToken\":\"The market to verify the borrow against\"},\"returns\":{\"_0\":\"0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"borrowVerify(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of the underlying asset requested to borrow\",\"borrower\":\"The address borrowing the underlying\",\"cToken\":\"Asset whose underlying is being borrowed\"}},\"checkMembership(address,address)\":{\"params\":{\"account\":\"The address of the account to check\",\"cToken\":\"The cToken to check\"},\"returns\":{\"_0\":\"True if the account is in the asset, otherwise false.\"}},\"claimComp(address)\":{\"params\":{\"holder\":\"The address to claim COMP for\"}},\"claimComp(address,address[])\":{\"params\":{\"cTokens\":\"The list of markets to claim COMP in\",\"holder\":\"The address to claim COMP for\"}},\"claimComp(address[],address[],bool,bool)\":{\"params\":{\"borrowers\":\"Whether or not to claim COMP earned by borrowing\",\"cTokens\":\"The list of markets to claim COMP in\",\"holders\":\"The addresses to claim COMP for\",\"suppliers\":\"Whether or not to claim COMP earned by supplying\"}},\"enterMarkets(address[])\":{\"params\":{\"cTokens\":\"The list of addresses of the cToken markets to be enabled\"},\"returns\":{\"_0\":\"Success indicator for whether each corresponding market was entered\"}},\"exitMarket(address)\":{\"details\":\"Sender must not have an outstanding borrow balance in the asset,  or be providing necessary collateral for an outstanding borrow.\",\"params\":{\"cTokenAddress\":\"The address of the asset to be removed\"},\"returns\":{\"_0\":\"Whether or not the account successfully exited the market\"}},\"getAccountLiquidity(address)\":{\"returns\":{\"_0\":\"(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)\"}},\"getAllMarkets()\":{\"details\":\"The automatic getter may be used to access an individual market.\",\"returns\":{\"_0\":\"The list of market addresses\"}},\"getAssetsIn(address)\":{\"params\":{\"account\":\"The address of the account to pull assets for\"},\"returns\":{\"_0\":\"A dynamic list with the assets the account has entered\"}},\"getCompAddress()\":{\"returns\":{\"_0\":\"The address of MARE\"}},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"params\":{\"account\":\"The account to determine liquidity for\",\"borrowAmount\":\"The amount of underlying to hypothetically borrow\",\"cTokenModify\":\"The market to hypothetically redeem/borrow in\",\"redeemTokens\":\"The number of tokens to hypothetically redeem\"},\"returns\":{\"_0\":\"(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,          hypothetical account shortfall below collateral requirements)\"}},\"isDeprecated(address)\":{\"details\":\"All borrows in a deprecated cToken market can be immediately liquidated\",\"params\":{\"cToken\":\"The market to check if deprecated\"}},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"repayAmount\":\"The amount of underlying being repaid\"}},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\"}},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"details\":\"Used in liquidation (called in cToken.liquidateBorrowFresh)\",\"params\":{\"actualRepayAmount\":\"The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\",\"cTokenBorrowed\":\"The address of the borrowed cToken\",\"cTokenCollateral\":\"The address of the collateral cToken\"},\"returns\":{\"_0\":\"(errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\"}},\"mintAllowed(address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the mint against\",\"mintAmount\":\"The amount of underlying being supplied to the market in exchange for tokens\",\"minter\":\"The account which would get the minted tokens\"},\"returns\":{\"_0\":\"0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"mintVerify(address,address,uint256,uint256)\":{\"params\":{\"actualMintAmount\":\"The amount of the underlying asset being minted\",\"cToken\":\"Asset being minted\",\"mintTokens\":\"The number of tokens being minted\",\"minter\":\"The address minting the tokens\"}},\"redeemAllowed(address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the redeem against\",\"redeemTokens\":\"The number of cTokens to exchange for the underlying asset in the market\",\"redeemer\":\"The account which would redeem the tokens\"},\"returns\":{\"_0\":\"0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"redeemVerify(address,address,uint256,uint256)\":{\"params\":{\"cToken\":\"Asset being redeemed\",\"redeemAmount\":\"The amount of the underlying asset being redeemed\",\"redeemTokens\":\"The number of tokens being redeemed\",\"redeemer\":\"The address redeeming the tokens\"}},\"repayBorrowAllowed(address,address,address,uint256)\":{\"params\":{\"borrower\":\"The account which would borrowed the asset\",\"cToken\":\"The market to verify the repay against\",\"payer\":\"The account which would repay the asset\",\"repayAmount\":\"The amount of the underlying asset the account would repay\"},\"returns\":{\"_0\":\"0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"cToken\":\"Asset being repaid\",\"payer\":\"The address repaying the borrow\"}},\"seizeAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\"}},\"seizeVerify(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\"}},\"transferAllowed(address,address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the transfer against\",\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of cTokens to transfer\"},\"returns\":{\"_0\":\"0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"transferVerify(address,address,address,uint256)\":{\"params\":{\"cToken\":\"Asset being transferred\",\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of cTokens to transfer\"}},\"updateContributorRewards(address)\":{\"params\":{\"contributor\":\"The address to calculate contributor rewards for\"}}},\"title\":\"Compound's Comptroller Contract\",\"version\":1},\"userdoc\":{\"events\":{\"ActionPaused(address,string,bool)\":{\"notice\":\"Emitted when an action is paused on a market\"},\"ActionPaused(string,bool)\":{\"notice\":\"Emitted when an action is paused globally\"},\"CompAccruedAdjusted(address,uint256,uint256)\":{\"notice\":\"Emitted when COMP accrued for a user has been manually adjusted.\"},\"CompBorrowSpeedUpdated(address,uint256)\":{\"notice\":\"Emitted when a new borrow-side COMP speed is calculated for a market\"},\"CompGranted(address,uint256)\":{\"notice\":\"Emitted when COMP is granted by admin\"},\"CompReceivableUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when COMP receivable for a user has been updated.\"},\"CompSupplySpeedUpdated(address,uint256)\":{\"notice\":\"Emitted when a new supply-side COMP speed is calculated for a market\"},\"ContributorCompSpeedUpdated(address,uint256)\":{\"notice\":\"Emitted when a new COMP speed is set for a contributor\"},\"DistributedBorrowerComp(address,address,uint256,uint256)\":{\"notice\":\"Emitted when COMP is distributed to a borrower\"},\"DistributedSupplierComp(address,address,uint256,uint256)\":{\"notice\":\"Emitted when COMP is distributed to a supplier\"},\"MarketEntered(address,address)\":{\"notice\":\"Emitted when an account enters a market\"},\"MarketExited(address,address)\":{\"notice\":\"Emitted when an account exits a market\"},\"MarketListed(address)\":{\"notice\":\"Emitted when an admin supports a market\"},\"NewBorrowCap(address,uint256)\":{\"notice\":\"Emitted when borrow cap for a cToken is changed\"},\"NewBorrowCapGuardian(address,address)\":{\"notice\":\"Emitted when borrow cap guardian is changed\"},\"NewCloseFactor(uint256,uint256)\":{\"notice\":\"Emitted when close factor is changed by admin\"},\"NewCollateralFactor(address,uint256,uint256)\":{\"notice\":\"Emitted when a collateral factor is changed by admin\"},\"NewLiquidationIncentive(uint256,uint256)\":{\"notice\":\"Emitted when liquidation incentive is changed by admin\"},\"NewPauseGuardian(address,address)\":{\"notice\":\"Emitted when pause guardian is changed\"},\"NewPriceOracle(address,address)\":{\"notice\":\"Emitted when price oracle is changed\"}},\"kind\":\"user\",\"methods\":{\"_grantComp(address,uint256)\":{\"notice\":\"Transfer COMP to the recipient\"},\"_setBorrowCapGuardian(address)\":{\"notice\":\"Admin function to change the Borrow Cap Guardian\"},\"_setCloseFactor(uint256)\":{\"notice\":\"Sets the closeFactor used when liquidating borrows\"},\"_setCollateralFactor(address,uint256)\":{\"notice\":\"Sets the collateralFactor for a market\"},\"_setCompSpeeds(address[],uint256[],uint256[])\":{\"notice\":\"Set COMP borrow and supply speeds for the specified markets.\"},\"_setContributorCompSpeed(address,uint256)\":{\"notice\":\"Set COMP speed for a single contributor\"},\"_setLiquidationIncentive(uint256)\":{\"notice\":\"Sets liquidationIncentive\"},\"_setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\"},\"_setPauseGuardian(address)\":{\"notice\":\"Admin function to change the Pause Guardian\"},\"_setPriceOracle(address)\":{\"notice\":\"Sets a new price oracle for the comptroller\"},\"_supportMarket(address)\":{\"notice\":\"Add the market to the markets mapping and set it as listed\"},\"accountAssets(address,uint256)\":{\"notice\":\"Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"allMarkets(uint256)\":{\"notice\":\"A list of all markets\"},\"borrowAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to borrow the underlying asset of the given market\"},\"borrowVerify(address,address,uint256)\":{\"notice\":\"Validates borrow and reverts on rejection. May emit logs.\"},\"checkMembership(address,address)\":{\"notice\":\"Returns whether the given account is entered in the given asset\"},\"claimComp(address)\":{\"notice\":\"Claim all the comp accrued by holder in all markets\"},\"claimComp(address,address[])\":{\"notice\":\"Claim all the comp accrued by holder in the specified markets\"},\"claimComp(address[],address[],bool,bool)\":{\"notice\":\"Claim all comp accrued by the holders\"},\"closeFactorMantissa()\":{\"notice\":\"Multiplier used to calculate the maximum repayAmount when liquidating a borrow\"},\"compAccrued(address)\":{\"notice\":\"The COMP accrued but not yet transferred to each user\"},\"compBorrowSpeeds(address)\":{\"notice\":\"The rate at which comp is distributed to the corresponding borrow market (per block)\"},\"compBorrowState(address)\":{\"notice\":\"The COMP market borrow state for each market\"},\"compBorrowerIndex(address,address)\":{\"notice\":\"The COMP borrow index for each market for each borrower as of the last time they accrued COMP\"},\"compContributorSpeeds(address)\":{\"notice\":\"The portion of COMP that each contributor receives per block\"},\"compInitialIndex()\":{\"notice\":\"The initial COMP index for a market\"},\"compRate()\":{\"notice\":\"The rate at which the flywheel distributes COMP, per block\"},\"compReceivable(address)\":{\"notice\":\"Accounting storage mapping account addresses to how much COMP they owe the protocol.\"},\"compSpeeds(address)\":{\"notice\":\"The portion of compRate that each market currently receives\"},\"compSupplierIndex(address,address)\":{\"notice\":\"The COMP borrow index for each market for each supplier as of the last time they accrued COMP\"},\"compSupplySpeeds(address)\":{\"notice\":\"The rate at which comp is distributed to the corresponding supply market (per block)\"},\"compSupplyState(address)\":{\"notice\":\"The COMP market supply state for each market\"},\"comptrollerImplementation()\":{\"notice\":\"Active brains of Unitroller\"},\"enterMarkets(address[])\":{\"notice\":\"Add assets to be included in account liquidity calculation\"},\"exitMarket(address)\":{\"notice\":\"Removes asset from sender's account liquidity calculation\"},\"fixBadAccruals(address[],uint256[])\":{\"notice\":\"Delete this function after proposal 65 is executed\"},\"getAccountLiquidity(address)\":{\"notice\":\"Determine the current account liquidity wrt collateral requirements\"},\"getAllMarkets()\":{\"notice\":\"Return all of the markets\"},\"getAssetsIn(address)\":{\"notice\":\"Returns the assets an account has entered\"},\"getCompAddress()\":{\"notice\":\"Return the address of the MARE token\"},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"notice\":\"Determine what the account liquidity would be if the given amounts were redeemed/borrowed\"},\"isComptroller()\":{\"notice\":\"Indicator that this is a Comptroller contract (for inspection)\"},\"isDeprecated(address)\":{\"notice\":\"Returns true if the given cToken market has been deprecated\"},\"lastContributorBlock(address)\":{\"notice\":\"Last block at which a contributor's COMP rewards have been allocated\"},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the liquidation should be allowed to occur\"},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"notice\":\"Validates liquidateBorrow and reverts on rejection. May emit logs.\"},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"notice\":\"Calculate number of tokens of collateral asset to seize given an underlying amount\"},\"liquidationIncentiveMantissa()\":{\"notice\":\"Multiplier representing the discount on collateral that a liquidator receives\"},\"markets(address)\":{\"notice\":\"Official mapping of cTokens -> Market metadata\"},\"maxAssets()\":{\"notice\":\"Max number of assets a single account can participate in (borrow or use as collateral)\"},\"mintAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to mint tokens in the given market\"},\"mintVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates mint and reverts on rejection. May emit logs.\"},\"oracle()\":{\"notice\":\"Oracle which gives the price of any given asset\"},\"pauseGuardian()\":{\"notice\":\"The Pause Guardian can pause certain actions as a safety mechanism.  Actions which allow users to remove their own assets cannot be paused.  Liquidation / seizing / transfer can only be paused globally, not by market.\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"pendingComptrollerImplementation()\":{\"notice\":\"Pending brains of Unitroller\"},\"proposal65FixExecuted()\":{\"notice\":\"Flag indicating whether the function to fix COMP accruals has been executed (RE: proposal 62 bug)\"},\"redeemAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to redeem tokens in the given market\"},\"redeemVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates redeem and reverts on rejection. May emit logs.\"},\"repayBorrowAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to repay a borrow in the given market\"},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"notice\":\"Validates repayBorrow and reverts on rejection. May emit logs.\"},\"seizeAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the seizing of assets should be allowed to occur\"},\"seizeVerify(address,address,address,address,uint256)\":{\"notice\":\"Validates seize and reverts on rejection. May emit logs.\"},\"transferAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to transfer tokens in the given market\"},\"transferVerify(address,address,address,uint256)\":{\"notice\":\"Validates transfer and reverts on rejection. May emit logs.\"},\"updateContributorRewards(address)\":{\"notice\":\"Calculate additional accrued COMP for a contributor since last accrual\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Comptroller.sol\":\"Comptroller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\nabstract contract CToken is\\n    CTokenInterface,\\n    ExponentialNoError,\\n    TokenErrorReporter\\n{\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint256 initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(\\n            accrualBlockNumber == 0 && borrowIndex == 0,\\n            \\\"market may only be initialized once\\\"\\n        );\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(\\n            initialExchangeRateMantissa > 0,\\n            \\\"initial exchange rate must be greater than zero.\\\"\\n        );\\n\\n        // Set the comptroller\\n        uint256 err = _setComptroller(comptroller_);\\n        require(err == NO_ERROR, \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == NO_ERROR, \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return 0 if the transfer succeeded, else revert\\n     */\\n    function transferTokens(\\n        address spender,\\n        address src,\\n        address dst,\\n        uint256 tokens\\n    ) internal returns (uint256) {\\n        /* Fail if transfer not allowed */\\n        uint256 allowed = comptroller.transferAllowed(\\n            address(this),\\n            src,\\n            dst,\\n            tokens\\n        );\\n        if (allowed != 0) {\\n            revert TransferComptrollerRejection(allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            revert TransferNotAllowed();\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint256 startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = type(uint256).max;\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        uint256 allowanceNew = startingAllowance - tokens;\\n        uint256 srcTokensNew = accountTokens[src] - tokens;\\n        uint256 dstTokensNew = accountTokens[dst] + tokens;\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != type(uint256).max) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        // unused function\\n        // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(\\n        address dst,\\n        uint256 amount\\n    ) external override nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external override nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (uint256.max means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view override returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(\\n        address owner\\n    ) external override returns (uint256) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(\\n        address account\\n    ) external view override returns (uint256, uint256, uint256, uint256) {\\n        return (\\n            NO_ERROR,\\n            accountTokens[account],\\n            borrowBalanceStoredInternal(account),\\n            exchangeRateStoredInternal()\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view override returns (uint256) {\\n        return\\n            interestRateModel.getBorrowRate(\\n                getCashPrior(),\\n                totalBorrows,\\n                totalReserves\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view override returns (uint256) {\\n        return\\n            interestRateModel.getSupplyRate(\\n                getCashPrior(),\\n                totalBorrows,\\n                totalReserves,\\n                reserveFactorMantissa\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent()\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        accrueInterest();\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(\\n        address account\\n    ) external override nonReentrant returns (uint256) {\\n        accrueInterest();\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(\\n        address account\\n    ) public view override returns (uint256) {\\n        return borrowBalanceStoredInternal(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(\\n        address account\\n    ) internal view returns (uint256) {\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return 0;\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        uint256 principalTimesIndex = borrowSnapshot.principal * borrowIndex;\\n        return principalTimesIndex / borrowSnapshot.interestIndex;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent()\\n        public\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        accrueInterest();\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view override returns (uint256) {\\n        return exchangeRateStoredInternal();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStoredInternal()\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return initialExchangeRateMantissa;\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint256 totalCash = getCashPrior();\\n            uint256 cashPlusBorrowsMinusReserves = totalCash +\\n                totalBorrows -\\n                totalReserves;\\n            uint256 exchangeRate = (cashPlusBorrowsMinusReserves * expScale) /\\n                _totalSupply;\\n\\n            return exchangeRate;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view override returns (uint256) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public virtual override returns (uint256) {\\n        /* Remember the initial block number */\\n        uint256 currentBlockNumber = getBlockNumber();\\n        uint256 accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return NO_ERROR;\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint256 cashPrior = getCashPrior();\\n        uint256 borrowsPrior = totalBorrows;\\n        uint256 reservesPrior = totalReserves;\\n        uint256 borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate(\\n            cashPrior,\\n            borrowsPrior,\\n            reservesPrior\\n        );\\n        require(\\n            borrowRateMantissa <= borrowRateMaxMantissa,\\n            \\\"borrow rate is absurdly high\\\"\\n        );\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        uint256 blockDelta = currentBlockNumber - accrualBlockNumberPrior;\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor = mul_(\\n            Exp({mantissa: borrowRateMantissa}),\\n            blockDelta\\n        );\\n        uint256 interestAccumulated = mul_ScalarTruncate(\\n            simpleInterestFactor,\\n            borrowsPrior\\n        );\\n        uint256 totalBorrowsNew = interestAccumulated + borrowsPrior;\\n        uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\\n            Exp({mantissa: reserveFactorMantissa}),\\n            interestAccumulated,\\n            reservesPrior\\n        );\\n        uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(\\n            simpleInterestFactor,\\n            borrowIndexPrior,\\n            borrowIndexPrior\\n        );\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(\\n            cashPrior,\\n            interestAccumulated,\\n            borrowIndexNew,\\n            totalBorrowsNew\\n        );\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     */\\n    function mintInternal(uint256 mintAmount) internal nonReentrant {\\n        accrueInterest();\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     */\\n    function mintFresh(address minter, uint256 mintAmount) internal {\\n        /* Fail if mint not allowed */\\n        uint256 allowed = comptroller.mintAllowed(\\n            address(this),\\n            minter,\\n            mintAmount\\n        );\\n        if (allowed != 0) {\\n            revert MintComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert MintFreshnessCheck();\\n        }\\n\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        uint256 actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        uint256 mintTokens = div_(actualMintAmount, exchangeRate);\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         * And write them into storage\\n         */\\n        totalSupply = totalSupply + mintTokens;\\n        accountTokens[minter] = accountTokens[minter] + mintTokens;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, actualMintAmount, mintTokens);\\n        emit Transfer(address(this), minter, mintTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.mintVerify(address(this), minter, actualMintAmount, mintTokens);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     */\\n    function redeemInternal(uint256 redeemTokens) internal nonReentrant {\\n        accrueInterest();\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        redeemFresh(payable(msg.sender), redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     */\\n    function redeemUnderlyingInternal(\\n        uint256 redeemAmount\\n    ) internal nonReentrant {\\n        accrueInterest();\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        redeemFresh(payable(msg.sender), 0, redeemAmount);\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     */\\n    function redeemFresh(\\n        address payable redeemer,\\n        uint256 redeemTokensIn,\\n        uint256 redeemAmountIn\\n    ) internal {\\n        require(\\n            redeemTokensIn == 0 || redeemAmountIn == 0,\\n            \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\"\\n        );\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\n\\n        uint256 redeemTokens;\\n        uint256 redeemAmount;\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            redeemTokens = redeemTokensIn;\\n            redeemAmount = mul_ScalarTruncate(exchangeRate, redeemTokensIn);\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n            redeemTokens = div_(redeemAmountIn, exchangeRate);\\n            redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint256 allowed = comptroller.redeemAllowed(\\n            address(this),\\n            redeemer,\\n            redeemTokens\\n        );\\n        if (allowed != 0) {\\n            revert RedeemComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert RedeemFreshnessCheck();\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < redeemAmount) {\\n            revert RedeemTransferOutNotPossible();\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We write the previously calculated values into storage.\\n         *  Note: Avoid token reentrancy attacks by writing reduced supply before external transfer.\\n         */\\n        totalSupply = totalSupply - redeemTokens;\\n        accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens;\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, redeemAmount);\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), redeemTokens);\\n        emit Redeem(redeemer, redeemAmount, redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(\\n            address(this),\\n            redeemer,\\n            redeemAmount,\\n            redeemTokens\\n        );\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     */\\n    function borrowInternal(uint256 borrowAmount) internal nonReentrant {\\n        accrueInterest();\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        borrowFresh(payable(msg.sender), borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Users borrow assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     */\\n    function borrowFresh(\\n        address payable borrower,\\n        uint256 borrowAmount\\n    ) internal {\\n        /* Fail if borrow not allowed */\\n        uint256 allowed = comptroller.borrowAllowed(\\n            address(this),\\n            borrower,\\n            borrowAmount\\n        );\\n        if (allowed != 0) {\\n            revert BorrowComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert BorrowFreshnessCheck();\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            revert BorrowCashNotAvailable();\\n        }\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowNew = accountBorrow + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n        uint256 accountBorrowsNew = accountBorrowsPrev + borrowAmount;\\n        uint256 totalBorrowsNew = totalBorrows + borrowAmount;\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We write the previously calculated values into storage.\\n         *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\\n        `*/\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = totalBorrowsNew;\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n     */\\n    function repayBorrowInternal(uint256 repayAmount) internal nonReentrant {\\n        accrueInterest();\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n     */\\n    function repayBorrowBehalfInternal(\\n        address borrower,\\n        uint256 repayAmount\\n    ) internal nonReentrant {\\n        accrueInterest();\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\\n     * @return (uint) the actual repayment amount.\\n     */\\n    function repayBorrowFresh(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) internal returns (uint256) {\\n        /* Fail if repayBorrow not allowed */\\n        uint256 allowed = comptroller.repayBorrowAllowed(\\n            address(this),\\n            payer,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            revert RepayBorrowComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert RepayBorrowFreshnessCheck();\\n        }\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        uint256 repayAmountFinal = repayAmount == type(uint256).max\\n            ? accountBorrowsPrev\\n            : repayAmount;\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        uint256 actualRepayAmount = doTransferIn(payer, repayAmountFinal);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        uint256 accountBorrowsNew = accountBorrowsPrev - actualRepayAmount;\\n        uint256 totalBorrowsNew = totalBorrows - actualRepayAmount;\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(\\n            payer,\\n            borrower,\\n            actualRepayAmount,\\n            accountBorrowsNew,\\n            totalBorrowsNew\\n        );\\n\\n        return actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     */\\n    function liquidateBorrowInternal(\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) internal nonReentrant {\\n        accrueInterest();\\n\\n        uint256 error = cTokenCollateral.accrueInterest();\\n        if (error != NO_ERROR) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            revert LiquidateAccrueCollateralInterestFailed(error);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        liquidateBorrowFresh(\\n            msg.sender,\\n            borrower,\\n            repayAmount,\\n            cTokenCollateral\\n        );\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     */\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) internal {\\n        /* Fail if liquidate not allowed */\\n        uint256 allowed = comptroller.liquidateBorrowAllowed(\\n            address(this),\\n            address(cTokenCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            revert LiquidateComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert LiquidateFreshnessCheck();\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            revert LiquidateCollateralFreshnessCheck();\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            revert LiquidateLiquidatorIsBorrower();\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            revert LiquidateCloseAmountIsZero();\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == type(uint256).max) {\\n            revert LiquidateCloseAmountIsUintMax();\\n        }\\n\\n        /* Fail if repayBorrow fails */\\n        uint256 actualRepayAmount = repayBorrowFresh(\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint256 amountSeizeError, uint256 seizeTokens) = comptroller\\n            .liquidateCalculateSeizeTokens(\\n                address(this),\\n                address(cTokenCollateral),\\n                actualRepayAmount\\n            );\\n        require(\\n            amountSeizeError == NO_ERROR,\\n            \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\"\\n        );\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(\\n            cTokenCollateral.balanceOf(borrower) >= seizeTokens,\\n            \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\"\\n        );\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            require(\\n                cTokenCollateral.seize(liquidator, borrower, seizeTokens) ==\\n                    NO_ERROR,\\n                \\\"token seizure failed\\\"\\n            );\\n        }\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(\\n            liquidator,\\n            borrower,\\n            actualRepayAmount,\\n            address(cTokenCollateral),\\n            seizeTokens\\n        );\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external override nonReentrant returns (uint256) {\\n        seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) internal {\\n        /* Fail if seize not allowed */\\n        uint256 allowed = comptroller.seizeAllowed(\\n            address(this),\\n            seizerToken,\\n            liquidator,\\n            borrower,\\n            seizeTokens\\n        );\\n        if (allowed != 0) {\\n            revert LiquidateSeizeComptrollerRejection(allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            revert LiquidateSeizeLiquidatorIsBorrower();\\n        }\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        uint256 protocolSeizeTokens = mul_(\\n            seizeTokens,\\n            Exp({mantissa: protocolSeizeShareMantissa})\\n        );\\n        uint256 liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens;\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\n        uint256 protocolSeizeAmount = mul_ScalarTruncate(\\n            exchangeRate,\\n            protocolSeizeTokens\\n        );\\n        uint256 totalReservesNew = totalReserves + protocolSeizeAmount;\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the calculated values into storage */\\n        totalReserves = totalReservesNew;\\n        totalSupply = totalSupply - protocolSeizeTokens;\\n        accountTokens[borrower] = accountTokens[borrower] - seizeTokens;\\n        accountTokens[liquidator] =\\n            accountTokens[liquidator] +\\n            liquidatorSeizeTokens;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, liquidatorSeizeTokens);\\n        emit Transfer(borrower, address(this), protocolSeizeTokens);\\n        emit ReservesAdded(\\n            address(this),\\n            protocolSeizeAmount,\\n            totalReservesNew\\n        );\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPendingAdmin(\\n        address payable newPendingAdmin\\n    ) external override returns (uint256) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            revert SetPendingAdminOwnerCheck();\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptAdmin() external override returns (uint256) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            revert AcceptAdminPendingAdminCheck();\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = payable(address(0));\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Sets a new comptroller for the market\\n     * @dev Admin function to set a new comptroller\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setComptroller(\\n        ComptrollerInterface newComptroller\\n    ) public override returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            revert SetComptrollerOwnerCheck();\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n     * @dev Admin function to accrue interest and set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactor(\\n        uint256 newReserveFactorMantissa\\n    ) external override nonReentrant returns (uint256) {\\n        accrueInterest();\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n     * @dev Admin function to set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactorFresh(\\n        uint256 newReserveFactorMantissa\\n    ) internal returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            revert SetReserveFactorAdminCheck();\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert SetReserveFactorFreshCheck();\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            revert SetReserveFactorBoundsCheck();\\n        }\\n\\n        uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(\\n            oldReserveFactorMantissa,\\n            newReserveFactorMantissa\\n        );\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(\\n        uint256 addAmount\\n    ) internal nonReentrant returns (uint256) {\\n        accrueInterest();\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        _addReservesFresh(addAmount);\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(\\n        uint256 addAmount\\n    ) internal returns (uint256, uint256) {\\n        // totalReserves + actualAddAmount\\n        uint256 totalReservesNew;\\n        uint256 actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert AddReservesFactorFreshCheck(actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (NO_ERROR, actualAddAmount);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(\\n        uint256 reduceAmount\\n    ) external override nonReentrant returns (uint256) {\\n        accrueInterest();\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(\\n        uint256 reduceAmount\\n    ) internal returns (uint256) {\\n        // totalReserves - reduceAmount\\n        uint256 totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            revert ReduceReservesAdminCheck();\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert ReduceReservesFreshCheck();\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            revert ReduceReservesCashNotAvailable();\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            revert ReduceReservesCashValidation();\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(admin, reduceAmount);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(\\n        InterestRateModel newInterestRateModel\\n    ) public override returns (uint256) {\\n        accrueInterest();\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(\\n        InterestRateModel newInterestRateModel\\n    ) internal returns (uint256) {\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            revert SetInterestRateModelOwnerCheck();\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert SetInterestRateModelFreshCheck();\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(\\n            newInterestRateModel.isInterestRateModel(),\\n            \\\"marker method returned false\\\"\\n        );\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(\\n            oldInterestRateModel,\\n            newInterestRateModel\\n        );\\n\\n        return NO_ERROR;\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(\\n        address from,\\n        uint256 amount\\n    ) internal virtual returns (uint256);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint256 amount) internal virtual;\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0x609e4149b89ca9fdc8a92b18b65819cc5a65aab17ad7158820d7af6973ca63dd\",\"license\":\"BSD-3-Clause\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    // Maximum borrow rate that can ever be applied (.0005% / block)\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    // Maximum fraction of interest that can be set aside for reserves\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    // Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    // Official record of token balances for each account\\n    mapping(address => uint) internal accountTokens;\\n\\n    // Approved token transfer amounts on behalf of others\\n    mapping(address => mapping(address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    // Mapping of account addresses to outstanding borrow balances\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    /**\\n     * @notice Share of seized collateral that is added to reserves\\n     */\\n    uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n}\\n\\nabstract contract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(\\n        uint cashPrior,\\n        uint interestAccumulated,\\n        uint borrowIndex,\\n        uint totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(\\n        address borrower,\\n        uint borrowAmount,\\n        uint accountBorrows,\\n        uint totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint accountBorrows,\\n        uint totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        address cTokenCollateral,\\n        uint seizeTokens\\n    );\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(\\n        ComptrollerInterface oldComptroller,\\n        ComptrollerInterface newComptroller\\n    );\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(\\n        InterestRateModel oldInterestRateModel,\\n        InterestRateModel newInterestRateModel\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(\\n        uint oldReserveFactorMantissa,\\n        uint newReserveFactorMantissa\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(\\n        address benefactor,\\n        uint addAmount,\\n        uint newTotalReserves\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(\\n        address admin,\\n        uint reduceAmount,\\n        uint newTotalReserves\\n    );\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external virtual returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint amount\\n    ) external virtual returns (bool);\\n\\n    function approve(\\n        address spender,\\n        uint amount\\n    ) external virtual returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view virtual returns (uint);\\n\\n    function balanceOf(address owner) external view virtual returns (uint);\\n\\n    function balanceOfUnderlying(address owner) external virtual returns (uint);\\n\\n    function getAccountSnapshot(\\n        address account\\n    ) external view virtual returns (uint, uint, uint, uint);\\n\\n    function borrowRatePerBlock() external view virtual returns (uint);\\n\\n    function supplyRatePerBlock() external view virtual returns (uint);\\n\\n    function totalBorrowsCurrent() external virtual returns (uint);\\n\\n    function borrowBalanceCurrent(\\n        address account\\n    ) external virtual returns (uint);\\n\\n    function borrowBalanceStored(\\n        address account\\n    ) external view virtual returns (uint);\\n\\n    function exchangeRateCurrent() external virtual returns (uint);\\n\\n    function exchangeRateStored() external view virtual returns (uint);\\n\\n    function getCash() external view virtual returns (uint);\\n\\n    function accrueInterest() external virtual returns (uint);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external virtual returns (uint);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(\\n        address payable newPendingAdmin\\n    ) external virtual returns (uint);\\n\\n    function _acceptAdmin() external virtual returns (uint);\\n\\n    function _setComptroller(\\n        ComptrollerInterface newComptroller\\n    ) external virtual returns (uint);\\n\\n    function _setReserveFactor(\\n        uint newReserveFactorMantissa\\n    ) external virtual returns (uint);\\n\\n    function _reduceReserves(uint reduceAmount) external virtual returns (uint);\\n\\n    function _setInterestRateModel(\\n        InterestRateModel newInterestRateModel\\n    ) external virtual returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\nabstract contract CErc20Interface is CErc20Storage {\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external virtual returns (uint);\\n\\n    function redeem(uint redeemTokens) external virtual returns (uint);\\n\\n    function redeemUnderlying(\\n        uint redeemAmount\\n    ) external virtual returns (uint);\\n\\n    function borrow(uint borrowAmount) external virtual returns (uint);\\n\\n    function repayBorrow(uint repayAmount) external virtual returns (uint);\\n\\n    function repayBorrowBehalf(\\n        address borrower,\\n        uint repayAmount\\n    ) external virtual returns (uint);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) external virtual returns (uint);\\n\\n    function sweepToken(EIP20NonStandardInterface token) external virtual;\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external virtual returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\nabstract contract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(\\n        address oldImplementation,\\n        address newImplementation\\n    );\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(\\n        address implementation_,\\n        bool allowResign,\\n        bytes memory becomeImplementationData\\n    ) external virtual;\\n}\\n\\nabstract contract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) external virtual;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() external virtual;\\n}\\n\",\"keccak256\":\"0x76a4d573740d78dda5e06b36de05f1a2271132025712cbe2c9c178a30b17597b\",\"license\":\"BSD-3-Clause\"},\"contracts/Comptroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./Unitroller.sol\\\";\\nimport \\\"./Governance/Comp.sol\\\";\\n\\n/**\\n * @title Compound's Comptroller Contract\\n * @author Compound\\n */\\ncontract Comptroller is\\n    ComptrollerV7Storage,\\n    ComptrollerInterface,\\n    ComptrollerErrorReporter,\\n    ExponentialNoError\\n{\\n    /// @notice Emitted when an admin supports a market\\n    event MarketListed(CToken cToken);\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(CToken cToken, address account);\\n\\n    /// @notice Emitted when an account exits a market\\n    event MarketExited(CToken cToken, address account);\\n\\n    /// @notice Emitted when close factor is changed by admin\\n    event NewCloseFactor(\\n        uint256 oldCloseFactorMantissa,\\n        uint256 newCloseFactorMantissa\\n    );\\n\\n    /// @notice Emitted when a collateral factor is changed by admin\\n    event NewCollateralFactor(\\n        CToken cToken,\\n        uint256 oldCollateralFactorMantissa,\\n        uint256 newCollateralFactorMantissa\\n    );\\n\\n    /// @notice Emitted when liquidation incentive is changed by admin\\n    event NewLiquidationIncentive(\\n        uint256 oldLiquidationIncentiveMantissa,\\n        uint256 newLiquidationIncentiveMantissa\\n    );\\n\\n    /// @notice Emitted when price oracle is changed\\n    event NewPriceOracle(\\n        PriceOracle oldPriceOracle,\\n        PriceOracle newPriceOracle\\n    );\\n\\n    /// @notice Emitted when pause guardian is changed\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n    /// @notice Emitted when an action is paused globally\\n    event ActionPaused(string action, bool pauseState);\\n\\n    /// @notice Emitted when an action is paused on a market\\n    event ActionPaused(CToken cToken, string action, bool pauseState);\\n\\n    /// @notice Emitted when a new borrow-side COMP speed is calculated for a market\\n    event CompBorrowSpeedUpdated(CToken indexed cToken, uint256 newSpeed);\\n\\n    /// @notice Emitted when a new supply-side COMP speed is calculated for a market\\n    event CompSupplySpeedUpdated(CToken indexed cToken, uint256 newSpeed);\\n\\n    /// @notice Emitted when a new COMP speed is set for a contributor\\n    event ContributorCompSpeedUpdated(\\n        address indexed contributor,\\n        uint256 newSpeed\\n    );\\n\\n    /// @notice Emitted when COMP is distributed to a supplier\\n    event DistributedSupplierComp(\\n        CToken indexed cToken,\\n        address indexed supplier,\\n        uint256 compDelta,\\n        uint256 compSupplyIndex\\n    );\\n\\n    /// @notice Emitted when COMP is distributed to a borrower\\n    event DistributedBorrowerComp(\\n        CToken indexed cToken,\\n        address indexed borrower,\\n        uint256 compDelta,\\n        uint256 compBorrowIndex\\n    );\\n\\n    /// @notice Emitted when borrow cap for a cToken is changed\\n    event NewBorrowCap(CToken indexed cToken, uint256 newBorrowCap);\\n\\n    /// @notice Emitted when borrow cap guardian is changed\\n    event NewBorrowCapGuardian(\\n        address oldBorrowCapGuardian,\\n        address newBorrowCapGuardian\\n    );\\n\\n    /// @notice Emitted when COMP is granted by admin\\n    event CompGranted(address recipient, uint256 amount);\\n\\n    /// @notice Emitted when COMP accrued for a user has been manually adjusted.\\n    event CompAccruedAdjusted(\\n        address indexed user,\\n        uint256 oldCompAccrued,\\n        uint256 newCompAccrued\\n    );\\n\\n    /// @notice Emitted when COMP receivable for a user has been updated.\\n    event CompReceivableUpdated(\\n        address indexed user,\\n        uint256 oldCompReceivable,\\n        uint256 newCompReceivable\\n    );\\n\\n    /// @notice The initial COMP index for a market\\n    uint224 public constant compInitialIndex = 1e36;\\n\\n    // closeFactorMantissa must be strictly greater than this value\\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\n\\n    // closeFactorMantissa must not exceed this value\\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // No collateralFactorMantissa may exceed this value\\n    uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    constructor() {\\n        admin = msg.sender;\\n    }\\n\\n    /*** Assets You Are In ***/\\n\\n    /**\\n     * @notice Returns the assets an account has entered\\n     * @param account The address of the account to pull assets for\\n     * @return A dynamic list with the assets the account has entered\\n     */\\n    function getAssetsIn(\\n        address account\\n    ) external view returns (CToken[] memory) {\\n        CToken[] memory assetsIn = accountAssets[account];\\n\\n        return assetsIn;\\n    }\\n\\n    /**\\n     * @notice Returns whether the given account is entered in the given asset\\n     * @param account The address of the account to check\\n     * @param cToken The cToken to check\\n     * @return True if the account is in the asset, otherwise false.\\n     */\\n    function checkMembership(\\n        address account,\\n        CToken cToken\\n    ) external view returns (bool) {\\n        return markets[address(cToken)].accountMembership[account];\\n    }\\n\\n    /**\\n     * @notice Add assets to be included in account liquidity calculation\\n     * @param cTokens The list of addresses of the cToken markets to be enabled\\n     * @return Success indicator for whether each corresponding market was entered\\n     */\\n    function enterMarkets(\\n        address[] memory cTokens\\n    ) public override returns (uint256[] memory) {\\n        uint256 len = cTokens.length;\\n\\n        uint256[] memory results = new uint256[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            CToken cToken = CToken(cTokens[i]);\\n\\n            results[i] = uint256(addToMarketInternal(cToken, msg.sender));\\n        }\\n\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n     * @param cToken The market to enter\\n     * @param borrower The address of the account to modify\\n     * @return Success indicator for whether the market was entered\\n     */\\n    function addToMarketInternal(\\n        CToken cToken,\\n        address borrower\\n    ) internal returns (Error) {\\n        Market storage marketToJoin = markets[address(cToken)];\\n\\n        if (!marketToJoin.isListed) {\\n            // market is not listed, cannot join\\n            return Error.MARKET_NOT_LISTED;\\n        }\\n\\n        if (marketToJoin.accountMembership[borrower] == true) {\\n            // already joined\\n            return Error.NO_ERROR;\\n        }\\n\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if an account is in a particular market\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(cToken);\\n\\n        emit MarketEntered(cToken, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Removes asset from sender's account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *  or be providing necessary collateral for an outstanding borrow.\\n     * @param cTokenAddress The address of the asset to be removed\\n     * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarket(\\n        address cTokenAddress\\n    ) external override returns (uint256) {\\n        CToken cToken = CToken(cTokenAddress);\\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\\n        (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken\\n            .getAccountSnapshot(msg.sender);\\n        require(oErr == 0, \\\"exitMarket: getAccountSnapshot failed\\\"); // semi-opaque error code\\n\\n        /* Fail if the sender has a borrow balance */\\n        if (amountOwed != 0) {\\n            return\\n                fail(\\n                    Error.NONZERO_BORROW_BALANCE,\\n                    FailureInfo.EXIT_MARKET_BALANCE_OWED\\n                );\\n        }\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        uint256 allowed = redeemAllowedInternal(\\n            cTokenAddress,\\n            msg.sender,\\n            tokensHeld\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.REJECTION,\\n                    FailureInfo.EXIT_MARKET_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        Market storage marketToExit = markets[address(cToken)];\\n\\n        /* Return true if the sender is not already \\u2018in\\u2019 the market */\\n        if (!marketToExit.accountMembership[msg.sender]) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Set cToken account membership to false */\\n        delete marketToExit.accountMembership[msg.sender];\\n\\n        /* Delete cToken from the account\\u2019s list of assets */\\n        // load into memory for faster iteration\\n        CToken[] memory userAssetList = accountAssets[msg.sender];\\n        uint256 len = userAssetList.length;\\n        uint256 assetIndex = len;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (userAssetList[i] == cToken) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        assert(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        CToken[] storage storedList = accountAssets[msg.sender];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.pop();\\n\\n        emit MarketExited(cToken, msg.sender);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /*** Policy Hooks ***/\\n\\n    /**\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\n     * @param cToken The market to verify the mint against\\n     * @param minter The account which would get the minted tokens\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external override returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!mintGuardianPaused[cToken], \\\"mint is paused\\\");\\n\\n        // Shh - currently unused\\n        minter;\\n        mintAmount;\\n\\n        if (!markets[cToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cToken);\\n        distributeSupplierComp(cToken, minter);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates mint and reverts on rejection. May emit logs.\\n     * @param cToken Asset being minted\\n     * @param minter The address minting the tokens\\n     * @param actualMintAmount The amount of the underlying asset being minted\\n     * @param mintTokens The number of tokens being minted\\n     */\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 actualMintAmount,\\n        uint256 mintTokens\\n    ) external override {\\n        // Shh - currently unused\\n        cToken;\\n        minter;\\n        actualMintAmount;\\n        mintTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\n     * @param cToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external override returns (uint256) {\\n        uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\\n        if (allowed != uint256(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cToken);\\n        distributeSupplierComp(cToken, redeemer);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    function redeemAllowedInternal(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) internal view returns (uint256) {\\n        if (!markets[cToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!markets[cToken].accountMembership[redeemer]) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (\\n            Error err,\\n            ,\\n            uint256 shortfall\\n        ) = getHypotheticalAccountLiquidityInternal(\\n                redeemer,\\n                CToken(cToken),\\n                redeemTokens,\\n                0\\n            );\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\n     * @param cToken Asset being redeemed\\n     * @param redeemer The address redeeming the tokens\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\n     * @param redeemTokens The number of tokens being redeemed\\n     */\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external override {\\n        // Shh - currently unused\\n        cToken;\\n        redeemer;\\n\\n        // Require tokens is zero or amount is also zero\\n        if (redeemTokens == 0 && redeemAmount > 0) {\\n            revert(\\\"redeemTokens zero\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param cToken The market to verify the borrow against\\n     * @param borrower The account which would borrow the asset\\n     * @param borrowAmount The amount of underlying the account would borrow\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external override returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!borrowGuardianPaused[cToken], \\\"borrow is paused\\\");\\n\\n        if (!markets[cToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (!markets[cToken].accountMembership[borrower]) {\\n            // only cTokens may call borrowAllowed if borrower not in market\\n            require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n            // attempt to add borrower to the market\\n            Error err = addToMarketInternal(CToken(msg.sender), borrower);\\n            if (err != Error.NO_ERROR) {\\n                return uint256(err);\\n            }\\n\\n            // it should be impossible to break the important invariant\\n            assert(markets[cToken].accountMembership[borrower]);\\n        }\\n\\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\\n            return uint256(Error.PRICE_ERROR);\\n        }\\n\\n        uint256 borrowCap = borrowCaps[cToken];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint256 totalBorrows = CToken(cToken).totalBorrows();\\n            uint256 nextTotalBorrows = add_(totalBorrows, borrowAmount);\\n            require(nextTotalBorrows < borrowCap, \\\"market borrow cap reached\\\");\\n        }\\n\\n        (\\n            Error err,\\n            ,\\n            uint256 shortfall\\n        ) = getHypotheticalAccountLiquidityInternal(\\n                borrower,\\n                CToken(cToken),\\n                0,\\n                borrowAmount\\n            );\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        // Keep the flywheel moving\\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\\n        updateCompBorrowIndex(cToken, borrowIndex);\\n        distributeBorrowerComp(cToken, borrower, borrowIndex);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates borrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset whose underlying is being borrowed\\n     * @param borrower The address borrowing the underlying\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\n     */\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external override {\\n        // Shh - currently unused\\n        cToken;\\n        borrower;\\n        borrowAmount;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param cToken The market to verify the repay against\\n     * @param payer The account which would repay the asset\\n     * @param borrower The account which would borrowed the asset\\n     * @param repayAmount The amount of the underlying asset the account would repay\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external override returns (uint256) {\\n        // Shh - currently unused\\n        payer;\\n        borrower;\\n        repayAmount;\\n\\n        if (!markets[cToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Keep the flywheel moving\\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\\n        updateCompBorrowIndex(cToken, borrowIndex);\\n        distributeBorrowerComp(cToken, borrower, borrowIndex);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset being repaid\\n     * @param payer The address repaying the borrow\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 actualRepayAmount,\\n        uint256 borrowerIndex\\n    ) external override {\\n        // Shh - currently unused\\n        cToken;\\n        payer;\\n        borrower;\\n        actualRepayAmount;\\n        borrowerIndex;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the liquidation should be allowed to occur\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external override returns (uint256) {\\n        // Shh - currently unused\\n        liquidator;\\n\\n        if (\\n            !markets[cTokenBorrowed].isListed ||\\n            !markets[cTokenCollateral].isListed\\n        ) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        uint256 borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(\\n            borrower\\n        );\\n\\n        /* allow accounts to be liquidated if the market is deprecated */\\n        if (isDeprecated(CToken(cTokenBorrowed))) {\\n            require(\\n                borrowBalance >= repayAmount,\\n                \\\"Can not repay more than the total borrow\\\"\\n            );\\n        } else {\\n            /* The borrower must have shortfall in order to be liquidatable */\\n            (Error err, , uint256 shortfall) = getAccountLiquidityInternal(\\n                borrower\\n            );\\n            if (err != Error.NO_ERROR) {\\n                return uint256(err);\\n            }\\n\\n            if (shortfall == 0) {\\n                return uint256(Error.INSUFFICIENT_SHORTFALL);\\n            }\\n\\n            /* The liquidator may not repay more than what is allowed by the closeFactor */\\n            uint256 maxClose = mul_ScalarTruncate(\\n                Exp({mantissa: closeFactorMantissa}),\\n                borrowBalance\\n            );\\n            if (repayAmount > maxClose) {\\n                return uint256(Error.TOO_MUCH_REPAY);\\n            }\\n        }\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 actualRepayAmount,\\n        uint256 seizeTokens\\n    ) external override {\\n        // Shh - currently unused\\n        cTokenBorrowed;\\n        cTokenCollateral;\\n        liquidator;\\n        borrower;\\n        actualRepayAmount;\\n        seizeTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the seizing of assets should be allowed to occur\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external override returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!seizeGuardianPaused, \\\"seize is paused\\\");\\n\\n        // Shh - currently unused\\n        seizeTokens;\\n\\n        if (\\n            !markets[cTokenCollateral].isListed ||\\n            !markets[cTokenBorrowed].isListed\\n        ) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (\\n            CToken(cTokenCollateral).comptroller() !=\\n            CToken(cTokenBorrowed).comptroller()\\n        ) {\\n            return uint256(Error.COMPTROLLER_MISMATCH);\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cTokenCollateral);\\n        distributeSupplierComp(cTokenCollateral, borrower);\\n        distributeSupplierComp(cTokenCollateral, liquidator);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates seize and reverts on rejection. May emit logs.\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external override {\\n        // Shh - currently unused\\n        cTokenCollateral;\\n        cTokenBorrowed;\\n        liquidator;\\n        borrower;\\n        seizeTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param cToken The market to verify the transfer against\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external override returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!transferGuardianPaused, \\\"transfer is paused\\\");\\n\\n        // Currently the only consideration is whether or not\\n        //  the src is allowed to redeem this many tokens\\n        uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\\n        if (allowed != uint256(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cToken);\\n        distributeSupplierComp(cToken, src);\\n        distributeSupplierComp(cToken, dst);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates transfer and reverts on rejection. May emit logs.\\n     * @param cToken Asset being transferred\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     */\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external override {\\n        // Shh - currently unused\\n        cToken;\\n        src;\\n        dst;\\n        transferTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountLiquidityLocalVars {\\n        uint256 sumCollateral;\\n        uint256 sumBorrowPlusEffects;\\n        uint256 cTokenBalance;\\n        uint256 borrowBalance;\\n        uint256 exchangeRateMantissa;\\n        uint256 oraclePriceMantissa;\\n        Exp collateralFactor;\\n        Exp exchangeRate;\\n        Exp oraclePrice;\\n        Exp tokensToDenom;\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidity(\\n        address account\\n    ) public view returns (uint256, uint256, uint256) {\\n        (\\n            Error err,\\n            uint256 liquidity,\\n            uint256 shortfall\\n        ) = getHypotheticalAccountLiquidityInternal(\\n                account,\\n                CToken(address(0)),\\n                0,\\n                0\\n            );\\n\\n        return (uint256(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code,\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidityInternal(\\n        address account\\n    ) internal view returns (Error, uint256, uint256) {\\n        return\\n            getHypotheticalAccountLiquidityInternal(\\n                account,\\n                CToken(address(0)),\\n                0,\\n                0\\n            );\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address cTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    ) public view returns (uint256, uint256, uint256) {\\n        (\\n            Error err,\\n            uint256 liquidity,\\n            uint256 shortfall\\n        ) = getHypotheticalAccountLiquidityInternal(\\n                account,\\n                CToken(cTokenModify),\\n                redeemTokens,\\n                borrowAmount\\n            );\\n        return (uint256(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        CToken cTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    ) internal view returns (Error, uint256, uint256) {\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n        uint256 oErr;\\n\\n        // For each asset the account is in\\n        CToken[] memory assets = accountAssets[account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            CToken asset = assets[i];\\n\\n            // Read the balances and exchange rate from the cToken\\n            (\\n                oErr,\\n                vars.cTokenBalance,\\n                vars.borrowBalance,\\n                vars.exchangeRateMantissa\\n            ) = asset.getAccountSnapshot(account);\\n            if (oErr != 0) {\\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n                return (Error.SNAPSHOT_ERROR, 0, 0);\\n            }\\n            vars.collateralFactor = Exp({\\n                mantissa: markets[address(asset)].collateralFactorMantissa\\n            });\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\n\\n            // Get the normalized price of the asset\\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\n            if (vars.oraclePriceMantissa == 0) {\\n                return (Error.PRICE_ERROR, 0, 0);\\n            }\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\n\\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n            vars.tokensToDenom = mul_(\\n                mul_(vars.collateralFactor, vars.exchangeRate),\\n                vars.oraclePrice\\n            );\\n\\n            // sumCollateral += tokensToDenom * cTokenBalance\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(\\n                vars.tokensToDenom,\\n                vars.cTokenBalance,\\n                vars.sumCollateral\\n            );\\n\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                vars.oraclePrice,\\n                vars.borrowBalance,\\n                vars.sumBorrowPlusEffects\\n            );\\n\\n            // Calculate effects of interacting with cTokenModify\\n            if (asset == cTokenModify) {\\n                // redeem effect\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                    vars.tokensToDenom,\\n                    redeemTokens,\\n                    vars.sumBorrowPlusEffects\\n                );\\n\\n                // borrow effect\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                    vars.oraclePrice,\\n                    borrowAmount,\\n                    vars.sumBorrowPlusEffects\\n                );\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n            return (\\n                Error.NO_ERROR,\\n                vars.sumCollateral - vars.sumBorrowPlusEffects,\\n                0\\n            );\\n        } else {\\n            return (\\n                Error.NO_ERROR,\\n                0,\\n                vars.sumBorrowPlusEffects - vars.sumCollateral\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\\n     * @param cTokenBorrowed The address of the borrowed cToken\\n     * @param cTokenCollateral The address of the collateral cToken\\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\\n     */\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 actualRepayAmount\\n    ) external view override returns (uint256, uint256) {\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(\\n            CToken(cTokenBorrowed)\\n        );\\n        uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(\\n            CToken(cTokenCollateral)\\n        );\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n            return (uint256(Error.PRICE_ERROR), 0);\\n        }\\n\\n        /*\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n         *  seizeTokens = seizeAmount / exchangeRate\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n         */\\n        uint256 exchangeRateMantissa = CToken(cTokenCollateral)\\n            .exchangeRateStored(); // Note: reverts on error\\n        uint256 seizeTokens;\\n        Exp memory numerator;\\n        Exp memory denominator;\\n        Exp memory ratio;\\n\\n        numerator = mul_(\\n            Exp({mantissa: liquidationIncentiveMantissa}),\\n            Exp({mantissa: priceBorrowedMantissa})\\n        );\\n        denominator = mul_(\\n            Exp({mantissa: priceCollateralMantissa}),\\n            Exp({mantissa: exchangeRateMantissa})\\n        );\\n        ratio = div_(numerator, denominator);\\n\\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n\\n        return (uint256(Error.NO_ERROR), seizeTokens);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Sets a new price oracle for the comptroller\\n     * @dev Admin function to set a new price oracle\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK\\n                );\\n        }\\n\\n        // Track the old oracle for the comptroller\\n        PriceOracle oldOracle = oracle;\\n\\n        // Set comptroller's oracle to newOracle\\n        oracle = newOracle;\\n\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\n        emit NewPriceOracle(oldOracle, newOracle);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the closeFactor used when liquidating borrows\\n     * @dev Admin function to set closeFactor\\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n     * @return uint 0=success, otherwise a failure\\n     */\\n    function _setCloseFactor(\\n        uint256 newCloseFactorMantissa\\n    ) external returns (uint256) {\\n        // Check caller is admin\\n        require(msg.sender == admin, \\\"only admin can set close factor\\\");\\n\\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\\n        closeFactorMantissa = newCloseFactorMantissa;\\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the collateralFactor for a market\\n     * @dev Admin function to set per-market collateralFactor\\n     * @param cToken The market to set the factor on\\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function _setCollateralFactor(\\n        CToken cToken,\\n        uint256 newCollateralFactorMantissa\\n    ) external returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK\\n                );\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_LISTED,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS\\n                );\\n        }\\n\\n        Exp memory newCollateralFactorExp = Exp({\\n            mantissa: newCollateralFactorMantissa\\n        });\\n\\n        // Check collateral factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n            return\\n                fail(\\n                    Error.INVALID_COLLATERAL_FACTOR,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION\\n                );\\n        }\\n\\n        // If collateral factor != 0, fail if price == 0\\n        if (\\n            newCollateralFactorMantissa != 0 &&\\n            oracle.getUnderlyingPrice(cToken) == 0\\n        ) {\\n            return\\n                fail(\\n                    Error.PRICE_ERROR,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE\\n                );\\n        }\\n\\n        // Set market's collateral factor to new collateral factor, remember old value\\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n        // Emit event with asset, old collateral factor, and new collateral factor\\n        emit NewCollateralFactor(\\n            cToken,\\n            oldCollateralFactorMantissa,\\n            newCollateralFactorMantissa\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets liquidationIncentive\\n     * @dev Admin function to set liquidationIncentive\\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function _setLiquidationIncentive(\\n        uint256 newLiquidationIncentiveMantissa\\n    ) external returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK\\n                );\\n        }\\n\\n        // Save current value for use in log\\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\n\\n        // Set liquidation incentive to new incentive\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        // Emit event with old incentive, new incentive\\n        emit NewLiquidationIncentive(\\n            oldLiquidationIncentiveMantissa,\\n            newLiquidationIncentiveMantissa\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Add the market to the markets mapping and set it as listed\\n     * @dev Admin function to set isListed and add support for the market\\n     * @param cToken The address of the market (token) to list\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _supportMarket(CToken cToken) external returns (uint256) {\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\\n                );\\n        }\\n\\n        if (markets[address(cToken)].isListed) {\\n            return\\n                fail(\\n                    Error.MARKET_ALREADY_LISTED,\\n                    FailureInfo.SUPPORT_MARKET_EXISTS\\n                );\\n        }\\n\\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\\n\\n        // Note that isComped is not in active use anymore\\n        Market storage newMarket = markets[address(cToken)];\\n        newMarket.isListed = true;\\n        newMarket.isComped = false;\\n        newMarket.collateralFactorMantissa = 0;\\n\\n        _addMarketInternal(address(cToken));\\n        _initializeMarket(address(cToken));\\n\\n        emit MarketListed(cToken);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    function _addMarketInternal(address cToken) internal {\\n        for (uint256 i = 0; i < allMarkets.length; i++) {\\n            require(allMarkets[i] != CToken(cToken), \\\"market already added\\\");\\n        }\\n        allMarkets.push(CToken(cToken));\\n    }\\n\\n    function _initializeMarket(address cToken) internal {\\n        uint32 blockNumber = safe32(\\n            getBlockNumber(),\\n            \\\"block number exceeds 32 bits\\\"\\n        );\\n\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n\\n        /*\\n         * Update market state indices\\n         */\\n        if (supplyState.index == 0) {\\n            // Initialize supply state index with default value\\n            supplyState.index = compInitialIndex;\\n        }\\n\\n        if (borrowState.index == 0) {\\n            // Initialize borrow state index with default value\\n            borrowState.index = compInitialIndex;\\n        }\\n\\n        /*\\n         * Update market state block numbers\\n         */\\n        supplyState.block = borrowState.block = blockNumber;\\n    }\\n\\n    /**\\n     * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n     * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n     * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n     */\\n    function _setMarketBorrowCaps(\\n        CToken[] calldata cTokens,\\n        uint256[] calldata newBorrowCaps\\n    ) external {\\n        require(\\n            msg.sender == admin || msg.sender == borrowCapGuardian,\\n            \\\"only admin or borrow cap guardian can set borrow caps\\\"\\n        );\\n\\n        uint256 numMarkets = cTokens.length;\\n        uint256 numBorrowCaps = newBorrowCaps.length;\\n\\n        require(\\n            numMarkets != 0 && numMarkets == numBorrowCaps,\\n            \\\"invalid input\\\"\\n        );\\n\\n        for (uint256 i = 0; i < numMarkets; i++) {\\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Borrow Cap Guardian\\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\n     */\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\n        require(msg.sender == admin, \\\"only admin can set borrow cap guardian\\\");\\n\\n        // Save current value for inclusion in log\\n        address oldBorrowCapGuardian = borrowCapGuardian;\\n\\n        // Store borrowCapGuardian with value newBorrowCapGuardian\\n        borrowCapGuardian = newBorrowCapGuardian;\\n\\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _setPauseGuardian(\\n        address newPauseGuardian\\n    ) public returns (uint256) {\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK\\n                );\\n        }\\n\\n        // Save current value for inclusion in log\\n        address oldPauseGuardian = pauseGuardian;\\n\\n        // Store pauseGuardian with value newPauseGuardian\\n        pauseGuardian = newPauseGuardian;\\n\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\\n        require(\\n            markets[address(cToken)].isListed,\\n            \\\"cannot pause a market that is not listed\\\"\\n        );\\n        require(\\n            msg.sender == pauseGuardian || msg.sender == admin,\\n            \\\"only pause guardian and admin can pause\\\"\\n        );\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        mintGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Mint\\\", state);\\n        return state;\\n    }\\n\\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\\n        require(\\n            markets[address(cToken)].isListed,\\n            \\\"cannot pause a market that is not listed\\\"\\n        );\\n        require(\\n            msg.sender == pauseGuardian || msg.sender == admin,\\n            \\\"only pause guardian and admin can pause\\\"\\n        );\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        borrowGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Borrow\\\", state);\\n        return state;\\n    }\\n\\n    function _setTransferPaused(bool state) public returns (bool) {\\n        require(\\n            msg.sender == pauseGuardian || msg.sender == admin,\\n            \\\"only pause guardian and admin can pause\\\"\\n        );\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        transferGuardianPaused = state;\\n        emit ActionPaused(\\\"Transfer\\\", state);\\n        return state;\\n    }\\n\\n    function _setSeizePaused(bool state) public returns (bool) {\\n        require(\\n            msg.sender == pauseGuardian || msg.sender == admin,\\n            \\\"only pause guardian and admin can pause\\\"\\n        );\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        seizeGuardianPaused = state;\\n        emit ActionPaused(\\\"Seize\\\", state);\\n        return state;\\n    }\\n\\n    function _become(Unitroller unitroller) public {\\n        require(\\n            msg.sender == unitroller.admin(),\\n            \\\"only unitroller admin can change brains\\\"\\n        );\\n        require(\\n            unitroller._acceptImplementation() == 0,\\n            \\\"change not authorized\\\"\\n        );\\n    }\\n\\n    /// @notice Delete this function after proposal 65 is executed\\n    function fixBadAccruals(\\n        address[] calldata affectedUsers,\\n        uint256[] calldata amounts\\n    ) external {\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\"); // Only the timelock can call this function\\n        require(\\n            !proposal65FixExecuted,\\n            \\\"Already executed this one-off function\\\"\\n        ); // Require that this function is only called once\\n        require(affectedUsers.length == amounts.length, \\\"Invalid input\\\");\\n\\n        // Loop variables\\n        address user;\\n        uint256 currentAccrual;\\n        uint256 amountToSubtract;\\n        uint256 newAccrual;\\n\\n        // Iterate through all affected users\\n        for (uint256 i = 0; i < affectedUsers.length; ++i) {\\n            user = affectedUsers[i];\\n            currentAccrual = compAccrued[user];\\n\\n            amountToSubtract = amounts[i];\\n\\n            // The case where the user has claimed and received an incorrect amount of COMP.\\n            // The user has less currently accrued than the amount they incorrectly received.\\n            if (amountToSubtract > currentAccrual) {\\n                // Amount of COMP the user owes the protocol\\n                uint256 accountReceivable = amountToSubtract - currentAccrual; // Underflow safe since amountToSubtract > currentAccrual\\n\\n                uint256 oldReceivable = compReceivable[user];\\n                uint256 newReceivable = add_(oldReceivable, accountReceivable);\\n\\n                // Accounting: record the COMP debt for the user\\n                compReceivable[user] = newReceivable;\\n\\n                emit CompReceivableUpdated(user, oldReceivable, newReceivable);\\n\\n                amountToSubtract = currentAccrual;\\n            }\\n\\n            if (amountToSubtract > 0) {\\n                // Subtract the bad accrual amount from what they have accrued.\\n                // Users will keep whatever they have correctly accrued.\\n                compAccrued[user] = newAccrual = sub_(\\n                    currentAccrual,\\n                    amountToSubtract\\n                );\\n\\n                emit CompAccruedAdjusted(user, currentAccrual, newAccrual);\\n            }\\n        }\\n\\n        proposal65FixExecuted = true; // Makes it so that this function cannot be called again\\n    }\\n\\n    /**\\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\\n     */\\n    function adminOrInitializing() internal view returns (bool) {\\n        return msg.sender == admin || msg.sender == comptrollerImplementation;\\n    }\\n\\n    /*** Comp Distribution ***/\\n\\n    /**\\n     * @notice Set COMP speed for a single market\\n     * @param cToken The market whose COMP speed to update\\n     * @param supplySpeed New supply-side COMP speed for market\\n     * @param borrowSpeed New borrow-side COMP speed for market\\n     */\\n    function setCompSpeedInternal(\\n        CToken cToken,\\n        uint256 supplySpeed,\\n        uint256 borrowSpeed\\n    ) internal {\\n        Market storage market = markets[address(cToken)];\\n        require(market.isListed, \\\"comp market is not listed\\\");\\n\\n        if (compSupplySpeeds[address(cToken)] != supplySpeed) {\\n            // Supply speed updated so let's update supply state to ensure that\\n            //  1. COMP accrued properly for the old speed, and\\n            //  2. COMP accrued at the new speed starts after this block.\\n            updateCompSupplyIndex(address(cToken));\\n\\n            // Update speed and emit event\\n            compSupplySpeeds[address(cToken)] = supplySpeed;\\n            emit CompSupplySpeedUpdated(cToken, supplySpeed);\\n        }\\n\\n        if (compBorrowSpeeds[address(cToken)] != borrowSpeed) {\\n            // Borrow speed updated so let's update borrow state to ensure that\\n            //  1. COMP accrued properly for the old speed, and\\n            //  2. COMP accrued at the new speed starts after this block.\\n            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\n            updateCompBorrowIndex(address(cToken), borrowIndex);\\n\\n            // Update speed and emit event\\n            compBorrowSpeeds[address(cToken)] = borrowSpeed;\\n            emit CompBorrowSpeedUpdated(cToken, borrowSpeed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue COMP to the market by updating the supply index\\n     * @param cToken The market whose supply index to update\\n     * @dev Index is a cumulative sum of the COMP per cToken accrued.\\n     */\\n    function updateCompSupplyIndex(address cToken) internal {\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        uint256 supplySpeed = compSupplySpeeds[cToken];\\n        uint32 blockNumber = safe32(\\n            getBlockNumber(),\\n            \\\"block number exceeds 32 bits\\\"\\n        );\\n        uint256 deltaBlocks = sub_(\\n            uint256(blockNumber),\\n            uint256(supplyState.block)\\n        );\\n        if (deltaBlocks > 0 && supplySpeed > 0) {\\n            uint256 supplyTokens = CToken(cToken).totalSupply();\\n            uint256 compAccrued = mul_(deltaBlocks, supplySpeed);\\n            Double memory ratio = supplyTokens > 0\\n                ? fraction(compAccrued, supplyTokens)\\n                : Double({mantissa: 0});\\n            supplyState.index = safe224(\\n                add_(Double({mantissa: supplyState.index}), ratio).mantissa,\\n                \\\"new index exceeds 224 bits\\\"\\n            );\\n            supplyState.block = blockNumber;\\n        } else if (deltaBlocks > 0) {\\n            supplyState.block = blockNumber;\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue COMP to the market by updating the borrow index\\n     * @param cToken The market whose borrow index to update\\n     * @dev Index is a cumulative sum of the COMP per cToken accrued.\\n     */\\n    function updateCompBorrowIndex(\\n        address cToken,\\n        Exp memory marketBorrowIndex\\n    ) internal {\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n        uint256 borrowSpeed = compBorrowSpeeds[cToken];\\n        uint32 blockNumber = safe32(\\n            getBlockNumber(),\\n            \\\"block number exceeds 32 bits\\\"\\n        );\\n        uint256 deltaBlocks = sub_(\\n            uint256(blockNumber),\\n            uint256(borrowState.block)\\n        );\\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\\n            uint256 borrowAmount = div_(\\n                CToken(cToken).totalBorrows(),\\n                marketBorrowIndex\\n            );\\n            uint256 compAccrued = mul_(deltaBlocks, borrowSpeed);\\n            Double memory ratio = borrowAmount > 0\\n                ? fraction(compAccrued, borrowAmount)\\n                : Double({mantissa: 0});\\n            borrowState.index = safe224(\\n                add_(Double({mantissa: borrowState.index}), ratio).mantissa,\\n                \\\"new index exceeds 224 bits\\\"\\n            );\\n            borrowState.block = blockNumber;\\n        } else if (deltaBlocks > 0) {\\n            borrowState.block = blockNumber;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\\n     * @param cToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute COMP to\\n     */\\n    function distributeSupplierComp(address cToken, address supplier) internal {\\n        // TODO: Don't distribute supplier COMP if the user is not in the supplier market.\\n        // This check should be as gas efficient as possible as distributeSupplierComp is called in many places.\\n        // - We really don't want to call an external contract as that's quite expensive.\\n\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        uint256 supplyIndex = supplyState.index;\\n        uint256 supplierIndex = compSupplierIndex[cToken][supplier];\\n\\n        // Update supplier's index to the current index since we are distributing accrued COMP\\n        compSupplierIndex[cToken][supplier] = supplyIndex;\\n\\n        if (supplierIndex == 0 && supplyIndex >= compInitialIndex) {\\n            // Covers the case where users supplied tokens before the market's supply state index was set.\\n            // Rewards the user with COMP accrued from the start of when supplier rewards were first\\n            // set for the market.\\n            supplierIndex = compInitialIndex;\\n        }\\n\\n        // Calculate change in the cumulative sum of the COMP per cToken accrued\\n        Double memory deltaIndex = Double({\\n            mantissa: sub_(supplyIndex, supplierIndex)\\n        });\\n\\n        uint256 supplierTokens = CToken(cToken).balanceOf(supplier);\\n\\n        // Calculate COMP accrued: cTokenAmount * accruedPerCToken\\n        uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\\n\\n        uint256 supplierAccrued = add_(compAccrued[supplier], supplierDelta);\\n        compAccrued[supplier] = supplierAccrued;\\n\\n        emit DistributedSupplierComp(\\n            CToken(cToken),\\n            supplier,\\n            supplierDelta,\\n            supplyIndex\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n     * @param cToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute COMP to\\n     */\\n    function distributeBorrowerComp(\\n        address cToken,\\n        address borrower,\\n        Exp memory marketBorrowIndex\\n    ) internal {\\n        // TODO: Don't distribute supplier COMP if the user is not in the borrower market.\\n        // This check should be as gas efficient as possible as distributeBorrowerComp is called in many places.\\n        // - We really don't want to call an external contract as that's quite expensive.\\n\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n        uint256 borrowIndex = borrowState.index;\\n        uint256 borrowerIndex = compBorrowerIndex[cToken][borrower];\\n\\n        // Update borrowers's index to the current index since we are distributing accrued COMP\\n        compBorrowerIndex[cToken][borrower] = borrowIndex;\\n\\n        if (borrowerIndex == 0 && borrowIndex >= compInitialIndex) {\\n            // Covers the case where users borrowed tokens before the market's borrow state index was set.\\n            // Rewards the user with COMP accrued from the start of when borrower rewards were first\\n            // set for the market.\\n            borrowerIndex = compInitialIndex;\\n        }\\n\\n        // Calculate change in the cumulative sum of the COMP per borrowed unit accrued\\n        Double memory deltaIndex = Double({\\n            mantissa: sub_(borrowIndex, borrowerIndex)\\n        });\\n\\n        uint256 borrowerAmount = div_(\\n            CToken(cToken).borrowBalanceStored(borrower),\\n            marketBorrowIndex\\n        );\\n\\n        // Calculate COMP accrued: cTokenAmount * accruedPerBorrowedUnit\\n        uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\\n\\n        uint256 borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);\\n        compAccrued[borrower] = borrowerAccrued;\\n\\n        emit DistributedBorrowerComp(\\n            CToken(cToken),\\n            borrower,\\n            borrowerDelta,\\n            borrowIndex\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate additional accrued COMP for a contributor since last accrual\\n     * @param contributor The address to calculate contributor rewards for\\n     */\\n    function updateContributorRewards(address contributor) public {\\n        uint256 compSpeed = compContributorSpeeds[contributor];\\n        uint256 blockNumber = getBlockNumber();\\n        uint256 deltaBlocks = sub_(\\n            blockNumber,\\n            lastContributorBlock[contributor]\\n        );\\n        if (deltaBlocks > 0 && compSpeed > 0) {\\n            uint256 newAccrued = mul_(deltaBlocks, compSpeed);\\n            uint256 contributorAccrued = add_(\\n                compAccrued[contributor],\\n                newAccrued\\n            );\\n\\n            compAccrued[contributor] = contributorAccrued;\\n            lastContributorBlock[contributor] = blockNumber;\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim all the comp accrued by holder in all markets\\n     * @param holder The address to claim COMP for\\n     */\\n    function claimComp(address holder) public {\\n        return claimComp(holder, allMarkets);\\n    }\\n\\n    /**\\n     * @notice Claim all the comp accrued by holder in the specified markets\\n     * @param holder The address to claim COMP for\\n     * @param cTokens The list of markets to claim COMP in\\n     */\\n    function claimComp(address holder, CToken[] memory cTokens) public {\\n        address[] memory holders = new address[](1);\\n        holders[0] = holder;\\n        claimComp(holders, cTokens, true, true);\\n    }\\n\\n    /**\\n     * @notice Claim all comp accrued by the holders\\n     * @param holders The addresses to claim COMP for\\n     * @param cTokens The list of markets to claim COMP in\\n     * @param borrowers Whether or not to claim COMP earned by borrowing\\n     * @param suppliers Whether or not to claim COMP earned by supplying\\n     */\\n    function claimComp(\\n        address[] memory holders,\\n        CToken[] memory cTokens,\\n        bool borrowers,\\n        bool suppliers\\n    ) public {\\n        for (uint256 i = 0; i < cTokens.length; i++) {\\n            CToken cToken = cTokens[i];\\n            require(markets[address(cToken)].isListed, \\\"market must be listed\\\");\\n            if (borrowers == true) {\\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\n                updateCompBorrowIndex(address(cToken), borrowIndex);\\n                for (uint256 j = 0; j < holders.length; j++) {\\n                    distributeBorrowerComp(\\n                        address(cToken),\\n                        holders[j],\\n                        borrowIndex\\n                    );\\n                }\\n            }\\n            if (suppliers == true) {\\n                updateCompSupplyIndex(address(cToken));\\n                for (uint256 j = 0; j < holders.length; j++) {\\n                    distributeSupplierComp(address(cToken), holders[j]);\\n                }\\n            }\\n        }\\n        for (uint256 j = 0; j < holders.length; j++) {\\n            compAccrued[holders[j]] = grantCompInternal(\\n                holders[j],\\n                compAccrued[holders[j]]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer COMP to the user\\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\n     * @param user The address of the user to transfer COMP to\\n     * @param amount The amount of COMP to (possibly) transfer\\n     * @return The amount of COMP which was NOT transferred to the user\\n     */\\n    function grantCompInternal(\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        Comp comp = Comp(getCompAddress());\\n        uint256 compRemaining = comp.balanceOf(address(this));\\n        if (amount > 0 && amount <= compRemaining) {\\n            comp.transfer(user, amount);\\n            return 0;\\n        }\\n        return amount;\\n    }\\n\\n    /*** Comp Distribution Admin ***/\\n\\n    /**\\n     * @notice Transfer COMP to the recipient\\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\n     * @param recipient The address of the recipient to transfer COMP to\\n     * @param amount The amount of COMP to (possibly) transfer\\n     */\\n    function _grantComp(address recipient, uint256 amount) public {\\n        require(adminOrInitializing(), \\\"only admin can grant comp\\\");\\n        uint256 amountLeft = grantCompInternal(recipient, amount);\\n        require(amountLeft == 0, \\\"insufficient comp for grant\\\");\\n        emit CompGranted(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Set COMP borrow and supply speeds for the specified markets.\\n     * @param cTokens The markets whose COMP speed to update.\\n     * @param supplySpeeds New supply-side COMP speed for the corresponding market.\\n     * @param borrowSpeeds New borrow-side COMP speed for the corresponding market.\\n     */\\n    function _setCompSpeeds(\\n        CToken[] memory cTokens,\\n        uint256[] memory supplySpeeds,\\n        uint256[] memory borrowSpeeds\\n    ) public {\\n        require(adminOrInitializing(), \\\"only admin can set comp speed\\\");\\n\\n        uint256 numTokens = cTokens.length;\\n        require(\\n            numTokens == supplySpeeds.length &&\\n                numTokens == borrowSpeeds.length,\\n            \\\"Comptroller::_setCompSpeeds invalid input\\\"\\n        );\\n\\n        for (uint256 i = 0; i < numTokens; ++i) {\\n            setCompSpeedInternal(cTokens[i], supplySpeeds[i], borrowSpeeds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set COMP speed for a single contributor\\n     * @param contributor The contributor whose COMP speed to update\\n     * @param compSpeed New COMP speed for contributor\\n     */\\n    function _setContributorCompSpeed(\\n        address contributor,\\n        uint256 compSpeed\\n    ) public {\\n        require(adminOrInitializing(), \\\"only admin can set comp speed\\\");\\n\\n        // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\\n        updateContributorRewards(contributor);\\n        if (compSpeed == 0) {\\n            // release storage\\n            delete lastContributorBlock[contributor];\\n        } else {\\n            lastContributorBlock[contributor] = getBlockNumber();\\n        }\\n        compContributorSpeeds[contributor] = compSpeed;\\n\\n        emit ContributorCompSpeedUpdated(contributor, compSpeed);\\n    }\\n\\n    /**\\n     * @notice Return all of the markets\\n     * @dev The automatic getter may be used to access an individual market.\\n     * @return The list of market addresses\\n     */\\n    function getAllMarkets() public view returns (CToken[] memory) {\\n        return allMarkets;\\n    }\\n\\n    /**\\n     * @notice Returns true if the given cToken market has been deprecated\\n     * @dev All borrows in a deprecated cToken market can be immediately liquidated\\n     * @param cToken The market to check if deprecated\\n     */\\n    function isDeprecated(CToken cToken) public view returns (bool) {\\n        return\\n            markets[address(cToken)].collateralFactorMantissa == 0 &&\\n            borrowGuardianPaused[address(cToken)] == true &&\\n            cToken.reserveFactorMantissa() == 1e18;\\n    }\\n\\n    function getBlockNumber() public view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Return the address of the MARE token\\n     * @return The address of MARE\\n     */\\n    function getCompAddress() public view virtual returns (address) {\\n        return 0xd86C8d4279CCaFbec840c782BcC50D201f277419;\\n    }\\n}\\n\",\"keccak256\":\"0x6e39808947548e46b1dff39dae8d30623b4902e43497cb074c7469dd8094d309\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nabstract contract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(\\n        address[] calldata cTokens\\n    ) external virtual returns (uint[] memory);\\n\\n    function exitMarket(address cToken) external virtual returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint mintAmount\\n    ) external virtual returns (uint);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint mintAmount,\\n        uint mintTokens\\n    ) external virtual;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint redeemTokens\\n    ) external virtual returns (uint);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint redeemAmount,\\n        uint redeemTokens\\n    ) external virtual;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint borrowAmount\\n    ) external virtual returns (uint);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint borrowAmount\\n    ) external virtual;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount\\n    ) external virtual returns (uint);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex\\n    ) external virtual;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount\\n    ) external virtual returns (uint);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens\\n    ) external virtual;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external virtual returns (uint);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external virtual;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint transferTokens\\n    ) external virtual returns (uint);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint transferTokens\\n    ) external virtual;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount\\n    ) external view virtual returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xab561397519328ed731d7b88d8d97f3fa2b3884cc8a22336534d2970c21dee55\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address public pendingAdmin;\\n\\n    /**\\n     * @notice Active brains of Unitroller\\n     */\\n    address public comptrollerImplementation;\\n\\n    /**\\n     * @notice Pending brains of Unitroller\\n     */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint256 public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint256 public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint256 public maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => CToken[]) public accountAssets;\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    struct Market {\\n        // Whether or not this market is listed\\n        bool isListed;\\n        //  Multiplier representing the most one can borrow against their collateral in this market.\\n        //  For instance, 0.9 to allow borrowing 90% of collateral value.\\n        //  Must be between 0 and 1, and stored as a mantissa.\\n        uint256 collateralFactorMantissa;\\n        // Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n        // Whether or not this market receives COMP\\n        bool isComped;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    struct CompMarketState {\\n        // The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n        // The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /// @notice The rate at which the flywheel distributes COMP, per block\\n    uint256 public compRate;\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    mapping(address => uint256) public compSpeeds;\\n\\n    /// @notice The COMP market supply state for each market\\n    mapping(address => CompMarketState) public compSupplyState;\\n\\n    /// @notice The COMP market borrow state for each market\\n    mapping(address => CompMarketState) public compBorrowState;\\n\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint256)) public compSupplierIndex;\\n\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint256)) public compBorrowerIndex;\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    mapping(address => uint256) public compAccrued;\\n}\\n\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\n    // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n    address public borrowCapGuardian;\\n\\n    // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n    mapping(address => uint256) public borrowCaps;\\n}\\n\\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\\n    /// @notice The portion of COMP that each contributor receives per block\\n    mapping(address => uint256) public compContributorSpeeds;\\n\\n    /// @notice Last block at which a contributor's COMP rewards have been allocated\\n    mapping(address => uint256) public lastContributorBlock;\\n}\\n\\ncontract ComptrollerV6Storage is ComptrollerV5Storage {\\n    /// @notice The rate at which comp is distributed to the corresponding borrow market (per block)\\n    mapping(address => uint256) public compBorrowSpeeds;\\n\\n    /// @notice The rate at which comp is distributed to the corresponding supply market (per block)\\n    mapping(address => uint256) public compSupplySpeeds;\\n}\\n\\ncontract ComptrollerV7Storage is ComptrollerV6Storage {\\n    /// @notice Flag indicating whether the function to fix COMP accruals has been executed (RE: proposal 62 bug)\\n    bool public proposal65FixExecuted;\\n\\n    /// @notice Accounting storage mapping account addresses to how much COMP they owe the protocol.\\n    mapping(address => uint256) public compReceivable;\\n}\\n\",\"keccak256\":\"0x7f0d0a023c56f457dd62d8473d093a354da7b3c7b48dd5eaa4b0fcf3ae955edf\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return success Whether or not the transfer succeeded\\n     */\\n    function transfer(\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return success Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0xc58019a1ce3f7f282b5e5d4960922d1f5334872431808fd0c1e777f263871bb8\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0x5f5e2de8a10d9d9b11c1db605fc44764867e18a11ab5de205fb2cc8637500ae7\",\"license\":\"BSD-3-Clause\"},\"contracts/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(\\n        Error err,\\n        FailureInfo info,\\n        uint opaqueError\\n    ) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    uint public constant NO_ERROR = 0; // support legacy return codes\\n\\n    error TransferComptrollerRejection(uint256 errorCode);\\n    error TransferNotAllowed();\\n    error TransferNotEnough();\\n    error TransferTooMuch();\\n\\n    error MintComptrollerRejection(uint256 errorCode);\\n    error MintFreshnessCheck();\\n\\n    error RedeemComptrollerRejection(uint256 errorCode);\\n    error RedeemFreshnessCheck();\\n    error RedeemTransferOutNotPossible();\\n\\n    error BorrowComptrollerRejection(uint256 errorCode);\\n    error BorrowFreshnessCheck();\\n    error BorrowCashNotAvailable();\\n\\n    error RepayBorrowComptrollerRejection(uint256 errorCode);\\n    error RepayBorrowFreshnessCheck();\\n\\n    error LiquidateComptrollerRejection(uint256 errorCode);\\n    error LiquidateFreshnessCheck();\\n    error LiquidateCollateralFreshnessCheck();\\n    error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\\n    error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\\n    error LiquidateLiquidatorIsBorrower();\\n    error LiquidateCloseAmountIsZero();\\n    error LiquidateCloseAmountIsUintMax();\\n    error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\\n\\n    error LiquidateSeizeComptrollerRejection(uint256 errorCode);\\n    error LiquidateSeizeLiquidatorIsBorrower();\\n\\n    error AcceptAdminPendingAdminCheck();\\n\\n    error SetComptrollerOwnerCheck();\\n    error SetPendingAdminOwnerCheck();\\n\\n    error SetReserveFactorAdminCheck();\\n    error SetReserveFactorFreshCheck();\\n    error SetReserveFactorBoundsCheck();\\n\\n    error AddReservesFactorFreshCheck(uint256 actualAddAmount);\\n\\n    error ReduceReservesAdminCheck();\\n    error ReduceReservesFreshCheck();\\n    error ReduceReservesCashNotAvailable();\\n    error ReduceReservesCashValidation();\\n\\n    error SetInterestRateModelOwnerCheck();\\n    error SetInterestRateModelFreshCheck();\\n}\\n\",\"keccak256\":\"0xfb4dc2989b0af2cceb7eaabe1efc53996665786fc0d84a79ef66b2de722806c0\",\"license\":\"BSD-3-Clause\"},\"contracts/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale / 2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(\\n        Exp memory a,\\n        uint scalar\\n    ) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint scalar,\\n        uint addend\\n    ) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(\\n        Exp memory left,\\n        Exp memory right\\n    ) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(\\n        Exp memory left,\\n        Exp memory right\\n    ) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(\\n        Exp memory left,\\n        Exp memory right\\n    ) internal pure returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(\\n        uint n,\\n        string memory errorMessage\\n    ) internal pure returns (uint224) {\\n        require(n < 2 ** 224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(\\n        uint n,\\n        string memory errorMessage\\n    ) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) internal pure returns (uint) {\\n        return a + b;\\n    }\\n\\n    function sub_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) internal pure returns (uint) {\\n        return a - b;\\n    }\\n\\n    function mul_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(\\n        Double memory a,\\n        uint b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) internal pure returns (uint) {\\n        return a * b;\\n    }\\n\\n    function div_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) internal pure returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return\\n            Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(\\n        Double memory a,\\n        uint b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) internal pure returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) internal pure returns (uint) {\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0xdd2743eae171dccf2ba3dbb5f4ee0f206cac2b28901f61f7bb69218f15432e96\",\"license\":\"BSD-3-Clause\"},\"contracts/Governance/Comp.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract Comp {\\n    /// @notice EIP-20 token name for this token\\n    string public constant name = \\\"Compound\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public constant symbol = \\\"COMP\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    uint256 public constant totalSupply = 10000000e18; // 10 million Comp\\n\\n    /// @notice Allowance amounts on behalf of others\\n    mapping(address => mapping(address => uint96)) internal allowances;\\n\\n    /// @notice Official record of token balances for each account\\n    mapping(address => uint96) internal balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Construct a new Comp token\\n     * @param account The initial account to grant all the tokens\\n     */\\n    constructor(address account) public {\\n        balances[account] = uint96(totalSupply);\\n        emit Transfer(address(0), account, totalSupply);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(\\n        address account,\\n        address spender\\n    ) external view returns (uint256) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(\\n        address spender,\\n        uint256 rawAmount\\n    ) external returns (bool) {\\n        uint96 amount;\\n        if (rawAmount == type(uint256).max) {\\n            amount = type(uint96).max;\\n        } else {\\n            amount = safe96(rawAmount, \\\"Comp::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 rawAmount) external returns (bool) {\\n        uint96 amount = safe96(\\n            rawAmount,\\n            \\\"Comp::transfer: amount exceeds 96 bits\\\"\\n        );\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 rawAmount\\n    ) external returns (bool) {\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(\\n            rawAmount,\\n            \\\"Comp::approve: amount exceeds 96 bits\\\"\\n        );\\n\\n        if (spender != src && spenderAllowance != type(uint96).max) {\\n            uint96 newAllowance = sub96(\\n                spenderAllowance,\\n                amount,\\n                \\\"Comp::transferFrom: transfer amount exceeds spender allowance\\\"\\n            );\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                getChainId(),\\n                address(this)\\n            )\\n        );\\n        bytes32 structHash = keccak256(\\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\n        );\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n        );\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(\\n            signatory != address(0),\\n            \\\"Comp::delegateBySig: invalid signature\\\"\\n        );\\n        require(\\n            nonce == nonces[signatory]++,\\n            \\\"Comp::delegateBySig: invalid nonce\\\"\\n        );\\n        require(\\n            block.timestamp <= expiry,\\n            \\\"Comp::delegateBySig: signature expired\\\"\\n        );\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return\\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(\\n        address account,\\n        uint256 blockNumber\\n    ) public view returns (uint96) {\\n        require(\\n            blockNumber < block.number,\\n            \\\"Comp::getPriorVotes: not yet determined\\\"\\n        );\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(address src, address dst, uint96 amount) internal {\\n        require(\\n            src != address(0),\\n            \\\"Comp::_transferTokens: cannot transfer from the zero address\\\"\\n        );\\n        require(\\n            dst != address(0),\\n            \\\"Comp::_transferTokens: cannot transfer to the zero address\\\"\\n        );\\n\\n        balances[src] = sub96(\\n            balances[src],\\n            amount,\\n            \\\"Comp::_transferTokens: transfer amount exceeds balance\\\"\\n        );\\n        balances[dst] = add96(\\n            balances[dst],\\n            amount,\\n            \\\"Comp::_transferTokens: transfer amount overflows\\\"\\n        );\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint96 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0\\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\\n                    : 0;\\n                uint96 srcRepNew = sub96(\\n                    srcRepOld,\\n                    amount,\\n                    \\\"Comp::_moveVotes: vote amount underflows\\\"\\n                );\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0\\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\\n                    : 0;\\n                uint96 dstRepNew = add96(\\n                    dstRepOld,\\n                    amount,\\n                    \\\"Comp::_moveVotes: vote amount overflows\\\"\\n                );\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint96 oldVotes,\\n        uint96 newVotes\\n    ) internal {\\n        uint32 blockNumber = safe32(\\n            block.number,\\n            \\\"Comp::_writeCheckpoint: block number exceeds 32 bits\\\"\\n        );\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newVotes\\n            );\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(\\n        uint256 n,\\n        string memory errorMessage\\n    ) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(\\n        uint256 n,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(n < 2 ** 96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x8ea30580d19ae72b096a488538eb6a6de8fe9b08c668e62925d95d4ac228e14c\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint cash,\\n        uint borrows,\\n        uint reserves\\n    ) external view virtual returns (uint);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint cash,\\n        uint borrows,\\n        uint reserves,\\n        uint reserveFactorMantissa\\n    ) external view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0xf867441de0a49070bd508b664ffe9db5d0cb174d207b928f12478037e6aa6654\",\"license\":\"BSD-3-Clause\"},\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n     * @notice Get the underlying price of a cToken asset\\n     * @param cToken The cToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\n     *  Zero means the price is unavailable.\\n     */\\n    function getUnderlyingPrice(\\n        CToken cToken\\n    ) external view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x2668c070ed3fb58f68ac470817e2f10a9dd8713eb9b11b02601f8aca904b9842\",\"license\":\"BSD-3-Clause\"},\"contracts/Unitroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\n\\n/**\\n * @title ComptrollerCore\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their comptroller.\\n */\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\n    /**\\n     * @notice Emitted when pendingComptrollerImplementation is changed\\n     */\\n    event NewPendingImplementation(\\n        address oldPendingImplementation,\\n        address newPendingImplementation\\n    );\\n\\n    /**\\n     * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\n     */\\n    event NewImplementation(\\n        address oldImplementation,\\n        address newImplementation\\n    );\\n\\n    /**\\n     * @notice Emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor() public {\\n        // Set admin to caller\\n        admin = msg.sender;\\n    }\\n\\n    /*** Admin Functions ***/\\n    function _setPendingImplementation(\\n        address newPendingImplementation\\n    ) public returns (uint) {\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK\\n                );\\n        }\\n\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n        pendingComptrollerImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(\\n            oldPendingImplementation,\\n            pendingComptrollerImplementation\\n        );\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\n     * @dev Admin function for new implementation to accept it's role as implementation\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptImplementation() public returns (uint) {\\n        // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n        if (\\n            msg.sender != pendingComptrollerImplementation ||\\n            pendingComptrollerImplementation == address(0)\\n        ) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK\\n                );\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldImplementation = comptrollerImplementation;\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n        comptrollerImplementation = pendingComptrollerImplementation;\\n\\n        pendingComptrollerImplementation = address(0);\\n\\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\\n        emit NewPendingImplementation(\\n            oldPendingImplementation,\\n            pendingComptrollerImplementation\\n        );\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK\\n                );\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptAdmin() public returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK\\n                );\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    fallback() external payable {\\n        // delegate all other functions to current implementation\\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\n\\n        assembly {\\n            let free_mem_ptr := mload(0x40)\\n            returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n            switch success\\n            case 0 {\\n                revert(free_mem_ptr, returndatasize())\\n            }\\n            default {\\n                return(free_mem_ptr, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x17e959f9fbe309bcdebb6b1670e6204d9273d84d26126879f3db8f0d7e24a570\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 6935,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "admin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6938,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "pendingAdmin",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6941,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "comptrollerImplementation",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6944,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "pendingComptrollerImplementation",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6951,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "oracle",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(PriceOracle)9168"
          },
          {
            "astId": 6954,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "closeFactorMantissa",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6957,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "liquidationIncentiveMantissa",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6960,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "maxAssets",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6967,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "accountAssets",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_array(t_contract(CToken)2182)dyn_storage)"
          },
          {
            "astId": 6987,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "markets",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_struct(Market)6981_storage)"
          },
          {
            "astId": 6990,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "pauseGuardian",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 6992,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "_mintGuardianPaused",
            "offset": 20,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 6994,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "_borrowGuardianPaused",
            "offset": 21,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 6996,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "transferGuardianPaused",
            "offset": 22,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 6998,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "seizeGuardianPaused",
            "offset": 23,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 7002,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "mintGuardianPaused",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7006,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "borrowGuardianPaused",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7019,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "allMarkets",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_contract(CToken)2182)dyn_storage"
          },
          {
            "astId": 7022,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "compRate",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 7027,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "compSpeeds",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 7033,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "compSupplyState",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_struct(CompMarketState)7014_storage)"
          },
          {
            "astId": 7039,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "compBorrowState",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_struct(CompMarketState)7014_storage)"
          },
          {
            "astId": 7046,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "compSupplierIndex",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 7053,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "compBorrowerIndex",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 7058,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "compAccrued",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 7063,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "borrowCapGuardian",
            "offset": 0,
            "slot": "21",
            "type": "t_address"
          },
          {
            "astId": 7067,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "borrowCaps",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 7075,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "compContributorSpeeds",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 7080,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "lastContributorBlock",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 7088,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "compBorrowSpeeds",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 7093,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "compSupplySpeeds",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 7099,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "proposal65FixExecuted",
            "offset": 0,
            "slot": "27",
            "type": "t_bool"
          },
          {
            "astId": 7104,
            "contract": "contracts/Comptroller.sol:Comptroller",
            "label": "compReceivable",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_contract(CToken)2182)dyn_storage": {
            "base": "t_contract(CToken)2182",
            "encoding": "dynamic_array",
            "label": "contract CToken[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(CToken)2182": {
            "encoding": "inplace",
            "label": "contract CToken",
            "numberOfBytes": "20"
          },
          "t_contract(PriceOracle)9168": {
            "encoding": "inplace",
            "label": "contract PriceOracle",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_contract(CToken)2182)dyn_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => contract CToken[])",
            "numberOfBytes": "32",
            "value": "t_array(t_contract(CToken)2182)dyn_storage"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_uint256)"
          },
          "t_mapping(t_address,t_struct(CompMarketState)7014_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct ComptrollerV3Storage.CompMarketState)",
            "numberOfBytes": "32",
            "value": "t_struct(CompMarketState)7014_storage"
          },
          "t_mapping(t_address,t_struct(Market)6981_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct ComptrollerV2Storage.Market)",
            "numberOfBytes": "32",
            "value": "t_struct(Market)6981_storage"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_struct(CompMarketState)7014_storage": {
            "encoding": "inplace",
            "label": "struct ComptrollerV3Storage.CompMarketState",
            "members": [
              {
                "astId": 7011,
                "contract": "contracts/Comptroller.sol:Comptroller",
                "label": "index",
                "offset": 0,
                "slot": "0",
                "type": "t_uint224"
              },
              {
                "astId": 7013,
                "contract": "contracts/Comptroller.sol:Comptroller",
                "label": "block",
                "offset": 28,
                "slot": "0",
                "type": "t_uint32"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Market)6981_storage": {
            "encoding": "inplace",
            "label": "struct ComptrollerV2Storage.Market",
            "members": [
              {
                "astId": 6972,
                "contract": "contracts/Comptroller.sol:Comptroller",
                "label": "isListed",
                "offset": 0,
                "slot": "0",
                "type": "t_bool"
              },
              {
                "astId": 6974,
                "contract": "contracts/Comptroller.sol:Comptroller",
                "label": "collateralFactorMantissa",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 6978,
                "contract": "contracts/Comptroller.sol:Comptroller",
                "label": "accountMembership",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 6980,
                "contract": "contracts/Comptroller.sol:Comptroller",
                "label": "isComped",
                "offset": 0,
                "slot": "3",
                "type": "t_bool"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_uint224": {
            "encoding": "inplace",
            "label": "uint224",
            "numberOfBytes": "28"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "encoding": "inplace",
            "label": "uint32",
            "numberOfBytes": "4"
          }
        }
      },
      "userdoc": {
        "events": {
          "ActionPaused(address,string,bool)": {
            "notice": "Emitted when an action is paused on a market"
          },
          "ActionPaused(string,bool)": {
            "notice": "Emitted when an action is paused globally"
          },
          "CompAccruedAdjusted(address,uint256,uint256)": {
            "notice": "Emitted when COMP accrued for a user has been manually adjusted."
          },
          "CompBorrowSpeedUpdated(address,uint256)": {
            "notice": "Emitted when a new borrow-side COMP speed is calculated for a market"
          },
          "CompGranted(address,uint256)": {
            "notice": "Emitted when COMP is granted by admin"
          },
          "CompReceivableUpdated(address,uint256,uint256)": {
            "notice": "Emitted when COMP receivable for a user has been updated."
          },
          "CompSupplySpeedUpdated(address,uint256)": {
            "notice": "Emitted when a new supply-side COMP speed is calculated for a market"
          },
          "ContributorCompSpeedUpdated(address,uint256)": {
            "notice": "Emitted when a new COMP speed is set for a contributor"
          },
          "DistributedBorrowerComp(address,address,uint256,uint256)": {
            "notice": "Emitted when COMP is distributed to a borrower"
          },
          "DistributedSupplierComp(address,address,uint256,uint256)": {
            "notice": "Emitted when COMP is distributed to a supplier"
          },
          "MarketEntered(address,address)": {
            "notice": "Emitted when an account enters a market"
          },
          "MarketExited(address,address)": {
            "notice": "Emitted when an account exits a market"
          },
          "MarketListed(address)": {
            "notice": "Emitted when an admin supports a market"
          },
          "NewBorrowCap(address,uint256)": {
            "notice": "Emitted when borrow cap for a cToken is changed"
          },
          "NewBorrowCapGuardian(address,address)": {
            "notice": "Emitted when borrow cap guardian is changed"
          },
          "NewCloseFactor(uint256,uint256)": {
            "notice": "Emitted when close factor is changed by admin"
          },
          "NewCollateralFactor(address,uint256,uint256)": {
            "notice": "Emitted when a collateral factor is changed by admin"
          },
          "NewLiquidationIncentive(uint256,uint256)": {
            "notice": "Emitted when liquidation incentive is changed by admin"
          },
          "NewPauseGuardian(address,address)": {
            "notice": "Emitted when pause guardian is changed"
          },
          "NewPriceOracle(address,address)": {
            "notice": "Emitted when price oracle is changed"
          }
        },
        "kind": "user",
        "methods": {
          "_grantComp(address,uint256)": {
            "notice": "Transfer COMP to the recipient"
          },
          "_setBorrowCapGuardian(address)": {
            "notice": "Admin function to change the Borrow Cap Guardian"
          },
          "_setCloseFactor(uint256)": {
            "notice": "Sets the closeFactor used when liquidating borrows"
          },
          "_setCollateralFactor(address,uint256)": {
            "notice": "Sets the collateralFactor for a market"
          },
          "_setCompSpeeds(address[],uint256[],uint256[])": {
            "notice": "Set COMP borrow and supply speeds for the specified markets."
          },
          "_setContributorCompSpeed(address,uint256)": {
            "notice": "Set COMP speed for a single contributor"
          },
          "_setLiquidationIncentive(uint256)": {
            "notice": "Sets liquidationIncentive"
          },
          "_setMarketBorrowCaps(address[],uint256[])": {
            "notice": "Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert."
          },
          "_setPauseGuardian(address)": {
            "notice": "Admin function to change the Pause Guardian"
          },
          "_setPriceOracle(address)": {
            "notice": "Sets a new price oracle for the comptroller"
          },
          "_supportMarket(address)": {
            "notice": "Add the market to the markets mapping and set it as listed"
          },
          "accountAssets(address,uint256)": {
            "notice": "Per-account mapping of \"assets you are in\", capped by maxAssets"
          },
          "admin()": {
            "notice": "Administrator for this contract"
          },
          "allMarkets(uint256)": {
            "notice": "A list of all markets"
          },
          "borrowAllowed(address,address,uint256)": {
            "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
          },
          "borrowVerify(address,address,uint256)": {
            "notice": "Validates borrow and reverts on rejection. May emit logs."
          },
          "checkMembership(address,address)": {
            "notice": "Returns whether the given account is entered in the given asset"
          },
          "claimComp(address)": {
            "notice": "Claim all the comp accrued by holder in all markets"
          },
          "claimComp(address,address[])": {
            "notice": "Claim all the comp accrued by holder in the specified markets"
          },
          "claimComp(address[],address[],bool,bool)": {
            "notice": "Claim all comp accrued by the holders"
          },
          "closeFactorMantissa()": {
            "notice": "Multiplier used to calculate the maximum repayAmount when liquidating a borrow"
          },
          "compAccrued(address)": {
            "notice": "The COMP accrued but not yet transferred to each user"
          },
          "compBorrowSpeeds(address)": {
            "notice": "The rate at which comp is distributed to the corresponding borrow market (per block)"
          },
          "compBorrowState(address)": {
            "notice": "The COMP market borrow state for each market"
          },
          "compBorrowerIndex(address,address)": {
            "notice": "The COMP borrow index for each market for each borrower as of the last time they accrued COMP"
          },
          "compContributorSpeeds(address)": {
            "notice": "The portion of COMP that each contributor receives per block"
          },
          "compInitialIndex()": {
            "notice": "The initial COMP index for a market"
          },
          "compRate()": {
            "notice": "The rate at which the flywheel distributes COMP, per block"
          },
          "compReceivable(address)": {
            "notice": "Accounting storage mapping account addresses to how much COMP they owe the protocol."
          },
          "compSpeeds(address)": {
            "notice": "The portion of compRate that each market currently receives"
          },
          "compSupplierIndex(address,address)": {
            "notice": "The COMP borrow index for each market for each supplier as of the last time they accrued COMP"
          },
          "compSupplySpeeds(address)": {
            "notice": "The rate at which comp is distributed to the corresponding supply market (per block)"
          },
          "compSupplyState(address)": {
            "notice": "The COMP market supply state for each market"
          },
          "comptrollerImplementation()": {
            "notice": "Active brains of Unitroller"
          },
          "enterMarkets(address[])": {
            "notice": "Add assets to be included in account liquidity calculation"
          },
          "exitMarket(address)": {
            "notice": "Removes asset from sender's account liquidity calculation"
          },
          "fixBadAccruals(address[],uint256[])": {
            "notice": "Delete this function after proposal 65 is executed"
          },
          "getAccountLiquidity(address)": {
            "notice": "Determine the current account liquidity wrt collateral requirements"
          },
          "getAllMarkets()": {
            "notice": "Return all of the markets"
          },
          "getAssetsIn(address)": {
            "notice": "Returns the assets an account has entered"
          },
          "getCompAddress()": {
            "notice": "Return the address of the MARE token"
          },
          "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
            "notice": "Determine what the account liquidity would be if the given amounts were redeemed/borrowed"
          },
          "isComptroller()": {
            "notice": "Indicator that this is a Comptroller contract (for inspection)"
          },
          "isDeprecated(address)": {
            "notice": "Returns true if the given cToken market has been deprecated"
          },
          "lastContributorBlock(address)": {
            "notice": "Last block at which a contributor's COMP rewards have been allocated"
          },
          "liquidateBorrowAllowed(address,address,address,address,uint256)": {
            "notice": "Checks if the liquidation should be allowed to occur"
          },
          "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
            "notice": "Validates liquidateBorrow and reverts on rejection. May emit logs."
          },
          "liquidateCalculateSeizeTokens(address,address,uint256)": {
            "notice": "Calculate number of tokens of collateral asset to seize given an underlying amount"
          },
          "liquidationIncentiveMantissa()": {
            "notice": "Multiplier representing the discount on collateral that a liquidator receives"
          },
          "markets(address)": {
            "notice": "Official mapping of cTokens -> Market metadata"
          },
          "maxAssets()": {
            "notice": "Max number of assets a single account can participate in (borrow or use as collateral)"
          },
          "mintAllowed(address,address,uint256)": {
            "notice": "Checks if the account should be allowed to mint tokens in the given market"
          },
          "mintVerify(address,address,uint256,uint256)": {
            "notice": "Validates mint and reverts on rejection. May emit logs."
          },
          "oracle()": {
            "notice": "Oracle which gives the price of any given asset"
          },
          "pauseGuardian()": {
            "notice": "The Pause Guardian can pause certain actions as a safety mechanism.  Actions which allow users to remove their own assets cannot be paused.  Liquidation / seizing / transfer can only be paused globally, not by market."
          },
          "pendingAdmin()": {
            "notice": "Pending administrator for this contract"
          },
          "pendingComptrollerImplementation()": {
            "notice": "Pending brains of Unitroller"
          },
          "proposal65FixExecuted()": {
            "notice": "Flag indicating whether the function to fix COMP accruals has been executed (RE: proposal 62 bug)"
          },
          "redeemAllowed(address,address,uint256)": {
            "notice": "Checks if the account should be allowed to redeem tokens in the given market"
          },
          "redeemVerify(address,address,uint256,uint256)": {
            "notice": "Validates redeem and reverts on rejection. May emit logs."
          },
          "repayBorrowAllowed(address,address,address,uint256)": {
            "notice": "Checks if the account should be allowed to repay a borrow in the given market"
          },
          "repayBorrowVerify(address,address,address,uint256,uint256)": {
            "notice": "Validates repayBorrow and reverts on rejection. May emit logs."
          },
          "seizeAllowed(address,address,address,address,uint256)": {
            "notice": "Checks if the seizing of assets should be allowed to occur"
          },
          "seizeVerify(address,address,address,address,uint256)": {
            "notice": "Validates seize and reverts on rejection. May emit logs."
          },
          "transferAllowed(address,address,address,uint256)": {
            "notice": "Checks if the account should be allowed to transfer tokens in the given market"
          },
          "transferVerify(address,address,address,uint256)": {
            "notice": "Validates transfer and reverts on rejection. May emit logs."
          },
          "updateContributorRewards(address)": {
            "notice": "Calculate additional accrued COMP for a contributor since last accrual"
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/Comptroller.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./Unitroller.sol\\\";\\nimport \\\"./Governance/Comp.sol\\\";\\n\\n/**\\n * @title Compound's Comptroller Contract\\n * @author Compound\\n */\\ncontract Comptroller is\\n    ComptrollerV7Storage,\\n    ComptrollerInterface,\\n    ComptrollerErrorReporter,\\n    ExponentialNoError\\n{\\n    /// @notice Emitted when an admin supports a market\\n    event MarketListed(CToken cToken);\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(CToken cToken, address account);\\n\\n    /// @notice Emitted when an account exits a market\\n    event MarketExited(CToken cToken, address account);\\n\\n    /// @notice Emitted when close factor is changed by admin\\n    event NewCloseFactor(\\n        uint256 oldCloseFactorMantissa,\\n        uint256 newCloseFactorMantissa\\n    );\\n\\n    /// @notice Emitted when a collateral factor is changed by admin\\n    event NewCollateralFactor(\\n        CToken cToken,\\n        uint256 oldCollateralFactorMantissa,\\n        uint256 newCollateralFactorMantissa\\n    );\\n\\n    /// @notice Emitted when liquidation incentive is changed by admin\\n    event NewLiquidationIncentive(\\n        uint256 oldLiquidationIncentiveMantissa,\\n        uint256 newLiquidationIncentiveMantissa\\n    );\\n\\n    /// @notice Emitted when price oracle is changed\\n    event NewPriceOracle(\\n        PriceOracle oldPriceOracle,\\n        PriceOracle newPriceOracle\\n    );\\n\\n    /// @notice Emitted when pause guardian is changed\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n    /// @notice Emitted when an action is paused globally\\n    event ActionPaused(string action, bool pauseState);\\n\\n    /// @notice Emitted when an action is paused on a market\\n    event ActionPaused(CToken cToken, string action, bool pauseState);\\n\\n    /// @notice Emitted when a new borrow-side COMP speed is calculated for a market\\n    event CompBorrowSpeedUpdated(CToken indexed cToken, uint256 newSpeed);\\n\\n    /// @notice Emitted when a new supply-side COMP speed is calculated for a market\\n    event CompSupplySpeedUpdated(CToken indexed cToken, uint256 newSpeed);\\n\\n    /// @notice Emitted when a new COMP speed is set for a contributor\\n    event ContributorCompSpeedUpdated(\\n        address indexed contributor,\\n        uint256 newSpeed\\n    );\\n\\n    /// @notice Emitted when COMP is distributed to a supplier\\n    event DistributedSupplierComp(\\n        CToken indexed cToken,\\n        address indexed supplier,\\n        uint256 compDelta,\\n        uint256 compSupplyIndex\\n    );\\n\\n    /// @notice Emitted when COMP is distributed to a borrower\\n    event DistributedBorrowerComp(\\n        CToken indexed cToken,\\n        address indexed borrower,\\n        uint256 compDelta,\\n        uint256 compBorrowIndex\\n    );\\n\\n    /// @notice Emitted when borrow cap for a cToken is changed\\n    event NewBorrowCap(CToken indexed cToken, uint256 newBorrowCap);\\n\\n    /// @notice Emitted when borrow cap guardian is changed\\n    event NewBorrowCapGuardian(\\n        address oldBorrowCapGuardian,\\n        address newBorrowCapGuardian\\n    );\\n\\n    /// @notice Emitted when COMP is granted by admin\\n    event CompGranted(address recipient, uint256 amount);\\n\\n    /// @notice Emitted when COMP accrued for a user has been manually adjusted.\\n    event CompAccruedAdjusted(\\n        address indexed user,\\n        uint256 oldCompAccrued,\\n        uint256 newCompAccrued\\n    );\\n\\n    /// @notice Emitted when COMP receivable for a user has been updated.\\n    event CompReceivableUpdated(\\n        address indexed user,\\n        uint256 oldCompReceivable,\\n        uint256 newCompReceivable\\n    );\\n\\n    /// @notice The initial COMP index for a market\\n    uint224 public constant compInitialIndex = 1e36;\\n\\n    // closeFactorMantissa must be strictly greater than this value\\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\n\\n    // closeFactorMantissa must not exceed this value\\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // No collateralFactorMantissa may exceed this value\\n    uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    constructor() {\\n        admin = msg.sender;\\n    }\\n\\n    /*** Assets You Are In ***/\\n\\n    /**\\n     * @notice Returns the assets an account has entered\\n     * @param account The address of the account to pull assets for\\n     * @return A dynamic list with the assets the account has entered\\n     */\\n    function getAssetsIn(\\n        address account\\n    ) external view returns (CToken[] memory) {\\n        CToken[] memory assetsIn = accountAssets[account];\\n\\n        return assetsIn;\\n    }\\n\\n    /**\\n     * @notice Returns whether the given account is entered in the given asset\\n     * @param account The address of the account to check\\n     * @param cToken The cToken to check\\n     * @return True if the account is in the asset, otherwise false.\\n     */\\n    function checkMembership(\\n        address account,\\n        CToken cToken\\n    ) external view returns (bool) {\\n        return markets[address(cToken)].accountMembership[account];\\n    }\\n\\n    /**\\n     * @notice Add assets to be included in account liquidity calculation\\n     * @param cTokens The list of addresses of the cToken markets to be enabled\\n     * @return Success indicator for whether each corresponding market was entered\\n     */\\n    function enterMarkets(\\n        address[] memory cTokens\\n    ) public override returns (uint256[] memory) {\\n        uint256 len = cTokens.length;\\n\\n        uint256[] memory results = new uint256[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            CToken cToken = CToken(cTokens[i]);\\n\\n            results[i] = uint256(addToMarketInternal(cToken, msg.sender));\\n        }\\n\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n     * @param cToken The market to enter\\n     * @param borrower The address of the account to modify\\n     * @return Success indicator for whether the market was entered\\n     */\\n    function addToMarketInternal(\\n        CToken cToken,\\n        address borrower\\n    ) internal returns (Error) {\\n        Market storage marketToJoin = markets[address(cToken)];\\n\\n        if (!marketToJoin.isListed) {\\n            // market is not listed, cannot join\\n            return Error.MARKET_NOT_LISTED;\\n        }\\n\\n        if (marketToJoin.accountMembership[borrower] == true) {\\n            // already joined\\n            return Error.NO_ERROR;\\n        }\\n\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if an account is in a particular market\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(cToken);\\n\\n        emit MarketEntered(cToken, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Removes asset from sender's account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *  or be providing necessary collateral for an outstanding borrow.\\n     * @param cTokenAddress The address of the asset to be removed\\n     * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarket(\\n        address cTokenAddress\\n    ) external override returns (uint256) {\\n        CToken cToken = CToken(cTokenAddress);\\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\\n        (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken\\n            .getAccountSnapshot(msg.sender);\\n        require(oErr == 0, \\\"exitMarket: getAccountSnapshot failed\\\"); // semi-opaque error code\\n\\n        /* Fail if the sender has a borrow balance */\\n        if (amountOwed != 0) {\\n            return\\n                fail(\\n                    Error.NONZERO_BORROW_BALANCE,\\n                    FailureInfo.EXIT_MARKET_BALANCE_OWED\\n                );\\n        }\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        uint256 allowed = redeemAllowedInternal(\\n            cTokenAddress,\\n            msg.sender,\\n            tokensHeld\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.REJECTION,\\n                    FailureInfo.EXIT_MARKET_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        Market storage marketToExit = markets[address(cToken)];\\n\\n        /* Return true if the sender is not already ‘in’ the market */\\n        if (!marketToExit.accountMembership[msg.sender]) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Set cToken account membership to false */\\n        delete marketToExit.accountMembership[msg.sender];\\n\\n        /* Delete cToken from the account’s list of assets */\\n        // load into memory for faster iteration\\n        CToken[] memory userAssetList = accountAssets[msg.sender];\\n        uint256 len = userAssetList.length;\\n        uint256 assetIndex = len;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (userAssetList[i] == cToken) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        assert(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        CToken[] storage storedList = accountAssets[msg.sender];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.pop();\\n\\n        emit MarketExited(cToken, msg.sender);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /*** Policy Hooks ***/\\n\\n    /**\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\n     * @param cToken The market to verify the mint against\\n     * @param minter The account which would get the minted tokens\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external override returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!mintGuardianPaused[cToken], \\\"mint is paused\\\");\\n\\n        // Shh - currently unused\\n        minter;\\n        mintAmount;\\n\\n        if (!markets[cToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cToken);\\n        distributeSupplierComp(cToken, minter);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates mint and reverts on rejection. May emit logs.\\n     * @param cToken Asset being minted\\n     * @param minter The address minting the tokens\\n     * @param actualMintAmount The amount of the underlying asset being minted\\n     * @param mintTokens The number of tokens being minted\\n     */\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 actualMintAmount,\\n        uint256 mintTokens\\n    ) external override {\\n        // Shh - currently unused\\n        cToken;\\n        minter;\\n        actualMintAmount;\\n        mintTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\n     * @param cToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external override returns (uint256) {\\n        uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\\n        if (allowed != uint256(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cToken);\\n        distributeSupplierComp(cToken, redeemer);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    function redeemAllowedInternal(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) internal view returns (uint256) {\\n        if (!markets[cToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!markets[cToken].accountMembership[redeemer]) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (\\n            Error err,\\n            ,\\n            uint256 shortfall\\n        ) = getHypotheticalAccountLiquidityInternal(\\n                redeemer,\\n                CToken(cToken),\\n                redeemTokens,\\n                0\\n            );\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\n     * @param cToken Asset being redeemed\\n     * @param redeemer The address redeeming the tokens\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\n     * @param redeemTokens The number of tokens being redeemed\\n     */\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external override {\\n        // Shh - currently unused\\n        cToken;\\n        redeemer;\\n\\n        // Require tokens is zero or amount is also zero\\n        if (redeemTokens == 0 && redeemAmount > 0) {\\n            revert(\\\"redeemTokens zero\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param cToken The market to verify the borrow against\\n     * @param borrower The account which would borrow the asset\\n     * @param borrowAmount The amount of underlying the account would borrow\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external override returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!borrowGuardianPaused[cToken], \\\"borrow is paused\\\");\\n\\n        if (!markets[cToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (!markets[cToken].accountMembership[borrower]) {\\n            // only cTokens may call borrowAllowed if borrower not in market\\n            require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n            // attempt to add borrower to the market\\n            Error err = addToMarketInternal(CToken(msg.sender), borrower);\\n            if (err != Error.NO_ERROR) {\\n                return uint256(err);\\n            }\\n\\n            // it should be impossible to break the important invariant\\n            assert(markets[cToken].accountMembership[borrower]);\\n        }\\n\\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\\n            return uint256(Error.PRICE_ERROR);\\n        }\\n\\n        uint256 borrowCap = borrowCaps[cToken];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint256 totalBorrows = CToken(cToken).totalBorrows();\\n            uint256 nextTotalBorrows = add_(totalBorrows, borrowAmount);\\n            require(nextTotalBorrows < borrowCap, \\\"market borrow cap reached\\\");\\n        }\\n\\n        (\\n            Error err,\\n            ,\\n            uint256 shortfall\\n        ) = getHypotheticalAccountLiquidityInternal(\\n                borrower,\\n                CToken(cToken),\\n                0,\\n                borrowAmount\\n            );\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        // Keep the flywheel moving\\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\\n        updateCompBorrowIndex(cToken, borrowIndex);\\n        distributeBorrowerComp(cToken, borrower, borrowIndex);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates borrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset whose underlying is being borrowed\\n     * @param borrower The address borrowing the underlying\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\n     */\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external override {\\n        // Shh - currently unused\\n        cToken;\\n        borrower;\\n        borrowAmount;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param cToken The market to verify the repay against\\n     * @param payer The account which would repay the asset\\n     * @param borrower The account which would borrowed the asset\\n     * @param repayAmount The amount of the underlying asset the account would repay\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external override returns (uint256) {\\n        // Shh - currently unused\\n        payer;\\n        borrower;\\n        repayAmount;\\n\\n        if (!markets[cToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Keep the flywheel moving\\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\\n        updateCompBorrowIndex(cToken, borrowIndex);\\n        distributeBorrowerComp(cToken, borrower, borrowIndex);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset being repaid\\n     * @param payer The address repaying the borrow\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 actualRepayAmount,\\n        uint256 borrowerIndex\\n    ) external override {\\n        // Shh - currently unused\\n        cToken;\\n        payer;\\n        borrower;\\n        actualRepayAmount;\\n        borrowerIndex;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the liquidation should be allowed to occur\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external override returns (uint256) {\\n        // Shh - currently unused\\n        liquidator;\\n\\n        if (\\n            !markets[cTokenBorrowed].isListed ||\\n            !markets[cTokenCollateral].isListed\\n        ) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        uint256 borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(\\n            borrower\\n        );\\n\\n        /* allow accounts to be liquidated if the market is deprecated */\\n        if (isDeprecated(CToken(cTokenBorrowed))) {\\n            require(\\n                borrowBalance >= repayAmount,\\n                \\\"Can not repay more than the total borrow\\\"\\n            );\\n        } else {\\n            /* The borrower must have shortfall in order to be liquidatable */\\n            (Error err, , uint256 shortfall) = getAccountLiquidityInternal(\\n                borrower\\n            );\\n            if (err != Error.NO_ERROR) {\\n                return uint256(err);\\n            }\\n\\n            if (shortfall == 0) {\\n                return uint256(Error.INSUFFICIENT_SHORTFALL);\\n            }\\n\\n            /* The liquidator may not repay more than what is allowed by the closeFactor */\\n            uint256 maxClose = mul_ScalarTruncate(\\n                Exp({mantissa: closeFactorMantissa}),\\n                borrowBalance\\n            );\\n            if (repayAmount > maxClose) {\\n                return uint256(Error.TOO_MUCH_REPAY);\\n            }\\n        }\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 actualRepayAmount,\\n        uint256 seizeTokens\\n    ) external override {\\n        // Shh - currently unused\\n        cTokenBorrowed;\\n        cTokenCollateral;\\n        liquidator;\\n        borrower;\\n        actualRepayAmount;\\n        seizeTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the seizing of assets should be allowed to occur\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external override returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!seizeGuardianPaused, \\\"seize is paused\\\");\\n\\n        // Shh - currently unused\\n        seizeTokens;\\n\\n        if (\\n            !markets[cTokenCollateral].isListed ||\\n            !markets[cTokenBorrowed].isListed\\n        ) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (\\n            CToken(cTokenCollateral).comptroller() !=\\n            CToken(cTokenBorrowed).comptroller()\\n        ) {\\n            return uint256(Error.COMPTROLLER_MISMATCH);\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cTokenCollateral);\\n        distributeSupplierComp(cTokenCollateral, borrower);\\n        distributeSupplierComp(cTokenCollateral, liquidator);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates seize and reverts on rejection. May emit logs.\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external override {\\n        // Shh - currently unused\\n        cTokenCollateral;\\n        cTokenBorrowed;\\n        liquidator;\\n        borrower;\\n        seizeTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param cToken The market to verify the transfer against\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external override returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!transferGuardianPaused, \\\"transfer is paused\\\");\\n\\n        // Currently the only consideration is whether or not\\n        //  the src is allowed to redeem this many tokens\\n        uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\\n        if (allowed != uint256(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cToken);\\n        distributeSupplierComp(cToken, src);\\n        distributeSupplierComp(cToken, dst);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates transfer and reverts on rejection. May emit logs.\\n     * @param cToken Asset being transferred\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     */\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external override {\\n        // Shh - currently unused\\n        cToken;\\n        src;\\n        dst;\\n        transferTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountLiquidityLocalVars {\\n        uint256 sumCollateral;\\n        uint256 sumBorrowPlusEffects;\\n        uint256 cTokenBalance;\\n        uint256 borrowBalance;\\n        uint256 exchangeRateMantissa;\\n        uint256 oraclePriceMantissa;\\n        Exp collateralFactor;\\n        Exp exchangeRate;\\n        Exp oraclePrice;\\n        Exp tokensToDenom;\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidity(\\n        address account\\n    ) public view returns (uint256, uint256, uint256) {\\n        (\\n            Error err,\\n            uint256 liquidity,\\n            uint256 shortfall\\n        ) = getHypotheticalAccountLiquidityInternal(\\n                account,\\n                CToken(address(0)),\\n                0,\\n                0\\n            );\\n\\n        return (uint256(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code,\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidityInternal(\\n        address account\\n    ) internal view returns (Error, uint256, uint256) {\\n        return\\n            getHypotheticalAccountLiquidityInternal(\\n                account,\\n                CToken(address(0)),\\n                0,\\n                0\\n            );\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address cTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    ) public view returns (uint256, uint256, uint256) {\\n        (\\n            Error err,\\n            uint256 liquidity,\\n            uint256 shortfall\\n        ) = getHypotheticalAccountLiquidityInternal(\\n                account,\\n                CToken(cTokenModify),\\n                redeemTokens,\\n                borrowAmount\\n            );\\n        return (uint256(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        CToken cTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    ) internal view returns (Error, uint256, uint256) {\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n        uint256 oErr;\\n\\n        // For each asset the account is in\\n        CToken[] memory assets = accountAssets[account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            CToken asset = assets[i];\\n\\n            // Read the balances and exchange rate from the cToken\\n            (\\n                oErr,\\n                vars.cTokenBalance,\\n                vars.borrowBalance,\\n                vars.exchangeRateMantissa\\n            ) = asset.getAccountSnapshot(account);\\n            if (oErr != 0) {\\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n                return (Error.SNAPSHOT_ERROR, 0, 0);\\n            }\\n            vars.collateralFactor = Exp({\\n                mantissa: markets[address(asset)].collateralFactorMantissa\\n            });\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\n\\n            // Get the normalized price of the asset\\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\n            if (vars.oraclePriceMantissa == 0) {\\n                return (Error.PRICE_ERROR, 0, 0);\\n            }\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\n\\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n            vars.tokensToDenom = mul_(\\n                mul_(vars.collateralFactor, vars.exchangeRate),\\n                vars.oraclePrice\\n            );\\n\\n            // sumCollateral += tokensToDenom * cTokenBalance\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(\\n                vars.tokensToDenom,\\n                vars.cTokenBalance,\\n                vars.sumCollateral\\n            );\\n\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                vars.oraclePrice,\\n                vars.borrowBalance,\\n                vars.sumBorrowPlusEffects\\n            );\\n\\n            // Calculate effects of interacting with cTokenModify\\n            if (asset == cTokenModify) {\\n                // redeem effect\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                    vars.tokensToDenom,\\n                    redeemTokens,\\n                    vars.sumBorrowPlusEffects\\n                );\\n\\n                // borrow effect\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                    vars.oraclePrice,\\n                    borrowAmount,\\n                    vars.sumBorrowPlusEffects\\n                );\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n            return (\\n                Error.NO_ERROR,\\n                vars.sumCollateral - vars.sumBorrowPlusEffects,\\n                0\\n            );\\n        } else {\\n            return (\\n                Error.NO_ERROR,\\n                0,\\n                vars.sumBorrowPlusEffects - vars.sumCollateral\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\\n     * @param cTokenBorrowed The address of the borrowed cToken\\n     * @param cTokenCollateral The address of the collateral cToken\\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\\n     */\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 actualRepayAmount\\n    ) external view override returns (uint256, uint256) {\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(\\n            CToken(cTokenBorrowed)\\n        );\\n        uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(\\n            CToken(cTokenCollateral)\\n        );\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n            return (uint256(Error.PRICE_ERROR), 0);\\n        }\\n\\n        /*\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n         *  seizeTokens = seizeAmount / exchangeRate\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n         */\\n        uint256 exchangeRateMantissa = CToken(cTokenCollateral)\\n            .exchangeRateStored(); // Note: reverts on error\\n        uint256 seizeTokens;\\n        Exp memory numerator;\\n        Exp memory denominator;\\n        Exp memory ratio;\\n\\n        numerator = mul_(\\n            Exp({mantissa: liquidationIncentiveMantissa}),\\n            Exp({mantissa: priceBorrowedMantissa})\\n        );\\n        denominator = mul_(\\n            Exp({mantissa: priceCollateralMantissa}),\\n            Exp({mantissa: exchangeRateMantissa})\\n        );\\n        ratio = div_(numerator, denominator);\\n\\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n\\n        return (uint256(Error.NO_ERROR), seizeTokens);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Sets a new price oracle for the comptroller\\n     * @dev Admin function to set a new price oracle\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK\\n                );\\n        }\\n\\n        // Track the old oracle for the comptroller\\n        PriceOracle oldOracle = oracle;\\n\\n        // Set comptroller's oracle to newOracle\\n        oracle = newOracle;\\n\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\n        emit NewPriceOracle(oldOracle, newOracle);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the closeFactor used when liquidating borrows\\n     * @dev Admin function to set closeFactor\\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n     * @return uint 0=success, otherwise a failure\\n     */\\n    function _setCloseFactor(\\n        uint256 newCloseFactorMantissa\\n    ) external returns (uint256) {\\n        // Check caller is admin\\n        require(msg.sender == admin, \\\"only admin can set close factor\\\");\\n\\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\\n        closeFactorMantissa = newCloseFactorMantissa;\\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the collateralFactor for a market\\n     * @dev Admin function to set per-market collateralFactor\\n     * @param cToken The market to set the factor on\\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function _setCollateralFactor(\\n        CToken cToken,\\n        uint256 newCollateralFactorMantissa\\n    ) external returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK\\n                );\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_LISTED,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS\\n                );\\n        }\\n\\n        Exp memory newCollateralFactorExp = Exp({\\n            mantissa: newCollateralFactorMantissa\\n        });\\n\\n        // Check collateral factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n            return\\n                fail(\\n                    Error.INVALID_COLLATERAL_FACTOR,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION\\n                );\\n        }\\n\\n        // If collateral factor != 0, fail if price == 0\\n        if (\\n            newCollateralFactorMantissa != 0 &&\\n            oracle.getUnderlyingPrice(cToken) == 0\\n        ) {\\n            return\\n                fail(\\n                    Error.PRICE_ERROR,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE\\n                );\\n        }\\n\\n        // Set market's collateral factor to new collateral factor, remember old value\\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n        // Emit event with asset, old collateral factor, and new collateral factor\\n        emit NewCollateralFactor(\\n            cToken,\\n            oldCollateralFactorMantissa,\\n            newCollateralFactorMantissa\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets liquidationIncentive\\n     * @dev Admin function to set liquidationIncentive\\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function _setLiquidationIncentive(\\n        uint256 newLiquidationIncentiveMantissa\\n    ) external returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK\\n                );\\n        }\\n\\n        // Save current value for use in log\\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\n\\n        // Set liquidation incentive to new incentive\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        // Emit event with old incentive, new incentive\\n        emit NewLiquidationIncentive(\\n            oldLiquidationIncentiveMantissa,\\n            newLiquidationIncentiveMantissa\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Add the market to the markets mapping and set it as listed\\n     * @dev Admin function to set isListed and add support for the market\\n     * @param cToken The address of the market (token) to list\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _supportMarket(CToken cToken) external returns (uint256) {\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\\n                );\\n        }\\n\\n        if (markets[address(cToken)].isListed) {\\n            return\\n                fail(\\n                    Error.MARKET_ALREADY_LISTED,\\n                    FailureInfo.SUPPORT_MARKET_EXISTS\\n                );\\n        }\\n\\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\\n\\n        // Note that isComped is not in active use anymore\\n        Market storage newMarket = markets[address(cToken)];\\n        newMarket.isListed = true;\\n        newMarket.isComped = false;\\n        newMarket.collateralFactorMantissa = 0;\\n\\n        _addMarketInternal(address(cToken));\\n        _initializeMarket(address(cToken));\\n\\n        emit MarketListed(cToken);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    function _addMarketInternal(address cToken) internal {\\n        for (uint256 i = 0; i < allMarkets.length; i++) {\\n            require(allMarkets[i] != CToken(cToken), \\\"market already added\\\");\\n        }\\n        allMarkets.push(CToken(cToken));\\n    }\\n\\n    function _initializeMarket(address cToken) internal {\\n        uint32 blockNumber = safe32(\\n            getBlockNumber(),\\n            \\\"block number exceeds 32 bits\\\"\\n        );\\n\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n\\n        /*\\n         * Update market state indices\\n         */\\n        if (supplyState.index == 0) {\\n            // Initialize supply state index with default value\\n            supplyState.index = compInitialIndex;\\n        }\\n\\n        if (borrowState.index == 0) {\\n            // Initialize borrow state index with default value\\n            borrowState.index = compInitialIndex;\\n        }\\n\\n        /*\\n         * Update market state block numbers\\n         */\\n        supplyState.block = borrowState.block = blockNumber;\\n    }\\n\\n    /**\\n     * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n     * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n     * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n     */\\n    function _setMarketBorrowCaps(\\n        CToken[] calldata cTokens,\\n        uint256[] calldata newBorrowCaps\\n    ) external {\\n        require(\\n            msg.sender == admin || msg.sender == borrowCapGuardian,\\n            \\\"only admin or borrow cap guardian can set borrow caps\\\"\\n        );\\n\\n        uint256 numMarkets = cTokens.length;\\n        uint256 numBorrowCaps = newBorrowCaps.length;\\n\\n        require(\\n            numMarkets != 0 && numMarkets == numBorrowCaps,\\n            \\\"invalid input\\\"\\n        );\\n\\n        for (uint256 i = 0; i < numMarkets; i++) {\\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Borrow Cap Guardian\\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\n     */\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\n        require(msg.sender == admin, \\\"only admin can set borrow cap guardian\\\");\\n\\n        // Save current value for inclusion in log\\n        address oldBorrowCapGuardian = borrowCapGuardian;\\n\\n        // Store borrowCapGuardian with value newBorrowCapGuardian\\n        borrowCapGuardian = newBorrowCapGuardian;\\n\\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _setPauseGuardian(\\n        address newPauseGuardian\\n    ) public returns (uint256) {\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK\\n                );\\n        }\\n\\n        // Save current value for inclusion in log\\n        address oldPauseGuardian = pauseGuardian;\\n\\n        // Store pauseGuardian with value newPauseGuardian\\n        pauseGuardian = newPauseGuardian;\\n\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\\n        require(\\n            markets[address(cToken)].isListed,\\n            \\\"cannot pause a market that is not listed\\\"\\n        );\\n        require(\\n            msg.sender == pauseGuardian || msg.sender == admin,\\n            \\\"only pause guardian and admin can pause\\\"\\n        );\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        mintGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Mint\\\", state);\\n        return state;\\n    }\\n\\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\\n        require(\\n            markets[address(cToken)].isListed,\\n            \\\"cannot pause a market that is not listed\\\"\\n        );\\n        require(\\n            msg.sender == pauseGuardian || msg.sender == admin,\\n            \\\"only pause guardian and admin can pause\\\"\\n        );\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        borrowGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Borrow\\\", state);\\n        return state;\\n    }\\n\\n    function _setTransferPaused(bool state) public returns (bool) {\\n        require(\\n            msg.sender == pauseGuardian || msg.sender == admin,\\n            \\\"only pause guardian and admin can pause\\\"\\n        );\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        transferGuardianPaused = state;\\n        emit ActionPaused(\\\"Transfer\\\", state);\\n        return state;\\n    }\\n\\n    function _setSeizePaused(bool state) public returns (bool) {\\n        require(\\n            msg.sender == pauseGuardian || msg.sender == admin,\\n            \\\"only pause guardian and admin can pause\\\"\\n        );\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        seizeGuardianPaused = state;\\n        emit ActionPaused(\\\"Seize\\\", state);\\n        return state;\\n    }\\n\\n    function _become(Unitroller unitroller) public {\\n        require(\\n            msg.sender == unitroller.admin(),\\n            \\\"only unitroller admin can change brains\\\"\\n        );\\n        require(\\n            unitroller._acceptImplementation() == 0,\\n            \\\"change not authorized\\\"\\n        );\\n    }\\n\\n    /// @notice Delete this function after proposal 65 is executed\\n    function fixBadAccruals(\\n        address[] calldata affectedUsers,\\n        uint256[] calldata amounts\\n    ) external {\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\"); // Only the timelock can call this function\\n        require(\\n            !proposal65FixExecuted,\\n            \\\"Already executed this one-off function\\\"\\n        ); // Require that this function is only called once\\n        require(affectedUsers.length == amounts.length, \\\"Invalid input\\\");\\n\\n        // Loop variables\\n        address user;\\n        uint256 currentAccrual;\\n        uint256 amountToSubtract;\\n        uint256 newAccrual;\\n\\n        // Iterate through all affected users\\n        for (uint256 i = 0; i < affectedUsers.length; ++i) {\\n            user = affectedUsers[i];\\n            currentAccrual = compAccrued[user];\\n\\n            amountToSubtract = amounts[i];\\n\\n            // The case where the user has claimed and received an incorrect amount of COMP.\\n            // The user has less currently accrued than the amount they incorrectly received.\\n            if (amountToSubtract > currentAccrual) {\\n                // Amount of COMP the user owes the protocol\\n                uint256 accountReceivable = amountToSubtract - currentAccrual; // Underflow safe since amountToSubtract > currentAccrual\\n\\n                uint256 oldReceivable = compReceivable[user];\\n                uint256 newReceivable = add_(oldReceivable, accountReceivable);\\n\\n                // Accounting: record the COMP debt for the user\\n                compReceivable[user] = newReceivable;\\n\\n                emit CompReceivableUpdated(user, oldReceivable, newReceivable);\\n\\n                amountToSubtract = currentAccrual;\\n            }\\n\\n            if (amountToSubtract > 0) {\\n                // Subtract the bad accrual amount from what they have accrued.\\n                // Users will keep whatever they have correctly accrued.\\n                compAccrued[user] = newAccrual = sub_(\\n                    currentAccrual,\\n                    amountToSubtract\\n                );\\n\\n                emit CompAccruedAdjusted(user, currentAccrual, newAccrual);\\n            }\\n        }\\n\\n        proposal65FixExecuted = true; // Makes it so that this function cannot be called again\\n    }\\n\\n    /**\\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\\n     */\\n    function adminOrInitializing() internal view returns (bool) {\\n        return msg.sender == admin || msg.sender == comptrollerImplementation;\\n    }\\n\\n    /*** Comp Distribution ***/\\n\\n    /**\\n     * @notice Set COMP speed for a single market\\n     * @param cToken The market whose COMP speed to update\\n     * @param supplySpeed New supply-side COMP speed for market\\n     * @param borrowSpeed New borrow-side COMP speed for market\\n     */\\n    function setCompSpeedInternal(\\n        CToken cToken,\\n        uint256 supplySpeed,\\n        uint256 borrowSpeed\\n    ) internal {\\n        Market storage market = markets[address(cToken)];\\n        require(market.isListed, \\\"comp market is not listed\\\");\\n\\n        if (compSupplySpeeds[address(cToken)] != supplySpeed) {\\n            // Supply speed updated so let's update supply state to ensure that\\n            //  1. COMP accrued properly for the old speed, and\\n            //  2. COMP accrued at the new speed starts after this block.\\n            updateCompSupplyIndex(address(cToken));\\n\\n            // Update speed and emit event\\n            compSupplySpeeds[address(cToken)] = supplySpeed;\\n            emit CompSupplySpeedUpdated(cToken, supplySpeed);\\n        }\\n\\n        if (compBorrowSpeeds[address(cToken)] != borrowSpeed) {\\n            // Borrow speed updated so let's update borrow state to ensure that\\n            //  1. COMP accrued properly for the old speed, and\\n            //  2. COMP accrued at the new speed starts after this block.\\n            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\n            updateCompBorrowIndex(address(cToken), borrowIndex);\\n\\n            // Update speed and emit event\\n            compBorrowSpeeds[address(cToken)] = borrowSpeed;\\n            emit CompBorrowSpeedUpdated(cToken, borrowSpeed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue COMP to the market by updating the supply index\\n     * @param cToken The market whose supply index to update\\n     * @dev Index is a cumulative sum of the COMP per cToken accrued.\\n     */\\n    function updateCompSupplyIndex(address cToken) internal {\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        uint256 supplySpeed = compSupplySpeeds[cToken];\\n        uint32 blockNumber = safe32(\\n            getBlockNumber(),\\n            \\\"block number exceeds 32 bits\\\"\\n        );\\n        uint256 deltaBlocks = sub_(\\n            uint256(blockNumber),\\n            uint256(supplyState.block)\\n        );\\n        if (deltaBlocks > 0 && supplySpeed > 0) {\\n            uint256 supplyTokens = CToken(cToken).totalSupply();\\n            uint256 compAccrued = mul_(deltaBlocks, supplySpeed);\\n            Double memory ratio = supplyTokens > 0\\n                ? fraction(compAccrued, supplyTokens)\\n                : Double({mantissa: 0});\\n            supplyState.index = safe224(\\n                add_(Double({mantissa: supplyState.index}), ratio).mantissa,\\n                \\\"new index exceeds 224 bits\\\"\\n            );\\n            supplyState.block = blockNumber;\\n        } else if (deltaBlocks > 0) {\\n            supplyState.block = blockNumber;\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue COMP to the market by updating the borrow index\\n     * @param cToken The market whose borrow index to update\\n     * @dev Index is a cumulative sum of the COMP per cToken accrued.\\n     */\\n    function updateCompBorrowIndex(\\n        address cToken,\\n        Exp memory marketBorrowIndex\\n    ) internal {\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n        uint256 borrowSpeed = compBorrowSpeeds[cToken];\\n        uint32 blockNumber = safe32(\\n            getBlockNumber(),\\n            \\\"block number exceeds 32 bits\\\"\\n        );\\n        uint256 deltaBlocks = sub_(\\n            uint256(blockNumber),\\n            uint256(borrowState.block)\\n        );\\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\\n            uint256 borrowAmount = div_(\\n                CToken(cToken).totalBorrows(),\\n                marketBorrowIndex\\n            );\\n            uint256 compAccrued = mul_(deltaBlocks, borrowSpeed);\\n            Double memory ratio = borrowAmount > 0\\n                ? fraction(compAccrued, borrowAmount)\\n                : Double({mantissa: 0});\\n            borrowState.index = safe224(\\n                add_(Double({mantissa: borrowState.index}), ratio).mantissa,\\n                \\\"new index exceeds 224 bits\\\"\\n            );\\n            borrowState.block = blockNumber;\\n        } else if (deltaBlocks > 0) {\\n            borrowState.block = blockNumber;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\\n     * @param cToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute COMP to\\n     */\\n    function distributeSupplierComp(address cToken, address supplier) internal {\\n        // TODO: Don't distribute supplier COMP if the user is not in the supplier market.\\n        // This check should be as gas efficient as possible as distributeSupplierComp is called in many places.\\n        // - We really don't want to call an external contract as that's quite expensive.\\n\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        uint256 supplyIndex = supplyState.index;\\n        uint256 supplierIndex = compSupplierIndex[cToken][supplier];\\n\\n        // Update supplier's index to the current index since we are distributing accrued COMP\\n        compSupplierIndex[cToken][supplier] = supplyIndex;\\n\\n        if (supplierIndex == 0 && supplyIndex >= compInitialIndex) {\\n            // Covers the case where users supplied tokens before the market's supply state index was set.\\n            // Rewards the user with COMP accrued from the start of when supplier rewards were first\\n            // set for the market.\\n            supplierIndex = compInitialIndex;\\n        }\\n\\n        // Calculate change in the cumulative sum of the COMP per cToken accrued\\n        Double memory deltaIndex = Double({\\n            mantissa: sub_(supplyIndex, supplierIndex)\\n        });\\n\\n        uint256 supplierTokens = CToken(cToken).balanceOf(supplier);\\n\\n        // Calculate COMP accrued: cTokenAmount * accruedPerCToken\\n        uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\\n\\n        uint256 supplierAccrued = add_(compAccrued[supplier], supplierDelta);\\n        compAccrued[supplier] = supplierAccrued;\\n\\n        emit DistributedSupplierComp(\\n            CToken(cToken),\\n            supplier,\\n            supplierDelta,\\n            supplyIndex\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n     * @param cToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute COMP to\\n     */\\n    function distributeBorrowerComp(\\n        address cToken,\\n        address borrower,\\n        Exp memory marketBorrowIndex\\n    ) internal {\\n        // TODO: Don't distribute supplier COMP if the user is not in the borrower market.\\n        // This check should be as gas efficient as possible as distributeBorrowerComp is called in many places.\\n        // - We really don't want to call an external contract as that's quite expensive.\\n\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n        uint256 borrowIndex = borrowState.index;\\n        uint256 borrowerIndex = compBorrowerIndex[cToken][borrower];\\n\\n        // Update borrowers's index to the current index since we are distributing accrued COMP\\n        compBorrowerIndex[cToken][borrower] = borrowIndex;\\n\\n        if (borrowerIndex == 0 && borrowIndex >= compInitialIndex) {\\n            // Covers the case where users borrowed tokens before the market's borrow state index was set.\\n            // Rewards the user with COMP accrued from the start of when borrower rewards were first\\n            // set for the market.\\n            borrowerIndex = compInitialIndex;\\n        }\\n\\n        // Calculate change in the cumulative sum of the COMP per borrowed unit accrued\\n        Double memory deltaIndex = Double({\\n            mantissa: sub_(borrowIndex, borrowerIndex)\\n        });\\n\\n        uint256 borrowerAmount = div_(\\n            CToken(cToken).borrowBalanceStored(borrower),\\n            marketBorrowIndex\\n        );\\n\\n        // Calculate COMP accrued: cTokenAmount * accruedPerBorrowedUnit\\n        uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\\n\\n        uint256 borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);\\n        compAccrued[borrower] = borrowerAccrued;\\n\\n        emit DistributedBorrowerComp(\\n            CToken(cToken),\\n            borrower,\\n            borrowerDelta,\\n            borrowIndex\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate additional accrued COMP for a contributor since last accrual\\n     * @param contributor The address to calculate contributor rewards for\\n     */\\n    function updateContributorRewards(address contributor) public {\\n        uint256 compSpeed = compContributorSpeeds[contributor];\\n        uint256 blockNumber = getBlockNumber();\\n        uint256 deltaBlocks = sub_(\\n            blockNumber,\\n            lastContributorBlock[contributor]\\n        );\\n        if (deltaBlocks > 0 && compSpeed > 0) {\\n            uint256 newAccrued = mul_(deltaBlocks, compSpeed);\\n            uint256 contributorAccrued = add_(\\n                compAccrued[contributor],\\n                newAccrued\\n            );\\n\\n            compAccrued[contributor] = contributorAccrued;\\n            lastContributorBlock[contributor] = blockNumber;\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim all the comp accrued by holder in all markets\\n     * @param holder The address to claim COMP for\\n     */\\n    function claimComp(address holder) public {\\n        return claimComp(holder, allMarkets);\\n    }\\n\\n    /**\\n     * @notice Claim all the comp accrued by holder in the specified markets\\n     * @param holder The address to claim COMP for\\n     * @param cTokens The list of markets to claim COMP in\\n     */\\n    function claimComp(address holder, CToken[] memory cTokens) public {\\n        address[] memory holders = new address[](1);\\n        holders[0] = holder;\\n        claimComp(holders, cTokens, true, true);\\n    }\\n\\n    /**\\n     * @notice Claim all comp accrued by the holders\\n     * @param holders The addresses to claim COMP for\\n     * @param cTokens The list of markets to claim COMP in\\n     * @param borrowers Whether or not to claim COMP earned by borrowing\\n     * @param suppliers Whether or not to claim COMP earned by supplying\\n     */\\n    function claimComp(\\n        address[] memory holders,\\n        CToken[] memory cTokens,\\n        bool borrowers,\\n        bool suppliers\\n    ) public {\\n        for (uint256 i = 0; i < cTokens.length; i++) {\\n            CToken cToken = cTokens[i];\\n            require(markets[address(cToken)].isListed, \\\"market must be listed\\\");\\n            if (borrowers == true) {\\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\n                updateCompBorrowIndex(address(cToken), borrowIndex);\\n                for (uint256 j = 0; j < holders.length; j++) {\\n                    distributeBorrowerComp(\\n                        address(cToken),\\n                        holders[j],\\n                        borrowIndex\\n                    );\\n                }\\n            }\\n            if (suppliers == true) {\\n                updateCompSupplyIndex(address(cToken));\\n                for (uint256 j = 0; j < holders.length; j++) {\\n                    distributeSupplierComp(address(cToken), holders[j]);\\n                }\\n            }\\n        }\\n        for (uint256 j = 0; j < holders.length; j++) {\\n            compAccrued[holders[j]] = grantCompInternal(\\n                holders[j],\\n                compAccrued[holders[j]]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer COMP to the user\\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\n     * @param user The address of the user to transfer COMP to\\n     * @param amount The amount of COMP to (possibly) transfer\\n     * @return The amount of COMP which was NOT transferred to the user\\n     */\\n    function grantCompInternal(\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        Comp comp = Comp(getCompAddress());\\n        uint256 compRemaining = comp.balanceOf(address(this));\\n        if (amount > 0 && amount <= compRemaining) {\\n            comp.transfer(user, amount);\\n            return 0;\\n        }\\n        return amount;\\n    }\\n\\n    /*** Comp Distribution Admin ***/\\n\\n    /**\\n     * @notice Transfer COMP to the recipient\\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\n     * @param recipient The address of the recipient to transfer COMP to\\n     * @param amount The amount of COMP to (possibly) transfer\\n     */\\n    function _grantComp(address recipient, uint256 amount) public {\\n        require(adminOrInitializing(), \\\"only admin can grant comp\\\");\\n        uint256 amountLeft = grantCompInternal(recipient, amount);\\n        require(amountLeft == 0, \\\"insufficient comp for grant\\\");\\n        emit CompGranted(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Set COMP borrow and supply speeds for the specified markets.\\n     * @param cTokens The markets whose COMP speed to update.\\n     * @param supplySpeeds New supply-side COMP speed for the corresponding market.\\n     * @param borrowSpeeds New borrow-side COMP speed for the corresponding market.\\n     */\\n    function _setCompSpeeds(\\n        CToken[] memory cTokens,\\n        uint256[] memory supplySpeeds,\\n        uint256[] memory borrowSpeeds\\n    ) public {\\n        require(adminOrInitializing(), \\\"only admin can set comp speed\\\");\\n\\n        uint256 numTokens = cTokens.length;\\n        require(\\n            numTokens == supplySpeeds.length &&\\n                numTokens == borrowSpeeds.length,\\n            \\\"Comptroller::_setCompSpeeds invalid input\\\"\\n        );\\n\\n        for (uint256 i = 0; i < numTokens; ++i) {\\n            setCompSpeedInternal(cTokens[i], supplySpeeds[i], borrowSpeeds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set COMP speed for a single contributor\\n     * @param contributor The contributor whose COMP speed to update\\n     * @param compSpeed New COMP speed for contributor\\n     */\\n    function _setContributorCompSpeed(\\n        address contributor,\\n        uint256 compSpeed\\n    ) public {\\n        require(adminOrInitializing(), \\\"only admin can set comp speed\\\");\\n\\n        // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\\n        updateContributorRewards(contributor);\\n        if (compSpeed == 0) {\\n            // release storage\\n            delete lastContributorBlock[contributor];\\n        } else {\\n            lastContributorBlock[contributor] = getBlockNumber();\\n        }\\n        compContributorSpeeds[contributor] = compSpeed;\\n\\n        emit ContributorCompSpeedUpdated(contributor, compSpeed);\\n    }\\n\\n    /**\\n     * @notice Return all of the markets\\n     * @dev The automatic getter may be used to access an individual market.\\n     * @return The list of market addresses\\n     */\\n    function getAllMarkets() public view returns (CToken[] memory) {\\n        return allMarkets;\\n    }\\n\\n    /**\\n     * @notice Returns true if the given cToken market has been deprecated\\n     * @dev All borrows in a deprecated cToken market can be immediately liquidated\\n     * @param cToken The market to check if deprecated\\n     */\\n    function isDeprecated(CToken cToken) public view returns (bool) {\\n        return\\n            markets[address(cToken)].collateralFactorMantissa == 0 &&\\n            borrowGuardianPaused[address(cToken)] == true &&\\n            cToken.reserveFactorMantissa() == 1e18;\\n    }\\n\\n    function getBlockNumber() public view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Return the address of the MARE token\\n     * @return The address of MARE\\n     */\\n    function getCompAddress() public view virtual returns (address) {\\n        return 0xd86C8d4279CCaFbec840c782BcC50D201f277419;\\n    }\\n}\\n\"\n    },\n    \"contracts/ComptrollerInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nabstract contract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(\\n        address[] calldata cTokens\\n    ) external virtual returns (uint[] memory);\\n\\n    function exitMarket(address cToken) external virtual returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint mintAmount\\n    ) external virtual returns (uint);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint mintAmount,\\n        uint mintTokens\\n    ) external virtual;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint redeemTokens\\n    ) external virtual returns (uint);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint redeemAmount,\\n        uint redeemTokens\\n    ) external virtual;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint borrowAmount\\n    ) external virtual returns (uint);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint borrowAmount\\n    ) external virtual;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount\\n    ) external virtual returns (uint);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex\\n    ) external virtual;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount\\n    ) external virtual returns (uint);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens\\n    ) external virtual;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external virtual returns (uint);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external virtual;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint transferTokens\\n    ) external virtual returns (uint);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint transferTokens\\n    ) external virtual;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount\\n    ) external view virtual returns (uint, uint);\\n}\\n\"\n    },\n    \"contracts/ComptrollerStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address public pendingAdmin;\\n\\n    /**\\n     * @notice Active brains of Unitroller\\n     */\\n    address public comptrollerImplementation;\\n\\n    /**\\n     * @notice Pending brains of Unitroller\\n     */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint256 public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint256 public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint256 public maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => CToken[]) public accountAssets;\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    struct Market {\\n        // Whether or not this market is listed\\n        bool isListed;\\n        //  Multiplier representing the most one can borrow against their collateral in this market.\\n        //  For instance, 0.9 to allow borrowing 90% of collateral value.\\n        //  Must be between 0 and 1, and stored as a mantissa.\\n        uint256 collateralFactorMantissa;\\n        // Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n        // Whether or not this market receives COMP\\n        bool isComped;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    struct CompMarketState {\\n        // The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n        // The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /// @notice The rate at which the flywheel distributes COMP, per block\\n    uint256 public compRate;\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    mapping(address => uint256) public compSpeeds;\\n\\n    /// @notice The COMP market supply state for each market\\n    mapping(address => CompMarketState) public compSupplyState;\\n\\n    /// @notice The COMP market borrow state for each market\\n    mapping(address => CompMarketState) public compBorrowState;\\n\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint256)) public compSupplierIndex;\\n\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint256)) public compBorrowerIndex;\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    mapping(address => uint256) public compAccrued;\\n}\\n\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\n    // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n    address public borrowCapGuardian;\\n\\n    // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n    mapping(address => uint256) public borrowCaps;\\n}\\n\\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\\n    /// @notice The portion of COMP that each contributor receives per block\\n    mapping(address => uint256) public compContributorSpeeds;\\n\\n    /// @notice Last block at which a contributor's COMP rewards have been allocated\\n    mapping(address => uint256) public lastContributorBlock;\\n}\\n\\ncontract ComptrollerV6Storage is ComptrollerV5Storage {\\n    /// @notice The rate at which comp is distributed to the corresponding borrow market (per block)\\n    mapping(address => uint256) public compBorrowSpeeds;\\n\\n    /// @notice The rate at which comp is distributed to the corresponding supply market (per block)\\n    mapping(address => uint256) public compSupplySpeeds;\\n}\\n\\ncontract ComptrollerV7Storage is ComptrollerV6Storage {\\n    /// @notice Flag indicating whether the function to fix COMP accruals has been executed (RE: proposal 62 bug)\\n    bool public proposal65FixExecuted;\\n\\n    /// @notice Accounting storage mapping account addresses to how much COMP they owe the protocol.\\n    mapping(address => uint256) public compReceivable;\\n}\\n\"\n    },\n    \"contracts/CToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\nabstract contract CToken is\\n    CTokenInterface,\\n    ExponentialNoError,\\n    TokenErrorReporter\\n{\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint256 initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(\\n            accrualBlockNumber == 0 && borrowIndex == 0,\\n            \\\"market may only be initialized once\\\"\\n        );\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(\\n            initialExchangeRateMantissa > 0,\\n            \\\"initial exchange rate must be greater than zero.\\\"\\n        );\\n\\n        // Set the comptroller\\n        uint256 err = _setComptroller(comptroller_);\\n        require(err == NO_ERROR, \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == NO_ERROR, \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return 0 if the transfer succeeded, else revert\\n     */\\n    function transferTokens(\\n        address spender,\\n        address src,\\n        address dst,\\n        uint256 tokens\\n    ) internal returns (uint256) {\\n        /* Fail if transfer not allowed */\\n        uint256 allowed = comptroller.transferAllowed(\\n            address(this),\\n            src,\\n            dst,\\n            tokens\\n        );\\n        if (allowed != 0) {\\n            revert TransferComptrollerRejection(allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            revert TransferNotAllowed();\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint256 startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = type(uint256).max;\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        uint256 allowanceNew = startingAllowance - tokens;\\n        uint256 srcTokensNew = accountTokens[src] - tokens;\\n        uint256 dstTokensNew = accountTokens[dst] + tokens;\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != type(uint256).max) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        // unused function\\n        // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(\\n        address dst,\\n        uint256 amount\\n    ) external override nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external override nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (uint256.max means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view override returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(\\n        address owner\\n    ) external override returns (uint256) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(\\n        address account\\n    ) external view override returns (uint256, uint256, uint256, uint256) {\\n        return (\\n            NO_ERROR,\\n            accountTokens[account],\\n            borrowBalanceStoredInternal(account),\\n            exchangeRateStoredInternal()\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view override returns (uint256) {\\n        return\\n            interestRateModel.getBorrowRate(\\n                getCashPrior(),\\n                totalBorrows,\\n                totalReserves\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view override returns (uint256) {\\n        return\\n            interestRateModel.getSupplyRate(\\n                getCashPrior(),\\n                totalBorrows,\\n                totalReserves,\\n                reserveFactorMantissa\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent()\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        accrueInterest();\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(\\n        address account\\n    ) external override nonReentrant returns (uint256) {\\n        accrueInterest();\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(\\n        address account\\n    ) public view override returns (uint256) {\\n        return borrowBalanceStoredInternal(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(\\n        address account\\n    ) internal view returns (uint256) {\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return 0;\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        uint256 principalTimesIndex = borrowSnapshot.principal * borrowIndex;\\n        return principalTimesIndex / borrowSnapshot.interestIndex;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent()\\n        public\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        accrueInterest();\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view override returns (uint256) {\\n        return exchangeRateStoredInternal();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStoredInternal()\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return initialExchangeRateMantissa;\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint256 totalCash = getCashPrior();\\n            uint256 cashPlusBorrowsMinusReserves = totalCash +\\n                totalBorrows -\\n                totalReserves;\\n            uint256 exchangeRate = (cashPlusBorrowsMinusReserves * expScale) /\\n                _totalSupply;\\n\\n            return exchangeRate;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view override returns (uint256) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public virtual override returns (uint256) {\\n        /* Remember the initial block number */\\n        uint256 currentBlockNumber = getBlockNumber();\\n        uint256 accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return NO_ERROR;\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint256 cashPrior = getCashPrior();\\n        uint256 borrowsPrior = totalBorrows;\\n        uint256 reservesPrior = totalReserves;\\n        uint256 borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate(\\n            cashPrior,\\n            borrowsPrior,\\n            reservesPrior\\n        );\\n        require(\\n            borrowRateMantissa <= borrowRateMaxMantissa,\\n            \\\"borrow rate is absurdly high\\\"\\n        );\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        uint256 blockDelta = currentBlockNumber - accrualBlockNumberPrior;\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor = mul_(\\n            Exp({mantissa: borrowRateMantissa}),\\n            blockDelta\\n        );\\n        uint256 interestAccumulated = mul_ScalarTruncate(\\n            simpleInterestFactor,\\n            borrowsPrior\\n        );\\n        uint256 totalBorrowsNew = interestAccumulated + borrowsPrior;\\n        uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\\n            Exp({mantissa: reserveFactorMantissa}),\\n            interestAccumulated,\\n            reservesPrior\\n        );\\n        uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(\\n            simpleInterestFactor,\\n            borrowIndexPrior,\\n            borrowIndexPrior\\n        );\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(\\n            cashPrior,\\n            interestAccumulated,\\n            borrowIndexNew,\\n            totalBorrowsNew\\n        );\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     */\\n    function mintInternal(uint256 mintAmount) internal nonReentrant {\\n        accrueInterest();\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     */\\n    function mintFresh(address minter, uint256 mintAmount) internal {\\n        /* Fail if mint not allowed */\\n        uint256 allowed = comptroller.mintAllowed(\\n            address(this),\\n            minter,\\n            mintAmount\\n        );\\n        if (allowed != 0) {\\n            revert MintComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert MintFreshnessCheck();\\n        }\\n\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        uint256 actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        uint256 mintTokens = div_(actualMintAmount, exchangeRate);\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         * And write them into storage\\n         */\\n        totalSupply = totalSupply + mintTokens;\\n        accountTokens[minter] = accountTokens[minter] + mintTokens;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, actualMintAmount, mintTokens);\\n        emit Transfer(address(this), minter, mintTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.mintVerify(address(this), minter, actualMintAmount, mintTokens);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     */\\n    function redeemInternal(uint256 redeemTokens) internal nonReentrant {\\n        accrueInterest();\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        redeemFresh(payable(msg.sender), redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     */\\n    function redeemUnderlyingInternal(\\n        uint256 redeemAmount\\n    ) internal nonReentrant {\\n        accrueInterest();\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        redeemFresh(payable(msg.sender), 0, redeemAmount);\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     */\\n    function redeemFresh(\\n        address payable redeemer,\\n        uint256 redeemTokensIn,\\n        uint256 redeemAmountIn\\n    ) internal {\\n        require(\\n            redeemTokensIn == 0 || redeemAmountIn == 0,\\n            \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\"\\n        );\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\n\\n        uint256 redeemTokens;\\n        uint256 redeemAmount;\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            redeemTokens = redeemTokensIn;\\n            redeemAmount = mul_ScalarTruncate(exchangeRate, redeemTokensIn);\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n            redeemTokens = div_(redeemAmountIn, exchangeRate);\\n            redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint256 allowed = comptroller.redeemAllowed(\\n            address(this),\\n            redeemer,\\n            redeemTokens\\n        );\\n        if (allowed != 0) {\\n            revert RedeemComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert RedeemFreshnessCheck();\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < redeemAmount) {\\n            revert RedeemTransferOutNotPossible();\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We write the previously calculated values into storage.\\n         *  Note: Avoid token reentrancy attacks by writing reduced supply before external transfer.\\n         */\\n        totalSupply = totalSupply - redeemTokens;\\n        accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens;\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, redeemAmount);\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), redeemTokens);\\n        emit Redeem(redeemer, redeemAmount, redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(\\n            address(this),\\n            redeemer,\\n            redeemAmount,\\n            redeemTokens\\n        );\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     */\\n    function borrowInternal(uint256 borrowAmount) internal nonReentrant {\\n        accrueInterest();\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        borrowFresh(payable(msg.sender), borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Users borrow assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     */\\n    function borrowFresh(\\n        address payable borrower,\\n        uint256 borrowAmount\\n    ) internal {\\n        /* Fail if borrow not allowed */\\n        uint256 allowed = comptroller.borrowAllowed(\\n            address(this),\\n            borrower,\\n            borrowAmount\\n        );\\n        if (allowed != 0) {\\n            revert BorrowComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert BorrowFreshnessCheck();\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            revert BorrowCashNotAvailable();\\n        }\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowNew = accountBorrow + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n        uint256 accountBorrowsNew = accountBorrowsPrev + borrowAmount;\\n        uint256 totalBorrowsNew = totalBorrows + borrowAmount;\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We write the previously calculated values into storage.\\n         *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\\n        `*/\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = totalBorrowsNew;\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n     */\\n    function repayBorrowInternal(uint256 repayAmount) internal nonReentrant {\\n        accrueInterest();\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n     */\\n    function repayBorrowBehalfInternal(\\n        address borrower,\\n        uint256 repayAmount\\n    ) internal nonReentrant {\\n        accrueInterest();\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\\n     * @return (uint) the actual repayment amount.\\n     */\\n    function repayBorrowFresh(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) internal returns (uint256) {\\n        /* Fail if repayBorrow not allowed */\\n        uint256 allowed = comptroller.repayBorrowAllowed(\\n            address(this),\\n            payer,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            revert RepayBorrowComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert RepayBorrowFreshnessCheck();\\n        }\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        uint256 repayAmountFinal = repayAmount == type(uint256).max\\n            ? accountBorrowsPrev\\n            : repayAmount;\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        uint256 actualRepayAmount = doTransferIn(payer, repayAmountFinal);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        uint256 accountBorrowsNew = accountBorrowsPrev - actualRepayAmount;\\n        uint256 totalBorrowsNew = totalBorrows - actualRepayAmount;\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(\\n            payer,\\n            borrower,\\n            actualRepayAmount,\\n            accountBorrowsNew,\\n            totalBorrowsNew\\n        );\\n\\n        return actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     */\\n    function liquidateBorrowInternal(\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) internal nonReentrant {\\n        accrueInterest();\\n\\n        uint256 error = cTokenCollateral.accrueInterest();\\n        if (error != NO_ERROR) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            revert LiquidateAccrueCollateralInterestFailed(error);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        liquidateBorrowFresh(\\n            msg.sender,\\n            borrower,\\n            repayAmount,\\n            cTokenCollateral\\n        );\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     */\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) internal {\\n        /* Fail if liquidate not allowed */\\n        uint256 allowed = comptroller.liquidateBorrowAllowed(\\n            address(this),\\n            address(cTokenCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            revert LiquidateComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert LiquidateFreshnessCheck();\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            revert LiquidateCollateralFreshnessCheck();\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            revert LiquidateLiquidatorIsBorrower();\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            revert LiquidateCloseAmountIsZero();\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == type(uint256).max) {\\n            revert LiquidateCloseAmountIsUintMax();\\n        }\\n\\n        /* Fail if repayBorrow fails */\\n        uint256 actualRepayAmount = repayBorrowFresh(\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint256 amountSeizeError, uint256 seizeTokens) = comptroller\\n            .liquidateCalculateSeizeTokens(\\n                address(this),\\n                address(cTokenCollateral),\\n                actualRepayAmount\\n            );\\n        require(\\n            amountSeizeError == NO_ERROR,\\n            \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\"\\n        );\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(\\n            cTokenCollateral.balanceOf(borrower) >= seizeTokens,\\n            \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\"\\n        );\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            require(\\n                cTokenCollateral.seize(liquidator, borrower, seizeTokens) ==\\n                    NO_ERROR,\\n                \\\"token seizure failed\\\"\\n            );\\n        }\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(\\n            liquidator,\\n            borrower,\\n            actualRepayAmount,\\n            address(cTokenCollateral),\\n            seizeTokens\\n        );\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external override nonReentrant returns (uint256) {\\n        seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) internal {\\n        /* Fail if seize not allowed */\\n        uint256 allowed = comptroller.seizeAllowed(\\n            address(this),\\n            seizerToken,\\n            liquidator,\\n            borrower,\\n            seizeTokens\\n        );\\n        if (allowed != 0) {\\n            revert LiquidateSeizeComptrollerRejection(allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            revert LiquidateSeizeLiquidatorIsBorrower();\\n        }\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        uint256 protocolSeizeTokens = mul_(\\n            seizeTokens,\\n            Exp({mantissa: protocolSeizeShareMantissa})\\n        );\\n        uint256 liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens;\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\\n        uint256 protocolSeizeAmount = mul_ScalarTruncate(\\n            exchangeRate,\\n            protocolSeizeTokens\\n        );\\n        uint256 totalReservesNew = totalReserves + protocolSeizeAmount;\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the calculated values into storage */\\n        totalReserves = totalReservesNew;\\n        totalSupply = totalSupply - protocolSeizeTokens;\\n        accountTokens[borrower] = accountTokens[borrower] - seizeTokens;\\n        accountTokens[liquidator] =\\n            accountTokens[liquidator] +\\n            liquidatorSeizeTokens;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, liquidatorSeizeTokens);\\n        emit Transfer(borrower, address(this), protocolSeizeTokens);\\n        emit ReservesAdded(\\n            address(this),\\n            protocolSeizeAmount,\\n            totalReservesNew\\n        );\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPendingAdmin(\\n        address payable newPendingAdmin\\n    ) external override returns (uint256) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            revert SetPendingAdminOwnerCheck();\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptAdmin() external override returns (uint256) {\\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            revert AcceptAdminPendingAdminCheck();\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = payable(address(0));\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Sets a new comptroller for the market\\n     * @dev Admin function to set a new comptroller\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setComptroller(\\n        ComptrollerInterface newComptroller\\n    ) public override returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            revert SetComptrollerOwnerCheck();\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n     * @dev Admin function to accrue interest and set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactor(\\n        uint256 newReserveFactorMantissa\\n    ) external override nonReentrant returns (uint256) {\\n        accrueInterest();\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n     * @dev Admin function to set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactorFresh(\\n        uint256 newReserveFactorMantissa\\n    ) internal returns (uint256) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            revert SetReserveFactorAdminCheck();\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert SetReserveFactorFreshCheck();\\n        }\\n\\n        // Check newReserveFactor ≤ maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            revert SetReserveFactorBoundsCheck();\\n        }\\n\\n        uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(\\n            oldReserveFactorMantissa,\\n            newReserveFactorMantissa\\n        );\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(\\n        uint256 addAmount\\n    ) internal nonReentrant returns (uint256) {\\n        accrueInterest();\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        _addReservesFresh(addAmount);\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(\\n        uint256 addAmount\\n    ) internal returns (uint256, uint256) {\\n        // totalReserves + actualAddAmount\\n        uint256 totalReservesNew;\\n        uint256 actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert AddReservesFactorFreshCheck(actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (NO_ERROR, actualAddAmount);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(\\n        uint256 reduceAmount\\n    ) external override nonReentrant returns (uint256) {\\n        accrueInterest();\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(\\n        uint256 reduceAmount\\n    ) internal returns (uint256) {\\n        // totalReserves - reduceAmount\\n        uint256 totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            revert ReduceReservesAdminCheck();\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert ReduceReservesFreshCheck();\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            revert ReduceReservesCashNotAvailable();\\n        }\\n\\n        // Check reduceAmount ≤ reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            revert ReduceReservesCashValidation();\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(admin, reduceAmount);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(\\n        InterestRateModel newInterestRateModel\\n    ) public override returns (uint256) {\\n        accrueInterest();\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(\\n        InterestRateModel newInterestRateModel\\n    ) internal returns (uint256) {\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            revert SetInterestRateModelOwnerCheck();\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert SetInterestRateModelFreshCheck();\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(\\n            newInterestRateModel.isInterestRateModel(),\\n            \\\"marker method returned false\\\"\\n        );\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(\\n            oldInterestRateModel,\\n            newInterestRateModel\\n        );\\n\\n        return NO_ERROR;\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(\\n        address from,\\n        uint256 amount\\n    ) internal virtual returns (uint256);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint256 amount) internal virtual;\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\"\n    },\n    \"contracts/CTokenInterfaces.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    // Maximum borrow rate that can ever be applied (.0005% / block)\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    // Maximum fraction of interest that can be set aside for reserves\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    // Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    // Official record of token balances for each account\\n    mapping(address => uint) internal accountTokens;\\n\\n    // Approved token transfer amounts on behalf of others\\n    mapping(address => mapping(address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    // Mapping of account addresses to outstanding borrow balances\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    /**\\n     * @notice Share of seized collateral that is added to reserves\\n     */\\n    uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n}\\n\\nabstract contract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(\\n        uint cashPrior,\\n        uint interestAccumulated,\\n        uint borrowIndex,\\n        uint totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(\\n        address borrower,\\n        uint borrowAmount,\\n        uint accountBorrows,\\n        uint totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint accountBorrows,\\n        uint totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        address cTokenCollateral,\\n        uint seizeTokens\\n    );\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(\\n        ComptrollerInterface oldComptroller,\\n        ComptrollerInterface newComptroller\\n    );\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(\\n        InterestRateModel oldInterestRateModel,\\n        InterestRateModel newInterestRateModel\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(\\n        uint oldReserveFactorMantissa,\\n        uint newReserveFactorMantissa\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(\\n        address benefactor,\\n        uint addAmount,\\n        uint newTotalReserves\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(\\n        address admin,\\n        uint reduceAmount,\\n        uint newTotalReserves\\n    );\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external virtual returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint amount\\n    ) external virtual returns (bool);\\n\\n    function approve(\\n        address spender,\\n        uint amount\\n    ) external virtual returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view virtual returns (uint);\\n\\n    function balanceOf(address owner) external view virtual returns (uint);\\n\\n    function balanceOfUnderlying(address owner) external virtual returns (uint);\\n\\n    function getAccountSnapshot(\\n        address account\\n    ) external view virtual returns (uint, uint, uint, uint);\\n\\n    function borrowRatePerBlock() external view virtual returns (uint);\\n\\n    function supplyRatePerBlock() external view virtual returns (uint);\\n\\n    function totalBorrowsCurrent() external virtual returns (uint);\\n\\n    function borrowBalanceCurrent(\\n        address account\\n    ) external virtual returns (uint);\\n\\n    function borrowBalanceStored(\\n        address account\\n    ) external view virtual returns (uint);\\n\\n    function exchangeRateCurrent() external virtual returns (uint);\\n\\n    function exchangeRateStored() external view virtual returns (uint);\\n\\n    function getCash() external view virtual returns (uint);\\n\\n    function accrueInterest() external virtual returns (uint);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external virtual returns (uint);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(\\n        address payable newPendingAdmin\\n    ) external virtual returns (uint);\\n\\n    function _acceptAdmin() external virtual returns (uint);\\n\\n    function _setComptroller(\\n        ComptrollerInterface newComptroller\\n    ) external virtual returns (uint);\\n\\n    function _setReserveFactor(\\n        uint newReserveFactorMantissa\\n    ) external virtual returns (uint);\\n\\n    function _reduceReserves(uint reduceAmount) external virtual returns (uint);\\n\\n    function _setInterestRateModel(\\n        InterestRateModel newInterestRateModel\\n    ) external virtual returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\nabstract contract CErc20Interface is CErc20Storage {\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external virtual returns (uint);\\n\\n    function redeem(uint redeemTokens) external virtual returns (uint);\\n\\n    function redeemUnderlying(\\n        uint redeemAmount\\n    ) external virtual returns (uint);\\n\\n    function borrow(uint borrowAmount) external virtual returns (uint);\\n\\n    function repayBorrow(uint repayAmount) external virtual returns (uint);\\n\\n    function repayBorrowBehalf(\\n        address borrower,\\n        uint repayAmount\\n    ) external virtual returns (uint);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) external virtual returns (uint);\\n\\n    function sweepToken(EIP20NonStandardInterface token) external virtual;\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external virtual returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\nabstract contract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(\\n        address oldImplementation,\\n        address newImplementation\\n    );\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(\\n        address implementation_,\\n        bool allowResign,\\n        bytes memory becomeImplementationData\\n    ) external virtual;\\n}\\n\\nabstract contract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) external virtual;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() external virtual;\\n}\\n\"\n    },\n    \"contracts/EIP20Interface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return success Whether or not the transfer succeeded\\n     */\\n    function transfer(\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return success Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n}\\n\"\n    },\n    \"contracts/EIP20NonStandardInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n}\\n\"\n    },\n    \"contracts/ErrorReporter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(\\n        Error err,\\n        FailureInfo info,\\n        uint opaqueError\\n    ) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    uint public constant NO_ERROR = 0; // support legacy return codes\\n\\n    error TransferComptrollerRejection(uint256 errorCode);\\n    error TransferNotAllowed();\\n    error TransferNotEnough();\\n    error TransferTooMuch();\\n\\n    error MintComptrollerRejection(uint256 errorCode);\\n    error MintFreshnessCheck();\\n\\n    error RedeemComptrollerRejection(uint256 errorCode);\\n    error RedeemFreshnessCheck();\\n    error RedeemTransferOutNotPossible();\\n\\n    error BorrowComptrollerRejection(uint256 errorCode);\\n    error BorrowFreshnessCheck();\\n    error BorrowCashNotAvailable();\\n\\n    error RepayBorrowComptrollerRejection(uint256 errorCode);\\n    error RepayBorrowFreshnessCheck();\\n\\n    error LiquidateComptrollerRejection(uint256 errorCode);\\n    error LiquidateFreshnessCheck();\\n    error LiquidateCollateralFreshnessCheck();\\n    error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\\n    error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\\n    error LiquidateLiquidatorIsBorrower();\\n    error LiquidateCloseAmountIsZero();\\n    error LiquidateCloseAmountIsUintMax();\\n    error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\\n\\n    error LiquidateSeizeComptrollerRejection(uint256 errorCode);\\n    error LiquidateSeizeLiquidatorIsBorrower();\\n\\n    error AcceptAdminPendingAdminCheck();\\n\\n    error SetComptrollerOwnerCheck();\\n    error SetPendingAdminOwnerCheck();\\n\\n    error SetReserveFactorAdminCheck();\\n    error SetReserveFactorFreshCheck();\\n    error SetReserveFactorBoundsCheck();\\n\\n    error AddReservesFactorFreshCheck(uint256 actualAddAmount);\\n\\n    error ReduceReservesAdminCheck();\\n    error ReduceReservesFreshCheck();\\n    error ReduceReservesCashNotAvailable();\\n    error ReduceReservesCashValidation();\\n\\n    error SetInterestRateModelOwnerCheck();\\n    error SetInterestRateModelFreshCheck();\\n}\\n\"\n    },\n    \"contracts/ExponentialNoError.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale / 2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(\\n        Exp memory a,\\n        uint scalar\\n    ) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint scalar,\\n        uint addend\\n    ) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(\\n        Exp memory left,\\n        Exp memory right\\n    ) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(\\n        Exp memory left,\\n        Exp memory right\\n    ) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(\\n        Exp memory left,\\n        Exp memory right\\n    ) internal pure returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(\\n        uint n,\\n        string memory errorMessage\\n    ) internal pure returns (uint224) {\\n        require(n < 2 ** 224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(\\n        uint n,\\n        string memory errorMessage\\n    ) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) internal pure returns (uint) {\\n        return a + b;\\n    }\\n\\n    function sub_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) internal pure returns (uint) {\\n        return a - b;\\n    }\\n\\n    function mul_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(\\n        Double memory a,\\n        uint b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) internal pure returns (uint) {\\n        return a * b;\\n    }\\n\\n    function div_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) internal pure returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return\\n            Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(\\n        Double memory a,\\n        uint b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) internal pure returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) internal pure returns (uint) {\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\"\n    },\n    \"contracts/Governance/Comp.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract Comp {\\n    /// @notice EIP-20 token name for this token\\n    string public constant name = \\\"Compound\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public constant symbol = \\\"COMP\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    uint256 public constant totalSupply = 10000000e18; // 10 million Comp\\n\\n    /// @notice Allowance amounts on behalf of others\\n    mapping(address => mapping(address => uint96)) internal allowances;\\n\\n    /// @notice Official record of token balances for each account\\n    mapping(address => uint96) internal balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Construct a new Comp token\\n     * @param account The initial account to grant all the tokens\\n     */\\n    constructor(address account) public {\\n        balances[account] = uint96(totalSupply);\\n        emit Transfer(address(0), account, totalSupply);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(\\n        address account,\\n        address spender\\n    ) external view returns (uint256) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(\\n        address spender,\\n        uint256 rawAmount\\n    ) external returns (bool) {\\n        uint96 amount;\\n        if (rawAmount == type(uint256).max) {\\n            amount = type(uint96).max;\\n        } else {\\n            amount = safe96(rawAmount, \\\"Comp::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 rawAmount) external returns (bool) {\\n        uint96 amount = safe96(\\n            rawAmount,\\n            \\\"Comp::transfer: amount exceeds 96 bits\\\"\\n        );\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 rawAmount\\n    ) external returns (bool) {\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(\\n            rawAmount,\\n            \\\"Comp::approve: amount exceeds 96 bits\\\"\\n        );\\n\\n        if (spender != src && spenderAllowance != type(uint96).max) {\\n            uint96 newAllowance = sub96(\\n                spenderAllowance,\\n                amount,\\n                \\\"Comp::transferFrom: transfer amount exceeds spender allowance\\\"\\n            );\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                getChainId(),\\n                address(this)\\n            )\\n        );\\n        bytes32 structHash = keccak256(\\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\n        );\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n        );\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(\\n            signatory != address(0),\\n            \\\"Comp::delegateBySig: invalid signature\\\"\\n        );\\n        require(\\n            nonce == nonces[signatory]++,\\n            \\\"Comp::delegateBySig: invalid nonce\\\"\\n        );\\n        require(\\n            block.timestamp <= expiry,\\n            \\\"Comp::delegateBySig: signature expired\\\"\\n        );\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return\\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(\\n        address account,\\n        uint256 blockNumber\\n    ) public view returns (uint96) {\\n        require(\\n            blockNumber < block.number,\\n            \\\"Comp::getPriorVotes: not yet determined\\\"\\n        );\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(address src, address dst, uint96 amount) internal {\\n        require(\\n            src != address(0),\\n            \\\"Comp::_transferTokens: cannot transfer from the zero address\\\"\\n        );\\n        require(\\n            dst != address(0),\\n            \\\"Comp::_transferTokens: cannot transfer to the zero address\\\"\\n        );\\n\\n        balances[src] = sub96(\\n            balances[src],\\n            amount,\\n            \\\"Comp::_transferTokens: transfer amount exceeds balance\\\"\\n        );\\n        balances[dst] = add96(\\n            balances[dst],\\n            amount,\\n            \\\"Comp::_transferTokens: transfer amount overflows\\\"\\n        );\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint96 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0\\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\\n                    : 0;\\n                uint96 srcRepNew = sub96(\\n                    srcRepOld,\\n                    amount,\\n                    \\\"Comp::_moveVotes: vote amount underflows\\\"\\n                );\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0\\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\\n                    : 0;\\n                uint96 dstRepNew = add96(\\n                    dstRepOld,\\n                    amount,\\n                    \\\"Comp::_moveVotes: vote amount overflows\\\"\\n                );\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint96 oldVotes,\\n        uint96 newVotes\\n    ) internal {\\n        uint32 blockNumber = safe32(\\n            block.number,\\n            \\\"Comp::_writeCheckpoint: block number exceeds 32 bits\\\"\\n        );\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newVotes\\n            );\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(\\n        uint256 n,\\n        string memory errorMessage\\n    ) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(\\n        uint256 n,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(n < 2 ** 96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\"\n    },\n    \"contracts/InterestRateModel.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint cash,\\n        uint borrows,\\n        uint reserves\\n    ) external view virtual returns (uint);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint cash,\\n        uint borrows,\\n        uint reserves,\\n        uint reserveFactorMantissa\\n    ) external view virtual returns (uint);\\n}\\n\"\n    },\n    \"contracts/PriceOracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n     * @notice Get the underlying price of a cToken asset\\n     * @param cToken The cToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\n     *  Zero means the price is unavailable.\\n     */\\n    function getUnderlyingPrice(\\n        CToken cToken\\n    ) external view virtual returns (uint);\\n}\\n\"\n    },\n    \"contracts/Unitroller.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\n\\n/**\\n * @title ComptrollerCore\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their comptroller.\\n */\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\n    /**\\n     * @notice Emitted when pendingComptrollerImplementation is changed\\n     */\\n    event NewPendingImplementation(\\n        address oldPendingImplementation,\\n        address newPendingImplementation\\n    );\\n\\n    /**\\n     * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\n     */\\n    event NewImplementation(\\n        address oldImplementation,\\n        address newImplementation\\n    );\\n\\n    /**\\n     * @notice Emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor() public {\\n        // Set admin to caller\\n        admin = msg.sender;\\n    }\\n\\n    /*** Admin Functions ***/\\n    function _setPendingImplementation(\\n        address newPendingImplementation\\n    ) public returns (uint) {\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK\\n                );\\n        }\\n\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n        pendingComptrollerImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(\\n            oldPendingImplementation,\\n            pendingComptrollerImplementation\\n        );\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\n     * @dev Admin function for new implementation to accept it's role as implementation\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptImplementation() public returns (uint) {\\n        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\\n        if (\\n            msg.sender != pendingComptrollerImplementation ||\\n            pendingComptrollerImplementation == address(0)\\n        ) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK\\n                );\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldImplementation = comptrollerImplementation;\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n        comptrollerImplementation = pendingComptrollerImplementation;\\n\\n        pendingComptrollerImplementation = address(0);\\n\\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\\n        emit NewPendingImplementation(\\n            oldPendingImplementation,\\n            pendingComptrollerImplementation\\n        );\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK\\n                );\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptAdmin() public returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK\\n                );\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    fallback() external payable {\\n        // delegate all other functions to current implementation\\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\n\\n        assembly {\\n            let free_mem_ptr := mload(0x40)\\n            returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n            switch success\\n            case 0 {\\n                revert(free_mem_ptr, returndatasize())\\n            }\\n            default {\\n                return(free_mem_ptr, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "a853a33b1e6711789c9f4b99f721ae5c",
      "transactionHash": "0x72929b3874dacf2332274571c59f983fd772c7050b535eed96c8cb1cc25fcfba",
      "args": []
    },
    "decoded": {
      "from": "0xFb59Ce8986943163F14C590755b29dB2998F2322",
      "gasPrice": "1000000000",
      "gasLimit": "4732009",
      "to": null,
      "value": "0",
      "nonce": 114,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561543b806100326000396000f3fe608060405234801561001057600080fd5b506004361061048a5760003560e01c8063731f0c2b11610262578063b21be7fd11610151578063dce15449116100ce578063e9af029211610092578063e9af029214610c04578063eabe7d9114610c17578063ede4edd014610c2a578063f00a7a9214610c3d578063f4a433c014610c4a578063f851a44014610c6a57600080fd5b8063dce1544914610bae578063dcfbc0c714610bc1578063e4028eee14610bd4578063e6653f3d14610be7578063e875544614610bfb57600080fd5b8063c488847b11610115578063c488847b14610b15578063ca0af04314610b3d578063cc7ebdc414610b68578063d02f735114610b88578063da3d454c14610b9b57600080fd5b8063b21be7fd14610a84578063bb82aa5e14610aaf578063bdcdc25814610ac2578063bea6b8b814610ad5578063c299823814610af557600080fd5b806394b2294b116101df578063a8b43948116101a3578063a8b4394814610a2c578063aa90075414610a3f578063abfceffc14610a48578063ac0b0bb714610a68578063b0772d0b14610a7c57600080fd5b806394b2294b146109a9578063986ab838146109b25780639d1b5a0a146109d2578063a76b3fda146109ec578063a7f0e231146109ff57600080fd5b80638c57804e116102265780638c57804e146108b75780638e8f294b146108ef5780638ebf636414610942578063929fe9a11461095557806394543c151461099657600080fd5b8063731f0c2b1461083a578063741b25251461085d5780637dc0d1d01461087057806385b7beb81461088357806387f76303146108a357600080fd5b80634a5844321161037e5780635ec88c79116102fb5780636a56947e116102bf5780636a56947e1461077f5780636aa875b51461078d5780636b79c38d146107ad5780636d154ea5146108095780636d35bf911461082c57600080fd5b80635ec88c79146107205780635f5af1aa146107335780635fc7e71e14610746578063607ef6c1146107595780636810dfa61461076c57600080fd5b806351dff9891161034257806351dff989146106c157806352d84d1e146106d457806355ee1fe1146106e7578063598ee1cb146106fa5780635c7786051461070d57600080fd5b80634a584432146106445780634ada90af146106645780634e79238f1461066d5780634ef4c3e11461069b5780634fd42e17146106ae57600080fd5b8063267822471161040c5780633bcf7ec1116103d05780633bcf7ec1146105ed5780633c94786f1461060057806341c728b91461061457806342cbb15c1461062857806347ef3b3b1461062e57600080fd5b8063267822471461058e57806327efe3cb146105a15780632d70db78146105b4578063317b0b77146105c7578063391957d7146105da57600080fd5b80631d7b33d7116104535780631d7b33d7146104fa5780631ededc911461052857806321af45691461053d57806324008a621461056857806324a3d6221461057b57600080fd5b80627e3dd21461048f57806316b95e8f146104ac57806318c882a5146104c15780631c3db2e0146104d45780631d504dc6146104e7575b600080fd5b610497600181565b60405190151581526020015b60405180910390f35b6104bf6104ba366004614a3c565b610c7d565b005b6104976104cf366004614acb565b610f26565b6104bf6104e2366004614be3565b61105f565b6104bf6104f5366004614c33565b6110c2565b61051a610508366004614c33565b600f6020526000908152604090205481565b6040519081526020016104a3565b6104bf610536366004614c50565b5050505050565b601554610550906001600160a01b031681565b6040516001600160a01b0390911681526020016104a3565b61051a610576366004614cab565b611240565b600a54610550906001600160a01b031681565b600154610550906001600160a01b031681565b6104bf6105af366004614cfc565b6112fe565b6104976105c2366004614d28565b6113f5565b61051a6105d5366004614d45565b6114e5565b6104bf6105e8366004614c33565b61158c565b6104976105fb366004614acb565b611656565b600a5461049790600160a01b900460ff1681565b6104bf610622366004614d5e565b50505050565b4261051a565b6104bf61063c366004614da4565b505050505050565b61051a610652366004614c33565b60166020526000908152604090205481565b61051a60065481565b61068061067b366004614d5e565b611780565b604080519384526020840192909252908201526060016104a3565b61051a6106a9366004614e12565b6117c0565b61051a6106bc366004614d45565b611861565b6104bf6106cf366004614d5e565b6118be565b6105506106e2366004614d45565b61190d565b61051a6106f5366004614c33565b611937565b6104bf610708366004614cfc565b6119b0565b6104bf61071b366004614e12565b505050565b61068061072e366004614c33565b611aa4565b61051a610741366004614c33565b611adf565b61051a610754366004614e53565b611b58565b6104bf610767366004614a3c565b611d27565b6104bf61077a366004614f1b565b611f05565b6104bf610622366004614cab565b61051a61079b366004614c33565b601a6020526000908152604090205481565b6107e56107bb366004614c33565b6010602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604080516001600160e01b03909316835263ffffffff9091166020830152016104a3565b610497610817366004614c33565b600c6020526000908152604090205460ff1681565b6104bf610536366004614e53565b610497610848366004614c33565b600b6020526000908152604090205460ff1681565b6104bf61086b366004614c33565b61218f565b600454610550906001600160a01b031681565b61051a610891366004614c33565b601c6020526000908152604090205481565b600a5461049790600160b01b900460ff1681565b6107e56108c5366004614c33565b6011602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b6109236108fd366004614c33565b60096020526000908152604090208054600182015460039092015460ff91821692911683565b60408051931515845260208401929092521515908201526060016104a3565b610497610950366004614d28565b61223b565b610497610963366004614fa4565b6001600160a01b038082166000908152600960209081526040808320938616835260029093019052205460ff1692915050565b6104976109a4366004614c33565b612322565b61051a60075481565b61051a6109c0366004614c33565b60176020526000908152604090205481565b73d86c8d4279ccafbec840c782bcc50d201f277419610550565b61051a6109fa366004614c33565b6123e1565b610a146a0c097ce7bc90715b34b9f160241b81565b6040516001600160e01b0390911681526020016104a3565b6104bf610a3a36600461502d565b612513565b61051a600e5481565b610a5b610a56366004614c33565b612648565b6040516104a391906150b5565b600a5461049790600160b81b900460ff1681565b610a5b6126be565b61051a610a92366004614fa4565b601260209081526000928352604080842090915290825290205481565b600254610550906001600160a01b031681565b61051a610ad0366004614cab565b612720565b61051a610ae3366004614c33565b60186020526000908152604090205481565b610b08610b03366004615102565b6127ab565b6040516104a39190615137565b610b28610b23366004614e12565b612873565b604080519283526020830191909152016104a3565b61051a610b4b366004614fa4565b601360209081526000928352604080842090915290825290205481565b61051a610b76366004614c33565b60146020526000908152604090205481565b61051a610b96366004614e53565b612a91565b61051a610ba9366004614e12565b612c38565b610550610bbc366004614cfc565b613008565b600354610550906001600160a01b031681565b61051a610be2366004614cfc565b613040565b600a5461049790600160a81b900460ff1681565b61051a60055481565b6104bf610c12366004614c33565b6131d2565b61051a610c25366004614e12565b613236565b61051a610c38366004614c33565b613271565b601b546104979060ff1681565b61051a610c58366004614c33565b60196020526000908152604090205481565b600054610550906001600160a01b031681565b6000546001600160a01b03163314610ce65760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b60648201526084015b60405180910390fd5b601b5460ff1615610d485760405162461bcd60e51b815260206004820152602660248201527f416c72656164792065786563757465642074686973206f6e652d6f66662066756044820152653731ba34b7b760d11b6064820152608401610cdd565b828114610d875760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081a5b9c1d5d609a1b6044820152606401610cdd565b60008060008060005b87811015610f0e57888882818110610daa57610daa61516f565b9050602002016020810190610dbf9190614c33565b6001600160a01b0381166000908152601460205260409020549095509350868682818110610def57610def61516f565b90506020020135925083831115610e93576000610e0c858561519b565b6001600160a01b0387166000908152601c6020526040812054919250610e3282846135d7565b6001600160a01b0389166000818152601c6020908152604091829020849055815186815290810184905292935090917f17fea09d9a7ca41b2f9f9118f18f44848a62e9c70d55dd4385131eb2cf1b7e47910160405180910390a28695505050505b8215610efe57610ea384846135e3565b6001600160a01b038616600081815260146020908152604091829020849055815188815290810184905292945090917f4a5c134e28b537a76546993ea37f3b60d9190476df7356d3842aa40902e20f04910160405180910390a25b610f07816151b2565b9050610d90565b5050601b805460ff1916600117905550505050505050565b6001600160a01b03821660009081526009602052604081205460ff16610f5e5760405162461bcd60e51b8152600401610cdd906151cd565b600a546001600160a01b0316331480610f8157506000546001600160a01b031633145b610f9d5760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b0316331480610fb857506001821515145b610fd45760405162461bcd60e51b8152600401610cdd9061525c565b6001600160a01b0383166000818152600c6020908152604091829020805460ff19168615159081179091558251938452606091840182905260069184019190915265426f72726f7760d01b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a0015b60405180910390a150805b92915050565b6040805160018082528183019092526000916020808301908036833701905050905082816000815181106110955761109561516f565b60200260200101906001600160a01b031690816001600160a01b03168152505061071b8183600180611f05565b806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611100573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611124919061528c565b6001600160a01b0316336001600160a01b0316146111945760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676560448201526620627261696e7360c81b6064820152608401610cdd565b806001600160a01b031663c1e803346040518163ffffffff1660e01b81526004016020604051808303816000875af11580156111d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f891906152a9565b1561123d5760405162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b6044820152606401610cdd565b50565b6001600160a01b03841660009081526009602052604081205460ff16611268575060096112f6565b60006040518060200160405280876001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d791906152a9565b905290506112e586826135ef565b6112f08685836137e2565b60009150505b949350505050565b611306613962565b6113525760405162461bcd60e51b815260206004820152601960248201527f6f6e6c792061646d696e2063616e206772616e7420636f6d70000000000000006044820152606401610cdd565b600061135e838361398b565b905080156113ae5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420636f6d7020666f72206772616e7400000000006044820152606401610cdd565b604080516001600160a01b0385168152602081018490527f98b2f82a3a07f223a0be64b3d0f47711c64dccd1feafb94aa28156b38cd9695c910160405180910390a1505050565b600a546000906001600160a01b031633148061141b57506000546001600160a01b031633145b6114375760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b031633148061145257506001821515145b61146e5760405162461bcd60e51b8152600401610cdd9061525c565b600a8054831515600160b81b0260ff60b81b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906114d99084906040808252600590820152645365697a6560d81b6060820152901515602082015260800190565b60405180910390a15090565b600080546001600160a01b031633146115405760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792061646d696e2063616e2073657420636c6f736520666163746f72006044820152606401610cdd565b600580549083905560408051828152602081018590527f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd991015b60405180910390a160005b9392505050565b6000546001600160a01b031633146115f55760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792061646d696e2063616e2073657420626f72726f772063617020677560448201526530b93234b0b760d11b6064820152608401610cdd565b601580546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527feda98690e518e9a05f8ec6837663e188211b2da8f4906648b323f2c1d4434e29910160405180910390a15050565b6001600160a01b03821660009081526009602052604081205460ff1661168e5760405162461bcd60e51b8152600401610cdd906151cd565b600a546001600160a01b03163314806116b157506000546001600160a01b031633145b6116cd5760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b03163314806116e857506001821515145b6117045760405162461bcd60e51b8152600401610cdd9061525c565b6001600160a01b0383166000818152600b6020908152604091829020805460ff19168615159081179091558251938452606091840182905260049184019190915263135a5b9d60e21b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a00161104e565b6000806000806000806117958a8a8a8a613ab0565b9250925092508260118111156117ad576117ad6152c2565b95509093509150505b9450945094915050565b6001600160a01b0383166000908152600b602052604081205460ff161561181a5760405162461bcd60e51b815260206004820152600e60248201526d1b5a5b9d081a5cc81c185d5cd95960921b6044820152606401610cdd565b6001600160a01b03841660009081526009602052604090205460ff166118445760095b9050611585565b61184d84613dde565b6118578484613f56565b6000949350505050565b600080546001600160a01b03163314611880576110596001600b6140f4565b600680549083905560408051828152602081018590527faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec1316910161157a565b801580156118cc5750600082115b156106225760405162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b6044820152606401610cdd565b600d818154811061191d57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546001600160a01b0316331461195657611059600160106140f4565b600480546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e22910161157a565b6119b8613962565b611a045760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792061646d696e2063616e2073657420636f6d702073706565640000006044820152606401610cdd565b611a0d8261218f565b80611a30576001600160a01b038216600090815260186020526040812055611a4b565b426001600160a01b0383166000908152601860205260409020555b6001600160a01b03821660008181526017602052604090819020839055517f386537fa92edc3319af95f1f904dcf1900021e4f3f4e08169a577a09076e66b390611a989084815260200190565b60405180910390a25050565b600080600080600080611abb876000806000613ab0565b925092509250826011811115611ad357611ad36152c2565b97919650945092505050565b600080546001600160a01b03163314611afe57611059600160136140f4565b600a80546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e910161157a565b6001600160a01b03851660009081526009602052604081205460ff161580611b9957506001600160a01b03851660009081526009602052604090205460ff16155b15611ba85760095b9050611d1e565b6040516395dd919360e01b81526001600160a01b038481166004830152600091908816906395dd919390602401602060405180830381865afa158015611bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1691906152a9565b9050611c2187612322565b15611c8c5782811015611c875760405162461bcd60e51b815260206004820152602860248201527f43616e206e6f74207265706179206d6f7265207468616e2074686520746f74616044820152676c20626f72726f7760c01b6064820152608401610cdd565b611d18565b600080611c988661416d565b91935090915060009050826011811115611cb457611cb46152c2565b14611cd557816011811115611ccb57611ccb6152c2565b9350505050611d1e565b80611ce1576003611ccb565b6000611cfd60405180602001604052806005548152508561418d565b905080861115611d14576011945050505050611d1e565b5050505b60009150505b95945050505050565b6000546001600160a01b0316331480611d4a57506015546001600160a01b031633145b611db45760405162461bcd60e51b815260206004820152603560248201527f6f6e6c792061646d696e206f7220626f72726f772063617020677561726469616044820152746e2063616e2073657420626f72726f77206361707360581b6064820152608401610cdd565b82818115801590611dc457508082145b611e005760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610cdd565b60005b82811015611efc57848482818110611e1d57611e1d61516f565b9050602002013560166000898985818110611e3a57611e3a61516f565b9050602002016020810190611e4f9190614c33565b6001600160a01b03168152602081019190915260400160002055868682818110611e7b57611e7b61516f565b9050602002016020810190611e909190614c33565b6001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f6868684818110611ecc57611ecc61516f565b90506020020135604051611ee291815260200190565b60405180910390a280611ef4816151b2565b915050611e03565b50505050505050565b60005b83518110156120cc576000848281518110611f2557611f2561516f565b6020908102919091018101516001600160a01b0381166000908152600990925260409091205490915060ff16611f955760405162461bcd60e51b81526020600482015260156024820152741b585c9ad95d081b5d5cdd081899481b1a5cdd1959605a1b6044820152606401610cdd565b600184151514156120625760006040518060200160405280836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200f91906152a9565b9052905061201d82826135ef565b60005b875181101561205f5761204d8389838151811061203f5761203f61516f565b6020026020010151846137e2565b80612057816151b2565b915050612020565b50505b600183151514156120b95761207681613dde565b60005b86518110156120b7576120a5828883815181106120985761209861516f565b6020026020010151613f56565b806120af816151b2565b915050612079565b505b50806120c4816151b2565b915050611f08565b5060005b84518110156105365761213a8582815181106120ee576120ee61516f565b60200260200101516014600088858151811061210c5761210c61516f565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205461398b565b601460008784815181106121505761215061516f565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080612187906151b2565b9150506120d0565b6001600160a01b0381166000908152601760209081526040808320546018909252822054909142916121c29083906135e3565b90506000811180156121d45750600083115b156106225760006121e582856141a5565b6001600160a01b0386166000908152601460205260408120549192509061220c90836135d7565b6001600160a01b0387166000908152601460209081526040808320939093556018905220849055505050505050565b600a546000906001600160a01b031633148061226157506000546001600160a01b031633145b61227d5760405162461bcd60e51b8152600401610cdd90615215565b6000546001600160a01b031633148061229857506001821515145b6122b45760405162461bcd60e51b8152600401610cdd9061525c565b600a8054831515600160b01b0260ff60b01b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906114d99084906040808252600890820152672a3930b739b332b960c11b6060820152901515602082015260800190565b6001600160a01b03811660009081526009602052604081206001015415801561236857506001600160a01b0382166000908152600c602052604090205460ff1615156001145b80156110595750816001600160a01b031663173b99046040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d191906152a9565b670de0b6b3a76400001492915050565b600080546001600160a01b0316331461240057611059600160126140f4565b6001600160a01b03821660009081526009602052604090205460ff161561242d57611059600a60116140f4565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561246b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248f91906152d8565b506001600160a01b03821660009081526009602052604081208054600160ff19918216811783556003830180549092169091558101919091556124d1836141b1565b6124da8361429a565b6040516001600160a01b03841681527fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f9060200161157a565b61251b613962565b6125675760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792061646d696e2063616e2073657420636f6d702073706565640000006044820152606401610cdd565b82518251811480156125795750815181145b6125d75760405162461bcd60e51b815260206004820152602960248201527f436f6d7074726f6c6c65723a3a5f736574436f6d7053706565647320696e76616044820152681b1a59081a5b9c1d5d60ba1b6064820152608401610cdd565b60005b81811015610536576126388582815181106125f7576125f761516f565b60200260200101518583815181106126115761261161516f565b602002602001015185848151811061262b5761262b61516f565b6020026020010151614356565b612641816151b2565b90506125da565b6001600160a01b03811660009081526008602090815260408083208054825181850281018501909352808352606094938301828280156126b157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612693575b5093979650505050505050565b6060600d80548060200260200160405190810160405280929190818152602001828054801561271657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116126f8575b5050505050905090565b600a54600090600160b01b900460ff16156127725760405162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c881a5cc81c185d5cd95960721b6044820152606401610cdd565b600061277f868685614535565b9050801561278e5790506112f6565b61279786613dde565b6127a18686613f56565b6112f08685613f56565b805160609060008167ffffffffffffffff8111156127cb576127cb614b04565b6040519080825280602002602001820160405280156127f4578160200160208202803683370190505b50905060005b8281101561286b5760008582815181106128165761281661516f565b6020026020010151905061282a81336145ed565b601181111561283b5761283b6152c2565b83838151811061284d5761284d61516f565b60209081029190910101525080612863816151b2565b9150506127fa565b509392505050565b6004805460405163fc57d4df60e01b81526001600160a01b03868116938201939093526000928392839291169063fc57d4df90602401602060405180830381865afa1580156128c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ea91906152a9565b6004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935292935060009291169063fc57d4df90602401602060405180830381865afa15801561293c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296091906152a9565b905081158061296d575080155b1561298157600d6000935093505050612a89565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e591906152a9565b905060006129ff6040518060200160405280600081525090565b604080516020808201835260008083528351808301855290815283518083018552600654815284519283019094528882529192612a3b916146e2565b9250612a636040518060200160405280888152506040518060200160405280888152506146e2565b9150612a6f838361472a565b9050612a7b818b61418d565b600099509750505050505050505b935093915050565b600a54600090600160b81b900460ff1615612ae05760405162461bcd60e51b815260206004820152600f60248201526e1cd95a5e99481a5cc81c185d5cd959608a1b6044820152606401610cdd565b6001600160a01b03861660009081526009602052604090205460ff161580612b2157506001600160a01b03851660009081526009602052604090205460ff16155b15612b2d576009611ba1565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8f919061528c565b6001600160a01b0316866001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfa919061528c565b6001600160a01b031614612c0f576002611ba1565b612c1886613dde565b612c228684613f56565b612c2c8685613f56565b60009695505050505050565b6001600160a01b0383166000908152600c602052604081205460ff1615612c945760405162461bcd60e51b815260206004820152601060248201526f189bdc9c9bddc81a5cc81c185d5cd95960821b6044820152606401610cdd565b6001600160a01b03841660009081526009602052604090205460ff16612cbb57600961183d565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff16612db857336001600160a01b03851614612d3c5760405162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba1031329031aa37b5b2b760591b6044820152606401610cdd565b6000612d4833856145ed565b90506000816011811115612d5e57612d5e6152c2565b14612d7d57806011811115612d7557612d756152c2565b915050611585565b6001600160a01b038086166000908152600960209081526040808320938816835260029093019052205460ff16612db657612db66152f5565b505b6004805460405163fc57d4df60e01b81526001600160a01b038781169382019390935291169063fc57d4df90602401602060405180830381865afa158015612e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2891906152a9565b612e3357600d61183d565b6001600160a01b0384166000908152601660205260409020548015612f18576000856001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb691906152a9565b90506000612ec482866135d7565b9050828110612f155760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f77206361702072656163686564000000000000006044820152606401610cdd565b50505b600080612f288688600088613ab0565b91935090915060009050826011811115612f4457612f446152c2565b14612f6557816011811115612f5b57612f5b6152c2565b9350505050611585565b8015612f72576004612f5b565b60006040518060200160405280896001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe191906152a9565b90529050612fef88826135ef565b612ffa8888836137e2565b600098975050505050505050565b6008602052816000526040600020818154811061302457600080fd5b6000918252602090912001546001600160a01b03169150829050565b600080546001600160a01b031633146130665761305f600160066140f4565b9050611059565b6001600160a01b0383166000908152600960205260409020805460ff1661309b57613093600960076140f4565b915050611059565b60408051602080820183528582528251908101909252670c7d713b49da00008252906130c981835190511090565b156130e4576130da600660086140f4565b9350505050611059565b841580159061316057506004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935291169063fc57d4df90602401602060405180830381865afa15801561313a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315e91906152a9565b155b15613171576130da600d60096140f4565b60018301805490869055604080516001600160a01b0389168152602081018390529081018790527f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59060600160405180910390a16000979650505050505050565b61123d81600d80548060200260200160405190810160405280929190818152602001828054801561322c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161320e575b505050505061105f565b600080613244858585614535565b90508015613253579050611585565b61325c85613dde565b6132668585613f56565b600095945050505050565b6040516361bfb47160e11b815233600482015260009082908290819081906001600160a01b0385169063c37f68e290602401608060405180830381865afa1580156132c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e4919061530b565b50925092509250826000146133495760405162461bcd60e51b815260206004820152602560248201527f657869744d61726b65743a206765744163636f756e74536e617073686f742066604482015264185a5b195960da1b6064820152608401610cdd565b80156133655761335b600c60026140f4565b9695505050505050565b6000613372873385614535565b9050801561339257613387600e600383614764565b979650505050505050565b6001600160a01b0385166000908152600960209081526040808320338452600281019092529091205460ff166133d057600098975050505050505050565b3360009081526002820160209081526040808320805460ff19169055600882528083208054825181850281018501909352808352919290919083018282801561344257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613424575b5050835193945083925060009150505b828110156134a757896001600160a01b03168482815181106134765761347661516f565b60200260200101516001600160a01b03161415613495578091506134a7565b8061349f816151b2565b915050613452565b508181106134b7576134b76152f5565b336000908152600860205260409020805481906134d69060019061519b565b815481106134e6576134e661516f565b9060005260206000200160009054906101000a90046001600160a01b03168183815481106135165761351661516f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080548061355457613554615341565b600082815260209020810160001990810180546001600160a01b03191690550190556040517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d906135bd908c9033906001600160a01b0392831681529116602082015260400190565b60405180910390a160009c9b505050505050505050505050565b60006115858284615357565b6000611585828461519b565b6001600160a01b038216600090815260116020908152604080832060199092528220549091613654425b6040518060400160405280601c81526020017f626c6f636b206e756d62657220657863656564732033322062697473000000008152506147dc565b83549091506000906136769063ffffffff80851691600160e01b9004166135e3565b90506000811180156136885750600083115b156137b75760006136fa876001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f491906152a9565b8761480c565b9050600061370883866141a5565b905060008083116137285760405180602001604052806000815250613732565b613732828461482a565b604080516020810190915288546001600160e01b031681529091506137959061375b9083614865565b5160408051808201909152601a81527f6e657720696e64657820657863656564732032323420626974730000000000006020820152614891565b6001600160e01b0316600160e01b63ffffffff8716021787555061063c915050565b801561063c57835463ffffffff8316600160e01b026001600160e01b03909116178455505050505050565b6001600160a01b03838116600090815260116020908152604080832080546013845282852095881685529490925290912080546001600160e01b039093169081905590918015801561384257506a0c097ce7bc90715b34b9f160241b8210155b1561385857506a0c097ce7bc90715b34b9f160241b5b6000604051806020016040528061386f85856135e3565b90526040516395dd919360e01b81526001600160a01b0388811660048301529192506000916138c291908a16906395dd919390602401602060405180830381865afa1580156136d0573d6000803e3d6000fd5b905060006138d082846148b8565b6001600160a01b038916600090815260146020526040812054919250906138f790836135d7565b6001600160a01b038a811660008181526014602090815260409182902085905581518781529081018b90529394509092918d16917f1fc3ecc087d8d2d15e23d0032af5a47059c3892d003d8e139fdcb6bb327c99a6910160405180910390a350505050505050505050565b600080546001600160a01b031633148061398657506002546001600160a01b031633145b905090565b60008073d86c8d4279ccafbec840c782bcc50d201f2774196040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156139ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1191906152a9565b9050600084118015613a235750808411155b15613aa75760405163a9059cbb60e01b81526001600160a01b0386811660048301526024820186905283169063a9059cbb906044016020604051808303816000875af1158015613a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a9b91906152d8565b50600092505050611059565b50919392505050565b6000806000613abd61494e565b6001600160a01b038816600090815260086020908152604080832080548251818502810185019093528083528493830182828015613b2457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b06575b5050505050905060005b8151811015613d88576000828281518110613b4b57613b4b61516f565b60209081029190910101516040516361bfb47160e11b81526001600160a01b038e811660048301529192509082169063c37f68e290602401608060405180830381865afa158015613ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc4919061530b565b60808901526060880152604087015293508315613bf057600f60008097509750975050505050506117b6565b60408051602080820183526001600160a01b0384811660008181526009845285902060010154845260c08a01939093528351808301855260808a0151815260e08a015260048054855163fc57d4df60e01b815291820194909452935192169263fc57d4df92602480830193928290030181865afa158015613c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9991906152a9565b60a08601819052613cb957600d60008097509750975050505050506117b6565b604080516020810190915260a0860151815261010086015260c085015160e0860151613cf391613ce8916146e2565b8661010001516146e2565b610120860181905260408601518651613d0d9291906148e1565b855261010085015160608601516020870151613d2a9291906148e1565b60208601526001600160a01b03818116908c161415613d7557613d578561012001518b87602001516148e1565b60208601819052610100860151613d6f918b906148e1565b60208601525b5080613d80816151b2565b915050613b2e565b50602083015183511115613db95760208301518351600091613da99161519b565b60009550955095505050506117b6565b60008084600001518560200151613dd0919061519b565b9550955095505050506117b6565b6001600160a01b0381166000908152601060209081526040808320601a9092528220549091613e0c42613619565b8354909150600090613e2e9063ffffffff80851691600160e01b9004166135e3565b9050600081118015613e405750600083115b15613f2c576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea991906152a9565b90506000613eb783866141a5565b90506000808311613ed75760405180602001604052806000815250613ee1565b613ee1828461482a565b604080516020810190915288546001600160e01b03168152909150613f0a9061375b9083614865565b6001600160e01b0316600160e01b63ffffffff87160217875550610536915050565b801561053657835463ffffffff8316600160e01b026001600160e01b039091161784555050505050565b6001600160a01b03828116600090815260106020908152604080832080546012845282852095871685529490925290912080546001600160e01b0390931690819055909180158015613fb657506a0c097ce7bc90715b34b9f160241b8210155b15613fcc57506a0c097ce7bc90715b34b9f160241b5b60006040518060200160405280613fe385856135e3565b90526040516370a0823160e01b81526001600160a01b0387811660048301529192506000918816906370a0823190602401602060405180830381865afa158015614031573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061405591906152a9565b9050600061406382846148b8565b6001600160a01b0388166000908152601460205260408120549192509061408a90836135d7565b6001600160a01b0389811660008181526014602090815260409182902085905581518781529081018b90529394509092918c16917f2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a910160405180910390a3505050505050505050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836011811115614129576141296152c2565b83601381111561413b5761413b6152c2565b60408051928352602083019190915260009082015260600160405180910390a1826011811115611585576115856152c2565b6000806000614180846000806000613ab0565b9250925092509193909250565b60008061419a8484614902565b90506112f68161492a565b6000611585828461536f565b60005b600d5481101561424757816001600160a01b0316600d82815481106141db576141db61516f565b6000918252602090912001546001600160a01b031614156142355760405162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08185b1c9958591e48185919195960621b6044820152606401610cdd565b8061423f816151b2565b9150506141b4565b50600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0392909216919091179055565b60006142a542613619565b6001600160a01b03831660009081526010602090815260408083206011909252909120815492935090916001600160e01b03166142fb5781546001600160e01b0319166a0c097ce7bc90715b34b9f160241b1782555b80546001600160e01b03166143295780546001600160e01b0319166a0c097ce7bc90715b34b9f160241b1781555b805463ffffffff909316600160e01b026001600160e01b0393841681179091558154909216909117905550565b6001600160a01b0383166000908152600960205260409020805460ff166143bf5760405162461bcd60e51b815260206004820152601960248201527f636f6d70206d61726b6574206973206e6f74206c6973746564000000000000006044820152606401610cdd565b6001600160a01b0384166000908152601a6020526040902054831461443d576143e784613dde565b6001600160a01b0384166000818152601a602052604090819020859055517fdeafccd0c0b768b2529f7dcbbe58e155d6023059150b7490ed4535cc3744b92d906144349086815260200190565b60405180910390a25b6001600160a01b03841660009081526019602052604090205482146106225760006040518060200160405280866001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144cb91906152a9565b905290506144d985826135ef565b6001600160a01b03851660008181526019602052604090819020859055517f20af8e791cc98f74b2d7a391c80980ca8e5aebf3d4060bf581997b6acae2e537906145269086815260200190565b60405180910390a25050505050565b6001600160a01b03831660009081526009602052604081205460ff1661455c57600961183d565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff1661459457600061183d565b6000806145a48587866000613ab0565b919350909150600090508260118111156145c0576145c06152c2565b146145e0578160118111156145d7576145d76152c2565b92505050611585565b8015612c2c5760046145d7565b6001600160a01b0382166000908152600960205260408120805460ff16614618576009915050611059565b6001600160a01b038316600090815260028201602052604090205460ff1615156001141561464a576000915050611059565b6001600160a01b03838116600081815260028401602090815260408083208054600160ff199091168117909155600883528184208054918201815584529282902090920180546001600160a01b031916948916948517905581519384528301919091527f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5910160405180910390a15060009392505050565b6040805160208101909152600081526040518060200160405280670de0b6b3a7640000614717866000015186600001516141a5565b614721919061538e565b90529392505050565b604080516020810190915260008152604051806020016040528061472161475d8660000151670de0b6b3a76400006141a5565b8551614942565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0846011811115614799576147996152c2565b8460138111156147ab576147ab6152c2565b604080519283526020830191909152810184905260600160405180910390a18360118111156112f6576112f66152c2565b60008164010000000084106148045760405162461bcd60e51b8152600401610cdd91906153b0565b509192915050565b600061158561482384670de0b6b3a76400006141a5565b8351614942565b604080516020810190915260008152604051806020016040528061472161485f866a0c097ce7bc90715b34b9f160241b6141a5565b85614942565b6040805160208101909152600081526040518060200160405280614721856000015185600001516135d7565b600081600160e01b84106148045760405162461bcd60e51b8152600401610cdd91906153b0565b60006a0c097ce7bc90715b34b9f160241b6148d78484600001516141a5565b611585919061538e565b6000806148ee8585614902565b9050611d1e6148fc8261492a565b846135d7565b60408051602081019091526000815260405180602001604052806147218560000151856141a5565b805160009061105990670de0b6b3a76400009061538e565b6000611585828461538e565b60405180610140016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200161499a6040518060200160405280600081525090565b81526020016149b56040518060200160405280600081525090565b81526020016149d06040518060200160405280600081525090565b81526020016149eb6040518060200160405280600081525090565b905290565b60008083601f840112614a0257600080fd5b50813567ffffffffffffffff811115614a1a57600080fd5b6020830191508360208260051b8501011115614a3557600080fd5b9250929050565b60008060008060408587031215614a5257600080fd5b843567ffffffffffffffff80821115614a6a57600080fd5b614a76888389016149f0565b90965094506020870135915080821115614a8f57600080fd5b50614a9c878288016149f0565b95989497509550505050565b6001600160a01b038116811461123d57600080fd5b801515811461123d57600080fd5b60008060408385031215614ade57600080fd5b8235614ae981614aa8565b91506020830135614af981614abd565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614b4357614b43614b04565b604052919050565b600067ffffffffffffffff821115614b6557614b65614b04565b5060051b60200190565b600082601f830112614b8057600080fd5b81356020614b95614b9083614b4b565b614b1a565b82815260059290921b84018101918181019086841115614bb457600080fd5b8286015b84811015614bd8578035614bcb81614aa8565b8352918301918301614bb8565b509695505050505050565b60008060408385031215614bf657600080fd5b8235614c0181614aa8565b9150602083013567ffffffffffffffff811115614c1d57600080fd5b614c2985828601614b6f565b9150509250929050565b600060208284031215614c4557600080fd5b813561158581614aa8565b600080600080600060a08688031215614c6857600080fd5b8535614c7381614aa8565b94506020860135614c8381614aa8565b93506040860135614c9381614aa8565b94979396509394606081013594506080013592915050565b60008060008060808587031215614cc157600080fd5b8435614ccc81614aa8565b93506020850135614cdc81614aa8565b92506040850135614cec81614aa8565b9396929550929360600135925050565b60008060408385031215614d0f57600080fd5b8235614d1a81614aa8565b946020939093013593505050565b600060208284031215614d3a57600080fd5b813561158581614abd565b600060208284031215614d5757600080fd5b5035919050565b60008060008060808587031215614d7457600080fd5b8435614d7f81614aa8565b93506020850135614d8f81614aa8565b93969395505050506040820135916060013590565b60008060008060008060c08789031215614dbd57600080fd5b8635614dc881614aa8565b95506020870135614dd881614aa8565b94506040870135614de881614aa8565b93506060870135614df881614aa8565b9598949750929560808101359460a0909101359350915050565b600080600060608486031215614e2757600080fd5b8335614e3281614aa8565b92506020840135614e4281614aa8565b929592945050506040919091013590565b600080600080600060a08688031215614e6b57600080fd5b8535614e7681614aa8565b94506020860135614e8681614aa8565b93506040860135614e9681614aa8565b92506060860135614ea681614aa8565b949793965091946080013592915050565b600082601f830112614ec857600080fd5b81356020614ed8614b9083614b4b565b82815260059290921b84018101918181019086841115614ef757600080fd5b8286015b84811015614bd8578035614f0e81614aa8565b8352918301918301614efb565b60008060008060808587031215614f3157600080fd5b843567ffffffffffffffff80821115614f4957600080fd5b614f5588838901614eb7565b95506020870135915080821115614f6b57600080fd5b50614f7887828801614b6f565b9350506040850135614f8981614abd565b91506060850135614f9981614abd565b939692955090935050565b60008060408385031215614fb757600080fd5b8235614fc281614aa8565b91506020830135614af981614aa8565b600082601f830112614fe357600080fd5b81356020614ff3614b9083614b4b565b82815260059290921b8401810191818101908684111561501257600080fd5b8286015b84811015614bd85780358352918301918301615016565b60008060006060848603121561504257600080fd5b833567ffffffffffffffff8082111561505a57600080fd5b61506687838801614b6f565b9450602086013591508082111561507c57600080fd5b61508887838801614fd2565b9350604086013591508082111561509e57600080fd5b506150ab86828701614fd2565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156150f65783516001600160a01b0316835292840192918401916001016150d1565b50909695505050505050565b60006020828403121561511457600080fd5b813567ffffffffffffffff81111561512b57600080fd5b6112f684828501614eb7565b6020808252825182820181905260009190848201906040850190845b818110156150f657835183529284019291840191600101615153565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156151ad576151ad615185565b500390565b60006000198214156151c6576151c6615185565b5060010190565b60208082526028908201527f63616e6e6f742070617573652061206d61726b65742074686174206973206e6f6040820152671d081b1a5cdd195960c21b606082015260800190565b60208082526027908201527f6f6e6c7920706175736520677561726469616e20616e642061646d696e2063616040820152666e20706175736560c81b606082015260800190565b6020808252601690820152756f6e6c792061646d696e2063616e20756e706175736560501b604082015260600190565b60006020828403121561529e57600080fd5b815161158581614aa8565b6000602082840312156152bb57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156152ea57600080fd5b815161158581614abd565b634e487b7160e01b600052600160045260246000fd5b6000806000806080858703121561532157600080fd5b505082516020840151604085015160609095015191969095509092509050565b634e487b7160e01b600052603160045260246000fd5b6000821982111561536a5761536a615185565b500190565b600081600019048311821515161561538957615389615185565b500290565b6000826153ab57634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b818110156153dd578581018301518582016040015282016153c1565b818111156153ef576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220e8ebe49b2e7b498ccb9b786dc415308a311b4018cfe83d434e848377b0108e7964736f6c634300080a0033",
      "r": "0x859137e0ed663ed1874d17722b93b7e7a6c07732d94aefbea7d420517f1d25bf",
      "s": "0x69238e521e28e2adeea78cee62dbe1f03f0bc5c915fea4adcbbb79f5c5c05084",
      "v": 4480,
      "chainId": 2222
    }
  }
}